{
	"folder_history":
	[
		"/home/jadavis/repos/dms",
		"/home/jadavis/repos/bms-esign",
		"/home/jadavis/repos/bluemoon-production-compare",
		"/home/jadavis/repos/bms2-sandlot",
		"/home/jadavis/repos/mobile-esign-compare",
		"/home/jadavis/repos/bms-esign-compare",
		"/home/jadavis/repos/github-prod-keys",
		"/home/jadavis/repos/kappa",
		"/home/jadavis/repos/dev_database",
		"/home/jadavis/repos/bms-dms",
		"/home/jadavis/repos/configuration",
		"/home/jadavis/repos/mobile-esign",
		"/home/jadavis/repos/bluemoon-production",
		"/home/jadavis/repos/bms2-sandlot-compare",
		"/home/jadavis/repos/bms2-sandlot-compare/packages",
		"/home/jadavis/repos/bluemoon-production/cgi-bin",
		"/home/jadavis/repos/udacity/html5-canvas",
		"/home/jadavis/repos/jadinvt.github.io",
		"/home/jadavis/repos/bms-esign/app",
		"/home/jadavis/repos/jekyll/jaddavis",
		"/home/jadavis/repos/chef-bms",
		"/home/jadavis/repos/laravel-opsworks",
		"/home/jadavis/repos/bms2-sandlot/tests/bluemoon",
		"/home/jadavis/repos",
		"/home/jadavis/repos/homestead/structure",
		"/home/jadavis/repos/bms2-sandlot/resources",
		"/home/jadavis/repos/structure",
		"/home/jadavis/repos/homestead/Laravel/learning-laravel-5",
		"/home/jadavis/repos/homestead/Laravel/eloquent-series",
		"/home/jadavis/repos/bluemoon-sql",
		"/home/jadavis/repos/deployment-mgr"
	],
	"last_version": 3126,
	"last_window_id": 331,
	"log_indexing": false,
	"settings":
	{
		"new_window_height": 0.0,
		"new_window_settings":
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"elasticache",
						"elasticache_dev"
					],
					[
						"elastic",
						"elasticache_dev\t(database.php)"
					],
					[
						"instanc",
						"instanceof"
					],
					[
						"eD",
						"eDocumentObj"
					],
					[
						"Do",
						"DocumentWasSigned"
					],
					[
						"OWN",
						"OWNER_ESIGN_USE_ID"
					],
					[
						"eS",
						"eSignService"
					],
					[
						"proper",
						"propertyName"
					],
					[
						"DATE",
						"DATEINITIATED"
					],
					[
						"ES",
						"ESignatureService"
					],
					[
						"ESi",
						"ESignatureService\t(WorkflowController.php)"
					],
					[
						"first",
						"firstSigner"
					],
					[
						"legacy",
						"legacyAppNodeUrl\t(bluemoon.php)"
					],
					[
						"sendSig",
						"sendSignatureRequests\t(MailService.php)"
					],
					[
						"Create",
						"CreateDocumentImages\t(CreateDocumentImages.php)"
					],
					[
						"R",
						"Report"
					],
					[
						"Offic",
						"OfficeService"
					],
					[
						"Offi",
						"OfficeSuite"
					],
					[
						"Techno",
						"TechnoteSource\t(AppServiceProvider.php)"
					],
					[
						"orig",
						"origAttributes"
					],
					[
						"num",
						"numberOfUnits"
					],
					[
						"prop",
						"property_exists"
					],
					[
						"syncProperty",
						"syncPropertyNumberOfUnits\t(PortfolioService.php)"
					],
					[
						"sy",
						"syncArray"
					],
					[
						"number",
						"numberOfUnits\t(DbPropertyRepository.php)"
					],
					[
						"privi",
						"privilegeLabels"
					],
					[
						"array_",
						"array_key_exists\t(CustomUserProvider.php)"
					],
					[
						"por",
						"portfolioDataForAssociation"
					],
					[
						"comp",
						"comparePropertyAttributes"
					],
					[
						"portfo",
						"portfolioService"
					],
					[
						"sync",
						"syncPropertyAttributes\t(DbPropertyRepository.php)"
					],
					[
						"getA",
						"getAttributeMap"
					],
					[
						"getUsers",
						"getUsersByAccount\t(UserSettingsController.php)"
					],
					[
						"Por",
						"PortfolioService"
					],
					[
						"formsOn",
						"formsOnlineUserRepos"
					],
					[
						"add",
						"addTechnoteAttachment\t(OfficeService.php)"
					],
					[
						"technote",
						"technoteRepos"
					],
					[
						"modelTyp",
						"modelTypeAttribute"
					],
					[
						"getMod",
						"getModelByRealId"
					],
					[
						"technoteAtta",
						"TechnoteAttachment"
					],
					[
						"Bu",
						"BusinessObject"
					],
					[
						"tech",
						"technoteCategory\t(DbTechnoteRepository.php)"
					],
					[
						"getAtt",
						"getAttributes\t(PropertyService.php)"
					],
					[
						"techno",
						"technoteSource"
					],
					[
						"cat",
						"categoryId"
					],
					[
						"getCate",
						"getCategoryByLabel"
					],
					[
						"to",
						"toBusinessObject"
					],
					[
						"getCat",
						"getCategoryModelByLabel"
					],
					[
						"note",
						"noteCategory"
					],
					[
						"Commu",
						"CommunicationsController"
					],
					[
						"place",
						"placeholder\tAttr"
					],
					[
						"getTe",
						"getTechnotesBySerialNumber\t(OfficeService.php)"
					],
					[
						"toB",
						"toBusinessObject($this"
					],
					[
						"array_key",
						"array_key_exists"
					],
					[
						"buiness",
						"businessObject"
					],
					[
						"bui",
						"businessObject"
					],
					[
						"business",
						"businessObject"
					],
					[
						"cre",
						"creationTime"
					],
					[
						"ibaseTech",
						"ibaseTechnoteClass"
					],
					[
						"clien",
						"clientTypeEmailId"
					],
					[
						"clientT",
						"clientTypeEmailId"
					],
					[
						"arra",
						"array_key_exists\t(DbAccountRepository.php)"
					],
					[
						"getModel",
						"getModelBySerialNumber"
					],
					[
						"getI",
						"getIbaseModelBySerialNumber($serialNumber"
					],
					[
						"fun",
						"fun\tfunction …"
					],
					[
						"client",
						"clientTypeId"
					],
					[
						"is",
						"is_array\t(DbPermissionRepositoryTest.php)"
					],
					[
						"Bluemoon",
						"Bluemoon\\User\\Models\\Token\t(TokenType.php)"
					],
					[
						"userMdoel",
						"userModelbyToken"
					],
					[
						"assne",
						"assertGreaterThan\t(DbAccountRepositoryTest.php)"
					],
					[
						"user",
						"user_id"
					],
					[
						"asser",
						"assertInstanceOf"
					],
					[
						"User",
						"UserController"
					],
					[
						"Con",
						"Controller\t(BaseUserController.php)"
					],
					[
						"Base",
						"BaseUserController\t(BaseUserController.php)"
					],
					[
						"access",
						"accessTokenOrModule"
					],
					[
						"fina",
						"finalAttributes2"
					],
					[
						"final",
						"finalAttributes1"
					],
					[
						"port",
						"portfolioService"
					],
					[
						"property",
						"property_exists"
					],
					[
						"mapped",
						"mappedAttribute"
					],
					[
						"ass",
						"assem\tassertEmpty"
					],
					[
						"ASS",
						"ASSOCIATION\t(Account.php)"
					],
					[
						"modeTyp",
						"modelTypeAttribute"
					],
					[
						"str",
						"strtolower"
					],
					[
						"bu",
						"businessObject"
					],
					[
						"prim",
						"primaryKey\t(Model.php)"
					],
					[
						"imo",
						"imodelArray"
					],
					[
						"ibaseMo",
						"ibaseModelCollection"
					],
					[
						"new",
						"newPortfolio"
					],
					[
						"getAttr",
						"getAttributeMap"
					],
					[
						"increment",
						"incrementGeneratorId($generator"
					],
					[
						"incre",
						"incrementGeneratorId"
					],
					[
						"permi",
						"permissionRespos"
					],
					[
						"getPerm",
						"getPermissions"
					],
					[
						"ae",
						"assertEquals"
					],
					[
						"du",
						"dummyPermission"
					],
					[
						"Perm",
						"PermissionObserver"
					],
					[
						"Bas",
						"BaseObserver"
					],
					[
						"Of",
						"OfficeService\t(BaseOfficeSuiteController.php)"
					],
					[
						"manage",
						"managePermissionModal"
					],
					[
						"debug_",
						"debug_print_backtrace"
					],
					[
						"Ser",
						"Service\t(ServiceReportServiceTest.php)"
					],
					[
						"CLICK",
						"CLICKS_PURCHASED"
					],
					[
						"COMPANY",
						"COMPANY_NUMBER"
					],
					[
						"COMP",
						"COMPANY_NAME\t(ReportService.php)"
					],
					[
						"SERIA",
						"SERIAL_NUMBER"
					],
					[
						"SER",
						"SERIAL_NUMBER"
					],
					[
						"Ob",
						"ObserverServiceProvider\t(ObserverServiceProvider.php)"
					],
					[
						"getAt",
						"getAttributes"
					],
					[
						"get",
						"getBOAttributeName"
					],
					[
						"association",
						"associationDescription"
					],
					[
						"PROPERTY",
						"PROPERTYNUMBER"
					],
					[
						"expected",
						"expectedProperties"
					],
					[
						"expe",
						"expectedProperties"
					],
					[
						"ibaseP",
						"ibasePropertyClass"
					],
					[
						"IbaseA",
						"IbaseAccount"
					],
					[
						"Port",
						"PortfolioService\t(ReportService.php)"
					],
					[
						"report",
						"reportService"
					],
					[
						"Click",
						"ClickReportService\t(ReportService.php)"
					],
					[
						"Clic",
						"ClickReportService\t(ClickReportServiceTest.php)"
					],
					[
						"clicko",
						"clickOrderRepos"
					],
					[
						"Mo",
						"Models"
					],
					[
						"LO",
						"LOOKUPNAME"
					],
					[
						"boole",
						"booleanField"
					],
					[
						"off",
						"officeService"
					],
					[
						"propertyN",
						"propertyNumberSearch"
					],
					[
						"Busin",
						"BusinessObject\t(DbRepository.php)"
					]
				]
			},
			"build_system_choices":
			[
				[
					[
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							""
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (All)"
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (This File Only)"
						],
						[
							"Packages/User/builds/psr2.sublime-build",
							""
						]
					],
					[
						"Packages/User/builds/psr2.sublime-build",
						""
					]
				]
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 392.0,
				"last_filter": "pack",
				"selected_items":
				[
					[
						"pack",
						"Package Control: List Packages"
					],
					[
						"Package Control: ",
						"Package Control: List Packages"
					],
					[
						"Snippet: ",
						"Snippet: COOKIE['…']"
					],
					[
						"Package Control: install",
						"Package Control: Install Package"
					],
					[
						"Snippet: ld",
						"Snippet: LogDebug"
					],
					[
						"Paconrepa",
						"Package Control: Remove Package"
					],
					[
						"inp",
						"Package Control: Install Package"
					],
					[
						"instal",
						"Package Control: Install Package"
					],
					[
						"pa",
						"Package Control: Install Package"
					],
					[
						"paconad",
						"Package Control: Add Repository"
					],
					[
						"sniff",
						"PHP Code Sniffer: Sniff this file"
					],
					[
						"phpunit",
						"PHPUnit: Run"
					],
					[
						"phpun",
						"PHPUnit: Run"
					],
					[
						"tenant",
						"GitGutter: Show Comparing Against"
					],
					[
						"getset",
						"Generate Getter and Setter for ..."
					],
					[
						"togglet",
						"View: Toggle Tabs"
					],
					[
						"get set",
						"PHP: Generate Getters and Setters"
					],
					[
						"toggle tab",
						"View: Toggle Tabs"
					],
					[
						"View:toggl",
						"View: Toggle Tabs"
					],
					[
						"sublimelinter",
						"Preferences: SublimeLinter Key Bindings – Default"
					],
					[
						"packagecon",
						"Package Control: List Packages"
					],
					[
						"in",
						"Package Control: Install Package"
					],
					[
						"inst",
						"Package Control: Install Package"
					],
					[
						"sublim",
						"SublimeLinter: Show All Errors"
					],
					[
						"ins",
						"Package Control: Install Package"
					],
					[
						"generate",
						"Generate Getter and Setter for ..."
					],
					[
						"phprefa",
						"PHPSimpleRefactor: extract current lines to method"
					],
					[
						"pca",
						"Package Control: Install Package"
					],
					[
						"phpcompan",
						"PHPCompanion:Find Use"
					],
					[
						"toggle ta",
						"View: Toggle Tabs"
					],
					[
						"getter",
						"PHP: Generate Getters"
					],
					[
						"Snippet: asse",
						"Snippet: assertEquals"
					],
					[
						"install",
						"Package Control: Install Package"
					],
					[
						"phpcompanion",
						"PHPCompanion:Expand Fully Qualified Class Name"
					],
					[
						"impo",
						"PHPCompanion:Import Namespace"
					],
					[
						"phpcomp",
						"PHPCompanion:Import Namespace"
					],
					[
						"compan",
						"PHPCompanion:Insert Constructor Property"
					],
					[
						"php",
						"PHPCompanion:Insert Constructor Property"
					],
					[
						"phpcom",
						"PHPCompanion:Insert Constructor Property"
					],
					[
						"const",
						"PHPCompanion:Insert Constructor Property"
					],
					[
						"packi",
						"Package Control: Install Package"
					],
					[
						"php com",
						"PHPCompanion:Expand Fully Qualified Class Name"
					],
					[
						"insta",
						"Package Control: Install Package"
					],
					[
						"toggle ",
						"View: Toggle Status Bar"
					],
					[
						"anf",
						"ANF: Rename File"
					],
					[
						"status",
						"View: Toggle Status Bar"
					],
					[
						"package re",
						"PackageResourceViewer: Extract Package"
					],
					[
						"package in",
						"Package Control: Install Package"
					],
					[
						"install ",
						"Colorsublime: Install Theme"
					],
					[
						"pcak",
						"Package Control: Install Package"
					],
					[
						"esign",
						"Snippet: Designate that the column allows NULL values"
					],
					[
						"Snippet: doc",
						"Snippet: Start Docblock"
					],
					[
						"packains",
						"Package Control: Install Package"
					],
					[
						"packin",
						"Package Control: Install Package"
					],
					[
						"syntaxjson",
						"Set Syntax: JSON"
					],
					[
						"Pacin",
						"Package Control: Install Package"
					],
					[
						"Package Control: inst",
						"Package Control: Install Package"
					],
					[
						"Package Control: in",
						"Package Control: Install Package"
					],
					[
						"inden",
						"Indentation: Reindent Lines"
					],
					[
						":w",
						":w - Save"
					]
				],
				"width": 962.0
			},
			"console":
			{
				"height": 375.0,
				"history":
				[
					"+context_name+",
					"clear",
					"Toggle ScopeAlways",
					"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) :Q",
					"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/home/jadavis/repos/bms2-sandlot/.env",
				"/home/jadavis/repos/bms2-sandlot/app/Auth/Guard.php",
				"/home/jadavis/repos/bms-esign/app/Libraries/Repositories/DbEDocumentRepository.php",
				"/home/jadavis/repos/bms-esign/app/Libraries/Constants.php",
				"/home/jadavis/repos/bms-esign/app/Models/ESigner.php",
				"/home/jadavis/repos/bms-esign/app/Services/ESignatureService.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/ownerComplete.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/resComplete.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/submitted.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/sign.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/otherRentalApp.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/notification.blade.php",
				"/home/jadavis/repos/bms-esign/app/Bms/Support/AddressBuilder.php",
				"/home/jadavis/repos/bms-esign/app/Models/Property.php",
				"/home/jadavis/repos/bms-esign-compare/app/Services/MailService.php",
				"/home/jadavis/repos/bms-esign/app/Services/MailService.php",
				"/home/jadavis/repos/bms-esign/tests/bluemoon/esignature/services/MailServiceTest.php",
				"/home/jadavis/repos/bms-esign/app/Models/ProductSettingsUse.php",
				"/home/jadavis/repos/bms-esign/app/Models/Product.php",
				"/home/jadavis/repos/bms-esign/app/Models/Customer.php",
				"/home/jadavis/repos/bms-esign/tests/bluemoon/esignature/services/ESignatureServiceTest.php",
				"/home/jadavis/repos/bms-esign/tests/bluemoon/esignature/models/ESignerTest.php",
				"/home/jadavis/repos/bms-esign/tests/bluemoon/esignature/models/EDocumentTest.php",
				"/home/jadavis/repos/bms-esign/tests/CustomerTest.php",
				"/home/jadavis/repos/bms-esign/public/js/app/setup.js",
				"/home/jadavis/repos/bms-esign/app/Models/Portolio.php",
				"/home/jadavis/repos/bms-esign/app/Models/Model.php",
				"/home/jadavis/repos/bms-esign/app/Models/ESignerHistory.php",
				"/home/jadavis/repos/bms-esign/app/Models/EDocument.php",
				"/home/jadavis/repos/bms-esign/app/Services/PDFConversionService.php",
				"/home/jadavis/repos/bms-esign/app/Providers/AppServiceProvider.php",
				"/home/jadavis/repos/bms-esign/config/app.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/executed.blade.php",
				"/home/jadavis/repos/bms-esign/app/Listeners/Events/EmailExecutedNotice.php",
				"/home/jadavis/repos/bms-esign/public/js/app/forms.js",
				"/home/jadavis/repos/bms-esign/resources/views/steps/forms.blade.php",
				"/home/jadavis/repos/bms-esign/public/js/ngMask.js",
				"/home/jadavis/repos/bms-esign/resources/views/steps/setup.blade.php",
				"/home/jadavis/repos/bms-esign/public/js/app/jSignature-inline/jSignature-core.js",
				"/home/jadavis/repos/bms-esign/config/session.php",
				"/home/jadavis/repos/bms-esign/resources/views/disclosure.blade.php",
				"/home/jadavis/repos/bms-esign/config/database.php",
				"/home/jadavis/repos/bms-esign/app/Listeners/Events/SaveOwnerSignature.php",
				"/home/jadavis/repos/bms-esign/config/esignature.php",
				"/home/jadavis/repos/bms-esign/app/Events/DocumentWasSigned.php",
				"/home/jadavis/repos/bms-esign/app/Observers/ESignerObserver.php",
				"/home/jadavis/repos/bms-esign/app/Providers/ObserverServiceProvider.php",
				"/home/jadavis/repos/bms-esign/app/Http/Kernel.php",
				"/home/jadavis/repos/bms-esign/app/Console/Kernel.php",
				"/home/jadavis/repos/bms-esign/public/js/app/complete.js",
				"/home/jadavis/repos/bms-esign/app/Listeners/Events/EmailSignatureNotice.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/readyToExecute.blade.php",
				"/home/jadavis/repos/bms-esign/app/Listeners/Events/CheckReadyToExecute.php",
				"/home/jadavis/repos/bms-esign/app/Listeners/Events/EmailInitialNotice.php",
				"/home/jadavis/repos/bms-esign-compare/app/Providers/EventServiceProvider.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/initiated.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/gaaSign.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/gaaReadyToExecute.blade.php",
				"/home/jadavis/repos/bms-esign/app/Providers/EventServiceProvider.php",
				"/home/jadavis/repos/bms-esign/resources/views/index.blade.php",
				"/home/jadavis/repos/bms-esign/public/js/app/disclosure.js",
				"/home/jadavis/repos/bms-esign/composer.json",
				"/home/jadavis/repos/bms-esign/config/cache.php",
				"/home/jadavis/repos/bms-esign/app/Events/DocumentWasExecuted.php",
				"/home/jadavis/repos/bms-esign/app/Commands/CreateDocumentImages.php",
				"/home/jadavis/repos/bms-esign/vendor/symfony/debug/Symfony/Component/Debug/ExceptionHandler.php",
				"/home/jadavis/repos/bms-esign/app/Exceptions/BmsException.php",
				"/home/jadavis/repos/bms-esign/app/Exceptions/HttpException.php",
				"/home/jadavis/repos/bms-esign/app/Exceptions/Handler.php",
				"/home/jadavis/repos/bms-esign/app/Events/DocumentWasCreated.php",
				"/home/jadavis/repos/bms-esign/app/Http/Controllers/EventController.php",
				"/home/jadavis/repos/bms-esign/app/Http/routes.php",
				"/home/jadavis/repos/bms-esign/app/Libraries/Repositories/DbESignerRepository.php",
				"/home/jadavis/repos/bms-esign/vendor/laravel/framework/src/Illuminate/Foundation/Support/Providers/EventServiceProvider.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/master.blade.php",
				"/home/jadavis/repos/bms-esign/vendor/laravel/framework/src/Illuminate/Foundation/Application.php",
				"/home/jadavis/repos/bms-esign/resources/views/master/mobile.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/portal/mobile-panel.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/portal/lease-summary-panel.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/master/portal.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/mobile/payment.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/mobile/complete.blade.php",
				"/home/jadavis/repos/bms-esign/app/Http/Controllers/EDocumentController.php",
				"/home/jadavis/repos/bms-esign/.env",
				"/home/jadavis/repos/bms-esign/vendor/symfony/debug/Symfony/Component/Debug/Exception/FatalErrorException.php",
				"/home/jadavis/repos/bms-esign/vendor/laravel/framework/src/Illuminate/Foundation/Exceptions/Handler.php",
				"/home/jadavis/repos/bms-esign/vendor/laravel/framework/src/Illuminate/Contracts/Debug/ExceptionHandler.php",
				"/home/jadavis/repos/bms-esign/app/Http/Controllers/WorkflowController.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/signature.blade.php",
				"/home/jadavis/repos/bms-esign/app/Events/CheckReadyToExecute.php",
				"/home/jadavis/repos/bms-esign/app/Listeners/Events/EmailOwnerInitialNotice.php",
				"/home/jadavis/repos/bms-esign/resources/views/emails/master.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/emails/password.blade.php",
				"/home/jadavis/repos/bms-esign/app/Providers/ResponseMacroServiceProvider.php",
				"/home/jadavis/repos/bms-esign/resources/views/formthumbnail.blade.php",
				"/home/jadavis/repos/bms-esign/app/Http/Controllers/MobileController.php",
				"/home/jadavis/repos/bms-esign/public/index.php",
				"/home/jadavis/repos/bms-esign/public/.htaccess",
				"/home/jadavis/repos/bms-esign-compare/app/Http/Controllers/WorkflowController.php",
				"/home/jadavis/repos/bms-esign/config/bluemoon.php",
				"/home/jadavis/repos/bms-esign/app/Observers/EDocumentObserver.php",
				"/home/jadavis/repos/bms-esign/storage/framework/views/131fae90a7b1f53a6c227640c49ededd",
				"/home/jadavis/repos/bms-esign-compare/app/Services/ESignatureService.php",
				"/home/jadavis/repos/bms-esign/public/js/angular-pdfjs.js",
				"/home/jadavis/repos/bms-esign/public/js/pdf.js",
				"/home/jadavis/repos/bms-esign/resources/views/complete.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/themes/Default/head.blade.php",
				"/home/jadavis/repos/bms2-sandlot/mobile/esignApp/www/master.html",
				"/home/jadavis/repos/bms-esign/app/Bms/Support/EsigncacheStore.php",
				"/home/jadavis/repos/bms-esign/config/queue.php",
				"/home/jadavis/repos/bms-esign/vendor/laravel/framework/src/Illuminate/Queue/InteractsWithQueue.php",
				"/home/jadavis/repos/bms-esign/vendor/laravel/framework/src/Illuminate/Queue/Listener.php",
				"/home/jadavis/repos/bms-esign/vendor/laravel/framework/src/Illuminate/Events/EventServiceProvider.php",
				"/home/jadavis/repos/bms-esign/resources/views/esigner/index.blade.php",
				"/home/jadavis/repos/bms-esign/vendor/laravel/framework/src/Illuminate/Events/Dispatcher.php",
				"/home/jadavis/repos/bms-esign/vendor/laravel/framework/src/Illuminate/Support/ServiceProvider.php",
				"/home/jadavis/repos/bms-esign/vendor/laravel/framework/src/Illuminate/Contracts/Queue/ShouldBeQueued.php",
				"/home/jadavis/repos/bms-esign/app/Listeners/Events/CreateDocumentImages.php",
				"/home/jadavis/repos/github-prod-keys/bms_env_files/env.qual.txt",
				"/home/jadavis/repos/github-prod-keys/bms_env_files/env.prod.txt",
				"/home/jadavis/repos/github-prod-keys/remote_mgmt/bin/build_lite_db.py",
				"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite/src/Http/Controllers/PropertyController.php",
				"/home/jadavis/repos/bms2-sandlot/app/Events/VendorRequestedPdfPush.php",
				"/home/jadavis/repos/bms2-sandlot/app/Listeners/Events/QueuedListener.php",
				"/home/jadavis/repos/bms2-sandlot/app/Listeners/Events/PushPdfToVendor.php",
				"/home/jadavis/repos/bms2-sandlot/app/Http/Controllers/EventController.php",
				"/home/jadavis/repos/bms2-sandlot/app/Http/Middleware/VerifyCsrfToken.php",
				"/home/jadavis/repos/bms2-sandlot/app/Http/routes.php"
			],
			"find":
			{
				"height": 39.0
			},
			"find_in_files":
			{
				"height": 158.0,
				"where_history":
				[
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/config",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/packages/leaseprogram/esign",
					"/home/jadavis/repos/bms2-sandlot/packages/leaseprogram/on-the-spot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms-esign/public/js/app",
					"/home/jadavis/repos/bms-esign/public",
					"/home/jadavis/repos/bms-esign,-*.js,,-*.log",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/resources/views/portal",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/resources",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/resources",
					"/home/jadavis/repos/bms-esign/public/js",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/resources/views/email",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/resources/views/email",
					"/home/jadavis/repos/bms-esign/resources/views",
					"/home/jadavis/repos/bms-esign/vendor",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/app",
					"/home/jadavis/repos/bms-esign/app/Services",
					"/home/jadavis/repos/bms-esign/app",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/config",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign,-*.log",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign-compare",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign-compare",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/app/Http/Controllers",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/resources",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/app",
					"/home/jadavis/repos/bms-esign,-*.log",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite,-*.css",
					"/home/jadavis/repos/bms2-sandlot/packages,-*.css",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot,-*.log",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot,-*.json",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite",
					"/home/jadavis/repos/bms2-sandlot,-*.json",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/app/Services",
					"/home/jadavis/repos/bms2-sandlot/app/Repositories",
					"/home/jadavis/repos/bms2-sandlot/packages/leaseprogram",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot/app/Providers",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite/src/Http/Controllers",
					"/home/jadavis/repos/bms2-sandlot/packages/myibase",
					"/home/jadavis/repos/bms2-sandlot/packages/mydbdriver",
					"/home/jadavis/repos/bms2-sandlot,-*.json",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon",
					"/home/jadavis/repos/bms2-sandlot/packages,-*.js",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite",
					"/home/jadavis/repos/bms2-sandlot/config",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/vendor",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/app/Services",
					"/home/jadavis/repos/bms2-sandlot/app/Repositories",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon,-*.js",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot-compare/packages",
					"/home/jadavis/repos/bms2-sandlot-compare/app",
					"/home/jadavis/repos/bms2-sandlot/packages/myibase",
					"/home/jadavis/repos/bms2-sandlot/packages/mydbdriver",
					"/home/jadavis/repos/bms2-sandlot/packages,-*.js",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/,-*.js",
					"/home/jadavis/repos/bms2-sandlot/-*.js",
					"/home/jadavis/repos/bms2-sandlot/packages,-*.js",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot/packages/myibase",
					"/home/jadavis/repos/bms2-sandlot/",
					"/home/jadavis/repos/bms2-sandlot/packages/mydbdriver",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot/vendor/laravel/framework/src/Illuminate/Database",
					"/home/jadavis/repos/bms2-sandlot/packages,-*.js",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot/packages/mydbdriver",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot/packages/myibase",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite/resources",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite/resources/views/user",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite/resources",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/public/js",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite/resources",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite/resources/views/user"
				]
			},
			"find_state":
			{
				"case_sensitive": true,
				"find_history":
				[
					"getAssociaiton",
					"SESSION_DB",
					"eSignerInfo",
					"eSignerInfo.NAME",
					"parent.getData",
					"UserProvider",
					"loginPath",
					"signature",
					"signature-undo",
					"undo",
					"src",
					"usesESign2",
					"GAA",
					"indicatorLabel",
					"CHECK ONE",
					"\"CHECK ONE\"",
					"v=",
					"put/signature",
					"ng-click",
					"function sign",
					"DocumentWasExecuted",
					"DocumentWasSigned",
					"sendSignatureRequests",
					"GAA",
					"generateDocument",
					"generateDocume nt",
					"class=\"btn\"",
					"signature",
					"sendExecutedEmail",
					"Congratulations.  The {{ $productDocuments }} received final approval and have been executed.  The starting date of your lease @if ($renewal) renewal @endif is {{ $leaseStartDate }}.",
					"sales",
					"execute",
					"Execute",
					"img",
					"src",
					"style",
					"PHP-parser",
					"\\Log::debug(__METHOD__ . \":\"",
					"\\Log",
					"DB_PASSWORD_DEV",
					"DB_USERNAME_DEV",
					"DB_DATABASE_DEV",
					"DB_HOST_DEV",
					"memory_limit",
					"saveSignatureInitials",
					"throw",
					"No PDF Found for",
					"md5",
					"saveSignatureInitials",
					"cacheKeys",
					"mysql_dev_bm2",
					"DocumentImagesWereCreated",
					"may only be viewed",
					"The executed Lease Contract Documents",
					"saveSignatureInitials",
					"geteSign",
					"signField",
					"checkUnsignedFields",
					"saveFieldInHistory",
					"signField",
					"saveFieldInHistory",
					"formthumbnail",
					"drawPDF",
					"PDFbuffer",
					"SoapClient",
					"Fetching",
					"pdfViewer",
					"angular-pdfjs",
					"PDFJS",
					"PDF.js",
					"pdf.js",
					"dictionary",
					"esign/index.php",
					"EsigncacheStore",
					"forgetExpired",
					"CreateDocumentImages",
					"CreateDocumentImagesListener",
					"EmailInitialNotice",
					"Event::fire",
					"ESignerHistoryObserver",
					"s3",
					"technote",
					"app->bind",
					"combineAttributes",
					"blumoonformsdev",
					"spinner",
					"privilegeStatus",
					"aptUnits",
					"Product",
					"You have reached an area",
					"PWDRESET",
					"here we is",
					"\\App\\Models\\User",
					"leaseprogram",
					"bcrypt",
					"getValidationFactory",
					"function validate",
					"officedev",
					"PWDRESET",
					"NoteCategory",
					"START Zend",
					"PWDRESET",
					"HEAD",
					"PortfolioService",
					"Porfolio",
					"technotes.ibase",
					"tech",
					"strtolower",
					"ibasetechnote",
					"env",
					"getTechnotes",
					"technote",
					"getIbaseModelBySerialNumber",
					"portfolioField",
					"PortfolioField",
					"updatedAt",
					"tech",
					"dateMade",
					"propertyCount",
					"legacy",
					"Config::get",
					"config::get",
					"\"PWDRESET\"",
					"CRYPT_METHOD",
					"User",
					"token",
					"Token",
					"user"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
					"complete",
					"Complete",
					"DB_MYSQL_APP_PASSWORD",
					"DB_MYSQL_APP_USERNAME",
					"DB_MYSQL_DEV_DATABASE",
					"DB_MYSQL_DEV_HOST",
					"TechnoteCategory",
					"lcfirst",
					"technote",
					"Technote",
					"$this->defaultTokenType",
					"tokenType",
					"TokenType",
					"token",
					"Token",
					");",
					"cache.duration",
					"$cacheKeyName",
					"private $",
					"private ",
					"$connection",
					"permissionsTable",
					"Permission",
					"permission",
					"Permission",
					"savePermissionForm",
					"save-permission-form",
					"Service",
					"service",
					"Service",
					"service",
					"App\\Http\\Controllers",
					"App\\Controller",
					"clickReportService",
					"ClickReport",
					"clickOrder",
					"ClickOrder",
					"Billing",
					"report",
					"Report",
					"user",
					"User",
					"user",
					"Jad <jad@bluemoonforms.com>",
					"public function",
					"bluemoon_lite",
					"Billing",
					"Settings",
					"dummy",
					"",
					"dboffice3",
					"Reports",
					"reports",
					"Reports",
					"reports",
					"Reports",
					"billing",
					"save",
					"get",
					"unitSurveyRepos",
					"DbUnitSurveyRepository",
					"unitSurveyProperty",
					"UnitSurveyProperty",
					"officeService",
					"OfficeService",
					"lookupId",
					"ffiliate",
					"Affiliate",
					"affiliate",
					"Affiliate",
					"Portfolio",
					"El Paso",
					"lookupName",
					"affiliate",
					"Affiliate",
					"portfolio",
					"Portfolio",
					"portfolio",
					"Portfolio",
					"ortfolio",
					"ortfolioForm",
					"PortfolioField",
					"portfolioField",
					"portfolioId",
					"portfolio",
					"Portfolio",
					"PortfolioForm",
					"portfolioForm",
					"portfolioField",
					"PortfolioField",
					"formName",
					"PortfolioForm",
					"PortfolioField",
					"portfolio",
					"Portfolio",
					"PortfolioForm",
					"remember",
					"portfolio",
					"Portfolio",
					"portfolio",
					"Portfolio",
					"member",
					"Member",
					"Account",
					"account",
					"Account",
					"propertyNumber",
					"App",
					"tenant",
					"Tenant",
					"jobKey",
					"",
					",",
					"eSignServiceMock",
					",\\n",
					"\\n",
					"Pending",
					"status",
					"__METHOD__ .",
					"{{ $productDocuments }}",
					"DocumentImagesWereCreated",
					"DocumentWasExecuted",
					"DocumentWasCreated",
					"DocumentWasSigned",
					"Log::debug",
					"MailService",
					", $1",
					"IEDocumentRepository"
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"incremental_find":
			{
				"height": 39.0
			},
			"input":
			{
				"height": 39.0
			},
			"menu_visible": true,
			"output.exec":
			{
				"height": 168.0
			},
			"output.find_results":
			{
				"height": 0.0
			},
			"pinned_build_system": "Packages/User/builds/psr2.sublime-build",
			"replace":
			{
				"height": 72.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"",
						"app/Services/PortfolioService.php"
					],
					[
						"mailser",
						"app/Services/MailService.php"
					],
					[
						"composer.",
						"composer.json"
					],
					[
						"portservi",
						"app/Services/PortfolioService.php"
					],
					[
						"propertyrepos",
						"app/Repositories/DbPropertyRepository.php"
					],
					[
						"rentalappservice",
						"packages/leaseprogram/settings/src/Services/RentalAppService.php"
					],
					[
						"cache",
						"config/cache.php"
					],
					[
						".env",
						".env"
					],
					[
						"confisessio",
						"config/session.php"
					],
					[
						"configdata",
						"config/database.php"
					],
					[
						"php",
						"phpunit.xml"
					],
					[
						"userserv",
						"packages/bluemoon/user/src/Providers/UserServiceProvider.php"
					],
					[
						"userserp",
						"packages/bluemoon/user/src/Providers/UserServiceProvider.php"
					],
					[
						"phpuni",
						"phpunit.xml"
					],
					[
						"composer",
						"composer.json"
					],
					[
						"userservpr",
						"packages/bluemoon/user/src/Providers/UserServiceProvider.php"
					],
					[
						"userservprovi",
						"packages/bluemoon/user/src/Providers/UserServiceProvider.php"
					],
					[
						"c",
						"composer.json"
					],
					[
						"packdmscompose",
						"packages/bluemoon/formdesigner/composer.json"
					],
					[
						"portservice",
						"app/Services/PortfolioService.php"
					],
					[
						"dbaccoun",
						"app/Repositories/DbAccountRepository.php"
					],
					[
						"onth",
						"packages/leaseprogram/on-the-spot/src/Services/OnTheSpotService.php"
					],
					[
						"cache.php",
						"config/cache.php"
					],
					[
						"configsession",
						"config/session.php"
					],
					[
						"config/ca",
						"config/cache.php"
					],
					[
						"database",
						"config/database.php"
					],
					[
						"gaur",
						"app/Auth/Guard.php"
					],
					[
						"api",
						"app/Services/ApiService.php"
					],
					[
						"authcont",
						"app/Http/Controllers/Auth/AuthController.php"
					],
					[
						"apiservice",
						"app/Services/ApiService.php"
					],
					[
						"settingcon",
						"packages/bluemoon/officesuite/src/Http/Controllers/SettingsController.php"
					],
					[
						"routes",
						"app/Http/routes.php"
					],
					[
						"composer.json",
						"composer.json"
					],
					[
						"venmessacompoer",
						"vendor/bluemoonforms/messagingservice/composer.json"
					],
					[
						"emailini",
						"app/Listeners/Events/EmailInitialNotice.php"
					],
					[
						"dbedo",
						"app/Libraries/Repositories/DbEDocumentRepository.php"
					],
					[
						"product",
						"app/Models/Product.php"
					],
					[
						"/",
						"app/Listeners/Events/EmailInitialNotice.php"
					],
					[
						"esign",
						"app/Services/ESignatureService.php"
					],
					[
						"esignser",
						"app/Services/ESignatureService.php"
					],
					[
						"eventserpor",
						"app/Providers/EventServiceProvider.php"
					],
					[
						"dbesign",
						"app/Libraries/Repositories/DbESignerRepository.php"
					],
					[
						"e",
						"app/Services/ESignatureService.php"
					],
					[
						"customer",
						"app/Models/Customer.php"
					],
					[
						"edocrepo",
						"app/Libraries/Repositories/DbEDocumentRepository.php"
					],
					[
						"mailservic",
						"app/Services/MailService.php"
					],
					[
						"edocumentre",
						"app/Libraries/Repositories/DbEDocumentRepository.php"
					],
					[
						"work",
						"app/Http/Controllers/WorkflowController.php"
					],
					[
						"rout",
						"app/Http/routes.php"
					],
					[
						"disclosure.js",
						"public/js/app/disclosure.js"
					],
					[
						"documentrepo",
						"app/Libraries/Repositories/DbEDocumentRepository.php"
					],
					[
						"esigner.php",
						"app/Models/ESigner.php"
					],
					[
						"esi",
						"app/Services/ESignatureService.php"
					],
					[
						"eventserpro",
						"app/Providers/EventServiceProvider.php"
					],
					[
						"edocu",
						"app/Models/EDocument.php"
					],
					[
						"approutes",
						"app/Http/routes.php"
					],
					[
						"mail",
						"app/Services/MailService.php"
					],
					[
						"checkre",
						"app/Listeners/Events/CheckReadyToExecute.php"
					],
					[
						"emailexe",
						"bms-esign/app/Listeners/Events/EmailExecutedNotice.php"
					],
					[
						"check",
						"bms-esign/app/Listeners/Events/CheckReadyToExecute.php"
					],
					[
						"mai",
						"bms-esign/app/Services/MailService.php"
					],
					[
						"config/database",
						"bms-esign/config/database.php"
					],
					[
						"obserserprovi",
						"bms-esign/app/Providers/ObserverServiceProvider.php"
					],
					[
						"eventcon",
						"bms-esign/app/Http/Controllers/EventController.php"
					],
					[
						"property",
						"bms-esign/app/Models/Property.php"
					],
					[
						"emailsignot",
						"bms-esign/app/Listeners/Events/EmailSignatureNotice.php"
					],
					[
						"eveserpr",
						"bms-esign/app/Providers/EventServiceProvider.php"
					],
					[
						"eventser",
						"bms-esign-compare/app/Providers/EventServiceProvider.php"
					],
					[
						"eventserverpro",
						"vendor/laravel/framework/src/Illuminate/Foundation/Support/Providers/EventServiceProvider.php"
					],
					[
						"mas",
						"resources/views/email/master.blade.php"
					],
					[
						"configdatab",
						"config/database.php"
					],
					[
						"illumifoundatapplication",
						"vendor/laravel/framework/src/Illuminate/Foundation/Application.php"
					],
					[
						"sign",
						"resources/views/email/sign.blade.php"
					],
					[
						"eventcontr",
						"app/Http/Controllers/EventController.php"
					],
					[
						"emailsign",
						"app/Listeners/Events/EmailSignatureNotice.php"
					],
					[
						"mailtest",
						"tests/bluemoon/esignature/services/MailServiceTest.php"
					],
					[
						"mailservi",
						"app/Services/MailService.php"
					],
					[
						"master",
						"resources/views/email/master.blade.php"
					],
					[
						"mailsertest",
						"tests/bluemoon/esignature/services/MailServiceTest.php"
					],
					[
						"mailserv",
						"app/Services/MailService.php"
					],
					[
						"owner",
						"resources/views/email/ownerComplete.blade.php"
					],
					[
						"execu",
						"resources/views/email/executed.blade.php"
					],
					[
						"mails",
						"app/Services/MailService.php"
					],
					[
						"mailsertes",
						"tests/bluemoon/esignature/services/MailServiceTest.php"
					],
					[
						"emasignblad",
						"resources/views/email/signature.blade.php"
					],
					[
						"even",
						"app/Providers/EventServiceProvider.php"
					],
					[
						"readto",
						"resources/views/email/readyToExecute.blade.php"
					],
					[
						"esigser",
						"app/Services/ESignatureService.php"
					],
					[
						"observer",
						"app/Providers/ObserverServiceProvider.php"
					],
					[
						"workflo",
						"app/Http/Controllers/WorkflowController.php"
					],
					[
						"eventserporvi",
						"app/Providers/EventServiceProvider.php"
					],
					[
						"d",
						"config/database.php"
					],
					[
						"debugexceptiohand",
						"vendor/symfony/debug/Symfony/Component/Debug/ExceptionHandler.php"
					],
					[
						"handler",
						"app/Exceptions/Handler.php"
					],
					[
						"response",
						"app/Providers/ResponseMacroServiceProvider.php"
					],
					[
						"config/app",
						"config/app.php"
					],
					[
						"servieprove",
						"app/Providers/AppServiceProvider.php"
					],
					[
						"configapp",
						"config/app.php"
					],
					[
						"event",
						"app/Providers/EventServiceProvider.php"
					],
					[
						"emailsino",
						"app/Listeners/Events/EmailSignatureNotice.php"
					],
					[
						"dbes",
						"app/Libraries/Repositories/DbESignerRepository.php"
					],
					[
						"eventcontroller",
						"app/Http/Controllers/EventController.php"
					],
					[
						"configdatabase",
						"config/database.php"
					],
					[
						"symfony/component/debug/exception/fatalerrorexception",
						"vendor/symfony/debug/Symfony/Component/Debug/Exception/FatalErrorException.php"
					],
					[
						"workf",
						"app/Http/Controllers/WorkflowController.php"
					],
					[
						"createdo",
						"bms-esign/app/Commands/CreateDocumentImages.php"
					],
					[
						"emailsi",
						"bms-esign-compare/app/Listeners/Events/EmailSignatureNotice.php"
					],
					[
						"emailsignno",
						"bms-esign/app/Listeners/Events/EmailSignatureNotice.php"
					],
					[
						"eventserv",
						"bms-esign-compare/app/Providers/EventServiceProvider.php"
					],
					[
						"configdatabas",
						"config/database.php"
					],
					[
						"disclosure.blad.php",
						"resources/views/disclosure.blade.php"
					],
					[
						"apphttkern",
						"app/Http/Kernel.php"
					],
					[
						"kernel",
						"app/Console/Kernel.php"
					],
					[
						"complete.js",
						"public/js/app/complete.js"
					],
					[
						"wor",
						"app/Http/Controllers/WorkflowController.php"
					],
					[
						"route",
						"app/Http/routes.php"
					],
					[
						"eventcr",
						"app/Http/Controllers/EventController.php"
					],
					[
						"esignservice",
						"app/Services/ESignatureService.php"
					],
					[
						"db",
						"app/Libraries/Repositories/DbEDocumentRepository.php"
					],
					[
						"esignservi",
						"app/Services/ESignatureService.php"
					],
					[
						"mobilecontr",
						"app/Http/Controllers/MobileController.php"
					],
					[
						"workflowcontroller.ph",
						"app/Http/Controllers/WorkflowController.php"
					],
					[
						"esigner",
						"app/Observers/ESignerObserver.php"
					],
					[
						"email",
						"app/Listeners/Events/EmailInitialNotice.php"
					],
					[
						"configesigature",
						"config/esignature.php"
					],
					[
						"dbesinerreposi",
						"app/Libraries/Repositories/DbESignerRepository.php"
					],
					[
						"confiesign",
						"config/esignature.php"
					],
					[
						"obserserprov",
						"app/Providers/ObserverServiceProvider.php"
					]
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 500.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 380.0
			},
			"select_symbol":
			{
				"height": 39.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"testgetsignerstoem",
						"testGetSignersToEmail"
					],
					[
						"testsethistory",
						"testSetHistory"
					],
					[
						"testgetdocument",
						"testGetDocument"
					],
					[
						"testisexe",
						"testIsExecutableDocument"
					],
					[
						"tested",
						"testEDocumentCreation"
					],
					[
						"isowner",
						"isOwner"
					],
					[
						"checkready",
						"CheckReadyToExecute"
					],
					[
						"documentwassi",
						"DocumentWasSigned"
					],
					[
						"report",
						"report"
					],
					[
						"savesin",
						"saveSignatureInitials"
					],
					[
						"getNextSigner",
						"testGetNextSigner"
					],
					[
						"ajax",
						"ajax"
					],
					[
						"savesi",
						"saveSignatureInitials"
					],
					[
						"savesignat",
						"saveSignatureInitials"
					],
					[
						"getdocu",
						"getDocument"
					],
					[
						"getdo",
						"getDocument"
					],
					[
						"testgetnex",
						"testGetNextSigner"
					],
					[
						"testgetnextsigner",
						"testGetNextSigner"
					],
					[
						"testsaveedoc",
						"testSaveEdocument"
					],
					[
						"testBuildformlayou",
						"testBuildFormLayoutForResident"
					],
					[
						"testsaveesign",
						"testSaveEsigner"
					],
					[
						"testsaveedo",
						"testSaveEdocument"
					],
					[
						"testgetforml",
						"testGetFormLayout"
					],
					[
						"getsignermodel",
						"testGetSignerModelById"
					],
					[
						"isexecuat",
						"testIsExecutableDocument"
					],
					[
						"esignercreat",
						"testESignerCreation"
					],
					[
						"testcustomercre",
						"testCustomerCreation"
					],
					[
						"setFormAtt",
						"setFormAttributes"
					],
					[
						"createTech",
						"createTechnote"
					],
					[
						"tomodel",
						"toModel"
					],
					[
						"getibasemodel",
						"getIbaseModelById"
					],
					[
						"transactions",
						"transactionSave"
					],
					[
						"newtechnote",
						"newTechnote"
					],
					[
						"tobu",
						"toBusinessObjects"
					],
					[
						"canresetpass",
						"CanResetPasswordContract"
					],
					[
						"testsave",
						"testSave"
					],
					[
						"getbypor",
						"getByPortfolio"
					],
					[
						"PerformIn",
						"performInsert"
					],
					[
						"syncmodel",
						"syncModelPks"
					],
					[
						"finishSave",
						"finishSave"
					],
					[
						"create",
						"create"
					],
					[
						"getAttr",
						"getAttributes"
					],
					[
						"setAttributes",
						"setAttributes"
					],
					[
						"newBaseQuery",
						"newBaseQueryBuilder"
					],
					[
						"performinsert",
						"performInsert"
					],
					[
						"increment",
						"incrementGeneratorId"
					],
					[
						"insertgetid",
						"insertGetId"
					],
					[
						"insertand",
						"insertAndSetId"
					],
					[
						"insertGetId",
						"insertGetId"
					],
					[
						"statement",
						"statement"
					],
					[
						"compileinsert",
						"compileInsert"
					],
					[
						"compileinsertgetid",
						"compileInsertGetId"
					],
					[
						"insertandsetid",
						"insertAndSetId"
					],
					[
						"createPortfolio",
						"createPortfolio"
					],
					[
						"getPermissions",
						"getPermissions"
					],
					[
						"getModelType",
						"getModelType"
					],
					[
						"getdatabydate",
						"getDataByDateRange"
					],
					[
						"getDataBy",
						"getDataByDateRange"
					],
					[
						"generateclick",
						"generateClickOrderReport"
					],
					[
						"testgetibase",
						"testGetIbaseById"
					],
					[
						"testUnitgetby",
						"testUnitGetById"
					],
					[
						"testGenerateClic",
						"testGenerateClickOrderReport"
					],
					[
						"testSearch",
						"testSearch"
					],
					[
						"search",
						"search"
					],
					[
						"testgetibasebyID",
						"testGetIbaseById"
					],
					[
						"testsearcoun",
						"testSearchCount"
					],
					[
						"translatesearcht",
						"translateSearchTags"
					],
					[
						"testgetibasebyid",
						"testGetIbaseById"
					],
					[
						"getibasebyid",
						"getIbaseById"
					],
					[
						"getById",
						"getById"
					],
					[
						"dbaccountrepotes",
						"DbAccountRepositoryTests"
					],
					[
						"testgetbymonth",
						"testGetByMonth"
					],
					[
						"dbunitrepos",
						"testDbUnitSurveyRepositoryCreation"
					],
					[
						"dbprop",
						"DbPropertyRepositoryTests"
					],
					[
						"getibase",
						"getIbaseById"
					],
					[
						"testgetassi",
						"testGetAssociations"
					],
					[
						"testgetass",
						"testGetAssociations"
					],
					[
						"configurehand",
						"configureHandlers"
					],
					[
						"welcom",
						"WelcomeController"
					],
					[
						"billingcon",
						"BillingController"
					],
					[
						"getaccount",
						"getAccount"
					],
					[
						"testPor",
						"testPortfolioCreation"
					],
					[
						"testGetProperty",
						"testGetProperty"
					],
					[
						"PortfolioServiceTest",
						"PortfolioServiceTest"
					],
					[
						"saveProperty",
						"saveProperty"
					],
					[
						"getmodelbyid",
						"getModelById"
					],
					[
						"ibaseaffiliate",
						"IbaseAffiliate"
					],
					[
						"Iaccount",
						"IAccountRepository"
					],
					[
						"IAccount",
						"IAccountRepository"
					],
					[
						"testaccoutnmem",
						"testAccountMember"
					],
					[
						"newBas",
						"newBaseQueryBuilder"
					],
					[
						"saves",
						"saveSignatureInitials"
					],
					[
						"save",
						"SaveOwnerSignature"
					],
					[
						"savesig",
						"saveSignatureInitials"
					],
					[
						"savesiini",
						"saveSignatureInitials"
					],
					[
						"createdocumentimages",
						"CreateDocumentImages"
					],
					[
						"gettenant",
						"getLeaseTenants"
					],
					[
						"emailexe",
						"EmailExecutedNotice"
					],
					[
						"testgetemail",
						"testGetEmailDictionaryResident"
					],
					[
						"mailsertest",
						"MailServiceTest"
					],
					[
						"testGetEmail",
						"testGetEmailDictionaryResident"
					],
					[
						"sendex",
						"sendExecutedEmail"
					],
					[
						"docwasex",
						"DocumentWasExecuted"
					],
					[
						"docuwase",
						"DocumentWasExecuted"
					],
					[
						"doecwasex",
						"DocumentWasExecuted"
					],
					[
						"configurel",
						"ConfigureLogging"
					],
					[
						"saveowne",
						"SaveOwnerSignature"
					],
					[
						"saveo",
						"SaveOwnerSignature"
					],
					[
						"emailsig",
						"EmailSignatureNotice"
					],
					[
						"sendsig",
						"sendSignatureEmail"
					],
					[
						"documentwasSi",
						"DocumentWasSigned"
					],
					[
						"useDailyFiles",
						"useDailyFiles"
					],
					[
						"sendSign",
						"sendSignatureEmail"
					],
					[
						"edocumentob",
						"EDocumentObserver"
					],
					[
						"testgetsignermod",
						"testGetSignerModelByObject"
					],
					[
						"getDocument",
						"getDocument"
					],
					[
						"isexecu",
						"isExecutable"
					],
					[
						"getemail",
						"getEmailDictionary"
					],
					[
						"createDocumentMock",
						"createDocumentMock"
					],
					[
						"testgetsigtoemai",
						"testGetSignersToEmail"
					],
					[
						"createdocmomock",
						"createDocumentModelMock"
					],
					[
						"getemaild",
						"getEmailDictionary"
					],
					[
						"getemdicre",
						"testGetEmailDictionaryResident"
					],
					[
						"testGetEamil",
						"testGetEmailDictionaryResident"
					],
					[
						"getEmail",
						"getEmailDictionary"
					],
					[
						"sendsu",
						"sendSubmittedEmail"
					],
					[
						"testsendsigemail",
						"testSendSignatureEmail"
					],
					[
						"testsensig",
						"testSendSignatureEmail"
					]
				],
				"width": 795.0
			},
			"show_minimap": false,
			"show_open_files": false,
			"show_tabs": false,
			"side_bar_visible": true,
			"side_bar_width": 275.0,
			"status_bar_visible": true,
			"template_settings":
			{
			}
		},
		"new_window_width": 0.0
	},
	"windows":
	[
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"test_",
						"test_on_the_spot\t(esign.php)"
					],
					[
						"RECORD",
						"RECORD_RENTAL_APP_TO_LOG"
					],
					[
						"Dis",
						"DisclosureAgreed"
					],
					[
						"Di",
						"DisclosureAgreed"
					],
					[
						"ListE",
						"ListEsignaturesExpanded"
					],
					[
						"proper",
						"property_numbers"
					],
					[
						"readre",
						"readresidents"
					],
					[
						"error_l",
						"error_log(__LINE__"
					],
					[
						"_para",
						"_paramsFromStack"
					],
					[
						"Pa",
						"PasswordBroker"
					],
					[
						"Por",
						"PortfolioService"
					],
					[
						"Bus",
						"BusinessObject"
					],
					[
						"P",
						"PortfolioService\t(UserService.php)"
					],
					[
						"App",
						"App\\BusinessObject"
					],
					[
						"Bu",
						"BusinessObject"
					],
					[
						"asse",
						"assertEquals($result"
					],
					[
						"is_",
						"is_array"
					],
					[
						"client_type",
						"client_type_email_id"
					],
					[
						"parent",
						"parentAttributes"
					],
					[
						"Clien",
						"ClientTypeEmail"
					],
					[
						"retri",
						"retrieveBmsByCredentials"
					],
					[
						"jad",
						"jad@bluemoonforms.com"
					],
					[
						"ini",
						"initiateEsignature\t(RentalApplicationApiService.php)"
					],
					[
						"owner",
						"ownerRep"
					],
					[
						"application",
						"applicationId\t(RentalApplicationApiService.php)"
					],
					[
						"appl",
						"applicationId"
					],
					[
						"accept",
						"acceptPadSignature\t(esignature.blade.php)"
					],
					[
						"second",
						"secondaryPhoneType\t(RentalApplicationServiceTest.php)"
					],
					[
						"pre",
						"preg_replace"
					],
					[
						"trans",
						"translateToXml"
					],
					[
						"in",
						"invokeArgs"
					],
					[
						"inii",
						"initializeApiClient"
					],
					[
						"init",
						"initializeApiClient"
					],
					[
						"RentalP",
						"RentalApplicationService\t(RentalApplicationService.php)"
					],
					[
						"initi",
						"initializeClient\t(RentalApplicationApiService.php)"
					],
					[
						"cre",
						"createClient"
					],
					[
						"field",
						"fieldObjects"
					],
					[
						"f",
						"foreach\tforeach …"
					],
					[
						"tran",
						"translateFields\t(RentalApplicationService.php)"
					],
					[
						"CURRENT",
						"CURRENT-EMAIL\t(RentalApplicationService.php)"
					],
					[
						"process",
						"processing\t(PushToVendor.php)"
					],
					[
						"porcess",
						"processApplicationData"
					],
					[
						"is",
						"is_array\t(UserService.php)"
					],
					[
						"Create",
						"CreateSessionResult"
					],
					[
						"arra",
						"array_key_exists\t(RentalApplicationService.php)"
					],
					[
						"re",
						"rentalapp"
					],
					[
						"lease",
						"leaseprogram"
					],
					[
						"maskedCard",
						"maskedCardValue"
					],
					[
						"ccT",
						"creditCards"
					],
					[
						"maskedCar",
						"maskedCard"
					],
					[
						"create",
						"createApplicationService"
					],
					[
						"ch",
						"checked"
					],
					[
						"Legal",
						"legalHistoryOptions"
					],
					[
						"his",
						"historyIx"
					],
					[
						"legal",
						"legalHistoryOptions"
					],
					[
						"end",
						"endforeach"
					],
					[
						"base",
						"base64_decode"
					],
					[
						"Inte",
						"Integrations\t(IntegrationsServiceProvider.php)"
					],
					[
						"icon-p",
						"icon-program-library.png\t(sidenav.blade.php)"
					],
					[
						"Lib",
						"Library\t(Library.php)"
					],
					[
						"translate",
						"translateColumnsToAttributes\t(DbUserRepositoryTest.php)"
					],
					[
						"noM",
						"noManageEditor\t(DbUserRepositoryTest.php)"
					],
					[
						"user",
						"userId"
					],
					[
						"createUser",
						"createUserService"
					],
					[
						"boole",
						"booleanFields"
					],
					[
						"reco",
						"recordToLog\t(LogsToFile.php)"
					],
					[
						"PRI",
						"PRIMARY_KEY1"
					],
					[
						"pri",
						"privilege\t(DbUserRepository.php)"
					],
					[
						"getP",
						"getPrivilegeLabels"
					],
					[
						"getPri",
						"getPrivilegeLabels\t(DbUserRepository.php)"
					],
					[
						"set",
						"settingsService"
					],
					[
						"Primar",
						"PRIMARY_KEY1"
					],
					[
						"Sup",
						"SupervisorService\t(SupervisorController.php)"
					],
					[
						"Supr",
						"SupervisorService\t(SupervisorService.php)"
					],
					[
						"super",
						"supervisorService"
					],
					[
						"getA",
						"getAllProcessInfo"
					],
					[
						"Supervis",
						"SupervisorService\t(SupervisorService.php)"
					],
					[
						"Super",
						"SupervisorController\t(SupervisorController.php)"
					],
					[
						"add",
						"addresses"
					],
					[
						"normal",
						"normalize_line_breaks"
					],
					[
						"R",
						"Report"
					],
					[
						"Offic",
						"OfficeService"
					],
					[
						"Offi",
						"OfficeSuite"
					],
					[
						"Techno",
						"TechnoteSource\t(AppServiceProvider.php)"
					],
					[
						"orig",
						"origAttributes"
					],
					[
						"num",
						"numberOfUnits"
					],
					[
						"prop",
						"property_exists"
					],
					[
						"syncProperty",
						"syncPropertyNumberOfUnits\t(PortfolioService.php)"
					],
					[
						"sy",
						"syncArray"
					],
					[
						"number",
						"numberOfUnits\t(DbPropertyRepository.php)"
					],
					[
						"privi",
						"privilegeLabels"
					],
					[
						"array_",
						"array_key_exists\t(CustomUserProvider.php)"
					],
					[
						"por",
						"portfolioDataForAssociation"
					],
					[
						"comp",
						"comparePropertyAttributes"
					],
					[
						"portfo",
						"portfolioService"
					],
					[
						"sync",
						"syncPropertyAttributes\t(DbPropertyRepository.php)"
					],
					[
						"getUsers",
						"getUsersByAccount\t(UserSettingsController.php)"
					],
					[
						"formsOn",
						"formsOnlineUserRepos"
					],
					[
						"technote",
						"technoteRepos"
					],
					[
						"modelTyp",
						"modelTypeAttribute"
					],
					[
						"getMod",
						"getModelByRealId"
					],
					[
						"technoteAtta",
						"TechnoteAttachment"
					],
					[
						"tech",
						"technoteCategory\t(DbTechnoteRepository.php)"
					],
					[
						"getAtt",
						"getAttributes\t(PropertyService.php)"
					],
					[
						"techno",
						"technoteSource"
					],
					[
						"cat",
						"categoryId"
					],
					[
						"getCate",
						"getCategoryByLabel"
					],
					[
						"to",
						"toBusinessObject"
					],
					[
						"getCat",
						"getCategoryModelByLabel"
					],
					[
						"note",
						"noteCategory"
					],
					[
						"Commu",
						"CommunicationsController"
					],
					[
						"place",
						"placeholder\tAttr"
					],
					[
						"getTe",
						"getTechnotesBySerialNumber\t(OfficeService.php)"
					],
					[
						"toB",
						"toBusinessObject($this"
					],
					[
						"array_key",
						"array_key_exists"
					],
					[
						"buiness",
						"businessObject"
					],
					[
						"bui",
						"businessObject"
					],
					[
						"business",
						"businessObject"
					],
					[
						"ibaseTech",
						"ibaseTechnoteClass"
					],
					[
						"clien",
						"clientTypeEmailId"
					],
					[
						"clientT",
						"clientTypeEmailId"
					],
					[
						"getModel",
						"getModelBySerialNumber"
					],
					[
						"getI",
						"getIbaseModelBySerialNumber($serialNumber"
					],
					[
						"fun",
						"fun\tfunction …"
					],
					[
						"client",
						"clientTypeId"
					],
					[
						"Bluemoon",
						"Bluemoon\\User\\Models\\Token\t(TokenType.php)"
					],
					[
						"userMdoel",
						"userModelbyToken"
					],
					[
						"assne",
						"assertGreaterThan\t(DbAccountRepositoryTest.php)"
					]
				]
			},
			"buffers":
			[
				{
					"contents": "; <? die() ?> This will not be sent to browser\n; db.ini.php contains database connection variables\n\n[ibase]\ndsn = \"db-office-dev.bluemoonforms.com:/db/OFFICEDEV.GDB\"\nuser = OFFICE\npassword = 1957huitlacoche\nprimary = yes\n",
					"file": "bluemoon-production/database/dev/office/db.ini.php",
					"file_size": 229,
					"file_write_time": 131453793532210557,
					"settings":
					{
						"buffer_size": 221,
						"line_ending": "Windows"
					}
				},
				{
					"file": "bluemoon-production/html/products/forms_online/import_xml.php",
					"settings":
					{
						"buffer_size": 28190,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bluemoon-production/lib/User/class.FormsOnlineUser.php",
					"settings":
					{
						"buffer_size": 12575,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bluemoon-production/lib/Sql/class.SqlFormsOnlineUser.php",
					"settings":
					{
						"buffer_size": 4143,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "<?php\n/**\n * Base class for site license-specific web database SOAP services\n */\nuse Bluemoon\\Core\\User\\UserFactory;\n\nabstract class SOAP_Product extends SOAP_Web {\n  // Class properties\n\n  protected $new_db_schema = true;\n  protected $trans_dbh = null;\n\n  protected $last_print_transaction = null;\n\n  protected $customer_data = array();\n  protected $document_management_services = array();\n  protected $required_fields = array();\n  protected $user_data = array();\n\n  // Class methods\n\n  public function __wakeup() {\n    $this->dbh = new services();  // Instantiate database object\n\n    $this->dbh->set_SOAP_service(true);\n  }\n\n  /**\n   * Authenticates Blue Moon user\n   *\n   * @param string $SerialNumber\n   * @param string $UserId\n   * @param string $Password\n   * @return boolean\n   */\n  public function AuthenticateUser($SerialNumber, $UserId, $Password) {\n    $this->TestAuthenticationFields($SerialNumber, $UserId, $Password);\n\n    $userManager = new Bluemoon\\Core\\User\\UserManager();\n\n    if ($user = UserFactory::get(UserFactory::USER_LICENSE_USERID, $SerialNumber, $UserId)) {\n      // Test whether login authentication is successful\n      if ($userManager->authenticateUser($user, $Password)) {\n        if ($result = $this->dbh->get_user_data($SerialNumber, $UserId)) {\n          $user_data = $result;\n\n          if ($result = $this->dbh->get_customer_data($user_data[\"SERIALNUMBER\"])) {\n            $customer_data = $result;\n\n            if ($license_active = $customer_data[\"NOTACTIVE\"] !== \"T\") {\n              if ($license_active = $this->TestExpirationDate($customer_data[\"RENEWALDATE\"])) {\n                if ($customer_data[\"UNITBASEDBILLING\"] === \"T\") {\n                  $license_active = $this->TestPaymentDue($customer_data[\"PAYMENTDUEDATE\"], $customer_data[\"PAYMENTDUE\"]);\n                }\n              }\n            }\n\n            return $license_active;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Closes session\n   *\n   * @param string $SessionId\n   * @return boolean\n   */\n  public function CloseSession($SessionId) {\n    if ($valid_session = (string) $SessionId !== \"\") {\n      $this->SuspendParentSession();\n\n      $sess_handle = new session($this->sess_name, $SessionId);\n\n      if ($result = $this->dbh->get_user_data($_SESSION[\"serialnum\"], $_SESSION[\"userid\"])) {\n        $this->user_data = $result;\n      }\n\n      if ($valid_session = !empty($this->user_data)) {\n        $result = $this->KillSession();\n      }\n\n      $this->ResumeParentSession();\n    }\n\n    if ($valid_session) {\n      return $result;\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * Creates new session\n   *\n   * @param string $SerialNumber\n   * @param string $UserId\n   * @param string $Password\n   * @return string\n   */\n  public function CreateSession($SerialNumber, $UserId = null, $Password = null) {\n    $this->TestAuthenticationFields($SerialNumber, $UserId, $Password);\n\n    if ($this->service_invoked_local && (string) $Password === \"\") {\n      if ((string) $UserId === \"\") {\n        if ($result = $this->dbh->get_login_data($SerialNumber)) {\n          $login_data = $result;\n\n          $UserId = $login_data[\"USERID\"];\n        }\n        else {\n          throw new SoapFault(\"Sender\", \"No user records found matching SerialNumber.\");\n        }\n      }\n    }\n    else {\n      $authenticated = false;\n\n      $userManager = new Bluemoon\\Core\\User\\UserManager();\n\n      if ($user = UserFactory::get(UserFactory::USER_LICENSE_USERID, $SerialNumber, $UserId)) {\n        // Test whether login authentication is successful\n        if (!$authenticated = $userManager->authenticateUser($user, $Password)) {\n          if ($user->getFailedLogins() >= Bluemoon\\Core\\User\\UserManager::MAX_FAILED_LOGINS) {\n            throw new SoapFault(\"Sender\", \"Due to \" . Bluemoon\\Core\\User\\UserManager::MAX_FAILED_LOGINS . \" failed login attempts, user account has been temporarily locked.\");\n          }\n        }\n      }\n\n      if (!$authenticated) {\n        throw new SoapFault(\"Sender\", \"User authentication failed.\");\n      }\n    }\n\n    if ($result = $this->dbh->get_user_data($SerialNumber, $UserId)) {\n      $user_data = $result;\n\n      if ($result = $this->dbh->get_customer_data($user_data[\"SERIALNUMBER\"])) {\n        $this->customer_data = $result;\n\n        if ($this->customer_data[\"NOTACTIVE\"] !== \"T\") {\n          if ($this->TestExpirationDate($this->customer_data[\"RENEWALDATE\"])) {\n            if ($unit_based_billing = $this->customer_data[\"UNITBASEDBILLING\"] === \"T\") {\n              if (!$this->TestPaymentDue($this->customer_data[\"PAYMENTDUEDATE\"], $this->customer_data[\"PAYMENTDUE\"])) {\n                throw new SoapFault(\"Sender\", \"License payment is past due.\");\n              }\n            }\n\n            require_once(BASE_DIR . \"cgi-bin/forms_online/date.php\");\n\n            $days_until_exp = calculate_days_to_target($this->customer_data[\"RENEWALDATE\"]);\n\n            if (abs($days_until_exp) <= 30) {\n              if ($this->customer_data[\"SOFTWARETYPE\"] == 3 && !$unit_based_billing) {\n                if ((string) $this->customer_data[\"MEMBERWARNINGSENT\"] === \"\") {\n                  $association_data = $this->dbh->get_association_data($this->customer_data[\"ASSOCIATION\"]);\n\n                  require_once(BASE_DIR . \"cgi-bin/forms_online/email.php\");\n\n                  if (send_membership_expiration_notification($user_data[\"SERIALNUMBER\"], $association_data[\"EMAIL\"], $this->customer_data[\"COMPANYNAME\"], $this->customer_data[\"RENEWALDATE\"], $this->customer_data[\"CITYSTZIP\"])) {\n                    $this->dbh->set_member_warning_sent($user_data[\"SERIALNUMBER\"]);\n                  }\n                }\n              }\n            }\n\n            if ($user_data[\"STATUS\"] === \"1\") {\n              $this->SuspendParentSession();\n\n              $sess_handle = new session($this->sess_name);\n\n              session_regenerate_id(true);\n\n              $_SESSION[\"new_db_schema\"] = $this->new_db_schema;\n\n              $_SESSION[\"serialnum\"] = $user_data[\"SERIALNUMBER\"];\n              $_SESSION[\"userid\"] = $user_data[\"USERID\"];\n\n              if (empty($this->customer_data[\"LICENSEACCEPTED\"])) {\n                if ($license_agreement_file_path = $this->GetFilePath(\"/products/forms_online/legal/*/index.html\", $this->customer_data[\"STATE\"], true, true)) {\n                  $text = \"View License Agreement\";\n                  $uri = \"https://\" . HTTP_HOST . $license_agreement_file_path;\n                  /**\n                   * Whenever we are ready to enforce acceptance of legal disclaimers,\n                   * we will create a unique token and assign its value to\n                   * $_SESSIONS[\"message_id\"]. The message ID would then be passed as\n                   * the optional third parameter in the AddServiceMessage() method,\n                   * which generates a SOAP header that is embedded within the response.\n                   *\n                   * If a message ID is returned, it must be included in the next SOAP\n                   * request for this session (also via a SOAP header) to indicate\n                   * client's acceptance.\n                   */\n                  // $this->AddServiceMessage($text, $uri);\n                }\n              }\n\n              $session_id = session_id();\n\n              $this->CommitSession();\n\n              $this->ResumeParentSession();\n\n              return $session_id;\n            }\n            else {\n              throw new SoapFault(\"Sender\", \"User account is inactive.\");\n            }\n          }\n          else {\n            throw new SoapFault(\"Sender\", \"License has expired.\");\n          }\n        }\n        else {\n          throw new SoapFault(\"Sender\", \"License has been deactivated.\");\n        }\n      }\n      else {\n        throw new SoapFault(\"Receiver\", \"Unable to retrieve customer information for new session.\");\n      }\n    }\n    else {\n      if ($this->service_invoked_local && !isset($login_data[\"USERID\"])) {\n        throw new SoapFault(\"Sender\", \"Invalid SerialNumber and UserId.\");\n      }\n      else {\n        throw new SoapFault(\"Recevier\", \"Unable to retrieve user information for new session.\");\n      }\n    }\n  }\n\n  /**\n   * Returns current forms counter\n   *\n   * @param string $SessionId\n   * @return mixed\n   */\n  public function GetFormsCounter($SessionId) {\n    if ($this->TestSessionId($SessionId)) {\n      if ($this->customer_data[\"UNITBASEDBILLING\"] !== \"T\") {\n        switch ($this->customer_data[\"STATE\"]) {\n          case \"AANC\":\n          case \"GAA\":\n            $forms_counter = (string) number_format($this->customer_data[\"COUNTER\"], 2);\n            break;\n          default:\n            $forms_counter = (int) $this->customer_data[\"COUNTER\"];\n            break;\n        }\n      }\n      else $forms_counter = null;\n\n      return $forms_counter;\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * Returns info for all properties contained by current license\n   *\n   * @param string $SessionId\n   * @return Property[]\n   */\n  public function ListProperties($SessionId) {\n    if ($this->TestSessionId($SessionId)) {\n      $properties = array();\n\n      if ($result = $this->dbh->get_properties($this->user_data[\"SERIALNUMBER\"])) {\n        $property_list = $result;\n\n        foreach ($property_list as $info) {\n          $properties[] = new Property($info[\"number\"], $info[\"name\"], $info[\"type\"]);\n        }\n      }\n\n      return $properties;\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  protected function GeneratePDF($PropertyId, $request_data, $esign = false, $sample = false, $LeaseId = null, $ApplicantId = null) {\n    require_once(BASE_DIR . \"cgi-bin/pdf.php\");\n\n    $esignature_fields = $GLOBALS[\"esignature_fields\"];\n\n    $pdf_permissions = array(\n      \"nomodify\",\n      \"noannots\"\n    );\n\n    $pdf_compatibility = DEFAULT_PDF_COMPATIBILITY;\n\n    $pdf_password = DEFAULT_PDF_PSWD;\n\n    if (!$esign) {\n      if ($this->TestVendorId()) {\n        if (is_numeric($this->vendor_settings[\"PDFCOMPATIBILITY\"])) {\n          $pdf_compatibility = $this->vendor_settings[\"PDFCOMPATIBILITY\"];\n        }\n\n        if (!$sample) {\n          if (isset($this->vendor_settings[\"PRINTKEY\"])) {\n            $pdf_password = $this->vendor_settings[\"PRINTKEY\"];\n          }\n        }\n      }\n      else {\n        if (isset($this->customer_data[\"VENDORID\"])) {\n          if ($vendor_info = $this->dbh->get_vendor_info($this->user_data[\"SERIALNUMBER\"])) {\n            $vendor_id = strtoupper($this->customer_data[\"VENDORID\"]);\n\n            if (is_numeric($vendor_info[$vendor_id][\"PDFCOMPATIBILITY\"])) {\n              $pdf_compatibility = $vendor_info[$vendor_id][\"PDFCOMPATIBILITY\"];\n            }\n\n            if (!$sample) {\n              if ($vendor_info[$vendor_id][\"PRINTKEY\"]) {\n                $pdf_password = $vendor_info[$vendor_id][\"PRINTKEY\"];\n              }\n            }\n          }\n        }\n      }\n    }\n\n    $multipart_field_pattern = \"/^(\\w+)__(\\d+)$/\";\n\n    $timestamp = time();\n\n    $unit_based_billing = $this->customer_data[\"UNITBASEDBILLING\"] === \"T\";\n\n    $clicks_remaining = (!$unit_based_billing ? $this->customer_data[\"COUNTER\"] : 0);\n\n    switch ($this->customer_data[\"STATE\"]) {\n      case \"TSSA\":\n        if ($sample) {\n          $batch_code_seg = \"SAMPLE\";\n        }\n        else {\n          $batch_code_seg = \"00\";\n\n          $counter_length = 4;\n          $counter_code = floor($clicks_remaining);\n\n          $batch_code_seg .= str_pad($counter_code, $counter_length, \"0\", STR_PAD_LEFT);\n\n          $license_exp_year = date(\"y\", strtotime($this->customer_data[\"RENEWALDATE\"]));\n\n          $batch_code_seg .= \"-\" . substr($license_exp_year, -1);\n\n          $member_code_length = 5;\n          $member_code = substr(str_pad($this->customer_data[\"MEMBER\"], $member_code_length, \"0\", STR_PAD_LEFT), 0, $member_code_length);\n          $member_code_offset = 3;\n\n          $batch_code_seg .= substr($member_code, 0, $member_code_offset) . \"-\" . substr($member_code, ($member_code_offset - $member_code_length));\n\n          $license_exp_month = date(\"m\", strtotime($this->customer_data[\"RENEWALDATE\"]));\n\n          $batch_code_seg .= $license_exp_month;\n\n          $current_month = date(\"m\", $timestamp);\n\n          $batch_code_seg .= \"-\" . $current_month;\n\n          $facility_code_length = 5;\n          $facility_code = substr(str_pad($this->customer_data[\"FACILITY\"], $facility_code_length, \"0\", STR_PAD_LEFT), 0, $facility_code_length);\n          $facility_code_offset = 2;\n\n          $batch_code_seg .= substr($facility_code, 0, $facility_code_offset) . \"-\" . substr($facility_code, ($facility_code_offset - $facility_code_length));\n\n          $current_year = date(\"y\", $timestamp);\n\n          $batch_code_seg .= substr($current_year, -1);\n\n          $current_day = date(\"d\", $timestamp);\n\n          $batch_code_seg .= $current_day;\n        }\n        break;\n      default:\n        if ($sample) {\n          $batch_code_seg = date(\"mdY\", $timestamp) . \"SAMPLE\";\n        }\n        else {\n          switch ($this->customer_data[\"STATE\"]) {\n            case \"AANC\":\n            case \"GAA\":\n              $counter_length = 5;\n              $counter_code = str_replace(\".\", \"\", $clicks_remaining);\n              break;\n            default:\n              $counter_length = 4;\n              $counter_code = floor($clicks_remaining);\n              break;\n          }\n\n          $batch_code_seg = date(\"mdY\", $timestamp) . str_pad($counter_code, $counter_length, \"0\", STR_PAD_LEFT);\n        }\n        break;\n    }\n\n    $forms_requested = explode(\",\", $request_data[\"FORMS\"]);\n\n    $total_cost = $request_data[\"CHARGE\"] - 0;\n\n    $pdf_info = array(\n      \"forms\" => array_combine($forms_requested, array_fill(0, count($forms_requested), 0))\n    );\n\n    try {\n      $p = new PDFlib();\n\n      if (file_exists(PDFLIB_LICENSE_PATH)) {\n        // Set path to PDFlib license file\n        $p->set_parameter(\"licensefile\", PDFLIB_LICENSE_PATH);\n      }\n\n      $document_options = array(\n        \"compatibility\" => $pdf_compatibility,\n        \"masterpassword\" => $pdf_password,\n        \"permissions\" => join(\" \", $pdf_permissions),\n        \"inmemory\" => \"true\",\n        \"linearize\" => \"true\"\n      );\n\n      $optlist = array();\n\n      foreach ($document_options as $opt => $val) {\n        $optlist[] = $opt . \"={\" . $val . \"}\";\n      }\n\n      $p->begin_document(\"\", join(\" \", $optlist));\n\n      // This line is required to avoid problems on Japanese systems\n      $p->set_parameter(\"hypertextencoding\", \"winansi\");\n\n      $embed_fonts = array(\n        \"winansi\" => array(\n          \"blmnplo\",\n          \"courbd\",\n          \"mtcorsva\"\n        ),\n        \"builtin\" => array(\n          \"wingdng2\"\n        )\n      );\n\n      $fi = 1;\n\n      foreach ($embed_fonts as $encoding => $fonts) {\n        foreach ($fonts as $font) {\n          $p->set_parameter(\"FontOutline\", \"f\" . $fi . \"=\" . BASE_DIR . \"fonts/ttf/\" . $font . \".ttf\");\n\n          $$font = $p->load_font(\"f\" . $fi, $encoding, \"embedding=true\");\n\n          $GLOBALS[$font] = $$font;\n\n          $fi++;\n        }\n      }\n\n      $batch_index = 0;\n\n      foreach ($forms_requested as $form_id) {\n        $service_id = null;\n\n        // Test whether Form ID is prefixed with 'M_', denoting member-specific form\n        if ($member_form = (bool) preg_match(\"/^M_(\\w+)$/i\", $form_id, $matches)) {\n          $form_name = strtolower($matches[1]);\n\n          $member_form_info = $this->dbh->get_member_form_info($form_name);\n\n          // Test whether print data specifies Service ID\n          if (isset($member_form_info[\"SERVICE_ID\"])) {\n            // Make sure Service ID is valid for Member ID\n            if ($services = $this->dbh->get_member_services($this->customer_data[\"COMPANYNUMBER\"], 1)) {\n              if (array_key_exists($member_form_info[\"SERVICE_ID\"], $services)) {\n                $service_id = $member_form_info[\"SERVICE_ID\"];\n              }\n              else {\n                throw new SoapFault(\"Sender\", \"Form requested [\" . strtoupper($form_name) . \"] is not available for this customer.\");\n              }\n            }\n          }\n          else $form_file_path = BASE_DIR . \"forms/members/\";\n        }\n        else {\n          $form_name = strtolower($form_id);\n\n          $form_file_path = BASE_DIR . \"forms/\" . strtolower($this->customer_data[\"STATE\"]) . \"/\";\n        }\n\n        // Test whether Service ID has been assigned to current form\n        if ($is_service = isset($service_id)) {\n          $service_data = array();\n\n          $service_info = $this->dbh->get_service_info($service_id);\n\n          if ($service_info !== false) {\n            switch ($service_info[\"CONFIG_TYPE\"]) {\n              case 1:\n                $service_data = $this->dbh->get_customer_service_data($service_id, $this->user_data[\"SERIALNUMBER\"]);\n                break;\n              case 2:\n                if (isset($PropertyId)) {\n                  $service_data = $this->dbh->get_property_service_data($service_id, $PropertyId);\n                }\n                break;\n            }\n          }\n\n          // Import custom web services functions\n          require_once(BASE_DIR . \"cgi-bin/forms_online/services/\" . $service_id . \"/print.php\");\n\n          $service_vars = $request_data[strtoupper($service_id)];\n\n          $form_vars = array_diff_key($request_data, array(\n            strtoupper($service_id) => $service_vars\n          ));\n\n          // Fetch PDF into memory using custom web services function\n          $service_form = get_service_form($form_vars, $service_vars, $service_data);\n\n          // Test whether function returned valid PDF\n          if ($service_form !== false) {\n            $form_file_path = \"/pvf/pdf/\";  // Specify virtual file path\n\n            // Read PDF into virtual file\n            $p->create_pvf($form_file_path . $form_name . \".pdf\", $service_form, \"\");\n\n            $form = $p->open_pdi_document($form_file_path . $form_name . \".pdf\", \"errorpolicy {exception}\");\n\n            // Get number of pages of current form\n            $np = ($member_form_info[\"NUMPAGES\"] ? $member_form_info[\"NUMPAGES\"] : 1);\n\n            // Get paper size of current form\n            $paper_sizes = array(\n              \"letter\" => array(\n                \"width\" => 8.5,\n                \"height\" => 11\n              ),\n              \"legal\" => array(\n                \"width\" => 8.5,\n                \"height\" => 14\n              )\n            );\n\n            if (array_key_exists($member_form_info[\"PAPERSIZE\"], $paper_sizes)) $form_size = $member_form_info[\"PAPERSIZE\"];\n\n            if (!$form_size) {\n              if (isset($pagewidth, $pageheight)) {\n                foreach ($paper_sizes as $size => $dimensions) {\n                  if ($pagewidth == ($dimensions[\"width\"] * 72) && $pageheight == ($dimensions[\"height\"] * 72)) {\n                    $form_size = $size;\n                    break;\n                  }\n                }\n              }\n\n              if (!$form_size) $form_size = \"letter\";\n            }\n\n            // Assign page dimensions to variables\n            $pagewidth = $paper_sizes[$form_size][\"width\"] * 72;\n            $pageheight = $paper_sizes[$form_size][\"height\"] * 72;\n          }\n          else {\n            throw new SoapFault(\"Receiver\", \"An error was encountered while attempting to retrieve form [\" . $form_name . \"] via third-party vendor's web service.\");\n          }\n        }\n        else if (file_exists($form_file_path . $form_name . \".dbd\") && file_exists($form_file_path . $form_name . \".pdf\")) {\n          $dbd = parse_ini_file($form_file_path . $form_name . \".dbd\", true);\n\n          $multipart_fields = array();\n\n          foreach ($dbd as $field_name => $info) {\n            if (preg_match($multipart_field_pattern, $field_name, $matches)) {\n              $root_field_name = preg_replace(\"/_\\d+$/\", \"\", $matches[1]);\n\n              if (array_key_exists($root_field_name, $request_data)) {\n                if (!array_key_exists($matches[1], $multipart_fields)) {\n                  $multipart_fields[$matches[1]] = array();\n                }\n\n                $multipart_fields[$matches[1]][] = $matches[2];\n              }\n            }\n          }\n\n          foreach ($multipart_fields as $field_name => $indexes) {\n            $root_field_name = preg_replace(\"/_\\d+$/\", \"\", $field_name);\n\n            $field_data = $request_data[$root_field_name];\n\n            sort($indexes, SORT_NUMERIC);\n\n            $total_segments = count($indexes);\n\n            for ($i=0; $i<$total_segments; $i++) {\n              $multipart_field_name = $field_name . \"__\" . $indexes[$i];\n\n              $request_data[$multipart_field_name] = get_field_segment($p, $dbd[$multipart_field_name], $field_data, $courbd, $i === $total_segments - 1);\n            }\n          }\n\n          $form = $p->open_pdi_document(realpath($form_file_path . $form_name . \".pdf\"), \"password {\" . $pdf_password . \"} errorpolicy {exception}\");\n\n          $np = $dbd['*Form*']['PageCount'] - 0;\n        }\n        else {\n          throw new SoapFault(\"Receiver\", \"Form requested [\" . strtoupper($form_name) . \"] was not found.\");\n        }\n\n        $pdf_info[\"forms\"][$form_id] += $np;\n\n        for ($pi = 1; $pi <= $np; $pi++) {\n          $page = $p->open_pdi_page($form, $pi, \"errorpolicy {exception}\");\n\n          if (!$is_service) {\n            $pagewidth = $dbd['*Form*']['Page' . $pi . ' Width'] * 72;\n            $pageheight = $dbd['*Form*']['Page' . $pi . ' Height'] * 72;\n          }\n\n          // Establish coordinates with the origin in the upper left corner\n          $p->begin_page_ext($pagewidth, $pageheight, \"topdown=true\");\n\n          $p->fit_pdi_page($page, 0, $pageheight, \"\");\n\n          $p->close_pdi_page($page);\n\n          if (!$is_service) {\n            if ($dbd['*Form*']['Page' . $pi . ' LogoLeft'] != '') {\n              $logo_file_path = $form_file_path . \"/logos/\";\n              $logo_file_name = $request_data[\"ASSOC_LOGOID\"] . \".bmp\";\n\n              if (file_exists($logo_file_path . $logo_file_name)) {\n                // Insert Chapter Logo for TAA forms\n                $img = $p->load_image(\"auto\", realpath($logo_file_path . $logo_file_name), \"\");\n\n                $p->fit_image($img, $dbd['*Form*']['Page' . $pi . ' LogoLeft'], $dbd['*Form*']['Page' . $pi . ' LogoBottom'], \"\");\n\n                $p->close_image($img);\n              }\n            }\n\n            $batch_field_found = false;\n\n            $field_data = null;\n\n            foreach ($dbd as $field_name => $info) {\n              $root_field_name = null;\n\n              if ($info['Page'] == $pi) {\n                // Test whether $field_name corresponds to batch code field\n                if (preg_match(\"/^BATCHNO(\\d*)$/i\", $field_name, $matches)) {  // Yes\n                  if (!$unit_based_billing) {\n                    $root_field_name = $matches[1];\n\n                    // Assign batch code to $field_data\n                    $field_data = $batch_code_seg;\n\n                    if (!$batch_field_found) {\n                      $batch_field_found = true;\n\n                      $batch_index++;\n                    }\n\n                    switch ($this->customer_data[\"STATE\"]) {\n                      case \"TSSA\":\n                        break;\n                      default:\n                        $batch_index_str = str_pad($batch_index, 2, \"0\", STR_PAD_LEFT);\n\n                        $field_data .= $batch_index_str;\n                        break;\n                    }\n\n                    if (!$sample) {\n                      switch ($this->customer_data[\"STATE\"]) {\n                        case \"AANC\":\n                        case \"GAA\":\n                        case \"TSSA\":\n                          break;\n                        default:\n                          $field_data .= $this->user_data[\"SERIALNUMBER\"];\n                          break;\n                      }\n                    }\n                  }\n                }\n                else {\n                  if (preg_match($multipart_field_pattern, $field_name, $matches)) {\n                    $root_field_name = preg_replace(\"/_\\d+$/\", \"\", $matches[1]);\n\n                    $field_data = $request_data[$field_name];\n                  }\n                  else {\n                    $root_field_name = preg_replace(\"/_\\d+$/\", \"\", $field_name);\n\n                    $field_data = $request_data[$root_field_name];\n                  }\n                }\n\n                if ((string) $field_data !== \"\" && isset($root_field_name)) {\n                  // Test whether field should be formatted as E-signature\n                  if ($esignature_format = array_key_exists($form_id, $esignature_fields)) {\n                    $esignature_format = in_array(strtoupper($root_field_name), $esignature_fields[$form_id]);\n                  }\n\n                  put_field($p, $info, $field_data, $courbd, $esignature_format);\n                }\n              }\n            }\n          }\n\n          // Test whether sample watermark is on\n          if ($sample) {  // Yes\n            // Apply watermark\n            $p->save();\n\n            $helv = $p->load_font(\"Helvetica\", \"winansi\", \"\");\n\n            if ($is_service) $papersize = $paper_sizes[$form_size][\"height\"];\n            else $papersize = $dbd[\"*Form*\"][\"Page\" . $pi . \" Height\"];\n\n            put_sample_watermark($p, $helv, $pageheight, $papersize);\n\n            $p->restore();\n          }\n\n          $p->end_page_ext(\"\");\n        }\n\n        $p->close_pdi_document($form);\n      }\n\n      $p->set_info(\"Creator\", PDF_CREATOR);\n      $p->set_info(\"Author\", PDF_AUTHOR);\n      $p->set_info(\"Title\", $request_data[\"FORMS\"]);\n\n      $p->end_document(\"\");\n\n      $pdf_info[\"buffer\"] = $p->get_buffer();\n    }\n    catch (PDFlibException $e) {\n      $pdf_error = \"[\" . $e->get_errnum() . \"] \" . $e->get_apiname() . \": \" . $e->get_errmsg() . \" in \" . __FILE__ . \" on line \" . $e->getLine();\n\n      $this->LogError($pdf_error);\n    }\n\n    unset($p);\n\n    if (isset($pdf_info[\"buffer\"])) {\n      if (!$sample) {\n        if (!$result = !$total_cost) {\n          $result = $this->dbh->reduce_click_counter($this->user_data[\"SERIALNUMBER\"], $total_cost);\n\n          if ($result !== false) {\n            $this->customer_data[\"COUNTER\"] = $result;\n          }\n        }\n\n        if ($result !== false) {\n          $print_transaction_data = array(\n            \"SERIALNUMBER\" => $this->user_data[\"SERIALNUMBER\"],\n            \"STATE\" => $this->customer_data[\"STATE\"],\n            \"LEASE_ID\" => $LeaseId,\n            \"USERID\" => $this->user_data[\"USERID\"],\n            \"FIRSTNAME\" => $this->user_data[\"FIRSTNAME\"],\n            \"LASTNAME\" => $this->user_data[\"LASTNAME\"],\n            \"UNITNUM\" => $request_data[\"UNITNO\"],\n            \"ADDRESS\" => ucwords($request_data[\"ADDRESS\"]),\n            \"FORMSPRINTED\" => $request_data[\"FORMS\"],\n            \"PAGECOUNT\" => array_sum($pdf_info[\"forms\"]),\n            \"PROPERTYNUMBER\" => $PropertyId\n          );\n\n          if (!$unit_based_billing) {\n            $print_transaction_data[\"COUNTER\"] = $this->customer_data[\"COUNTER\"];\n            $print_transaction_data[\"AMOUNTCHARGED\"] = $total_cost;\n          }\n\n          $this->trans_dbh = new transactions();\n\n          $result = $this->trans_dbh->record_print_transaction($print_transaction_data);\n\n          if ($result !== false) {\n            $pdf_info[\"trans_id\"] = $result;\n\n            $this->document_management_services = array();\n\n            if (!DEV_MODE && ($LeaseId || $ApplicantId)) {\n              $this->document_management_services = $this->GetDocumentManagementServices($PropertyId);\n            }\n\n            if (!$esign) {\n              foreach ($this->document_management_services as $service_abbrev => $service_data) {\n                $dms = new $service_abbrev($service_data);\n\n                $dms->requireDirectURL(true);\n\n                $target_url = $dms->getStoreDocumentURL();\n\n                $request_vars = $dms->getStoreDocumentRequestVars($pdf_info[\"forms\"], $pdf_info[\"buffer\"], $pdf_info[\"trans_id\"], $PropertyId, $LeaseId, $ApplicantId);\n\n                $result = $dms->sendRequest($target_url, $request_vars);\n\n                if ($result !== false) {\n                  if (!is_bool($result)) {\n                    $pdf_info[\"buffer\"] = $result;\n                  }\n                }\n                break;\n              }\n            }\n          }\n        }\n        else {\n          throw new SoapFault(\"Receiver\", \"Unable to debit forms (clicks) from counter.\");\n        }\n      }\n\n      return $pdf_info;\n    }\n\n    return false;\n  }\n\n  final protected function GetAssocLogoFileInfo($assoc) {\n    $images_file_path = \"/images\";\n\n    $logo_file_pattern = \"/^logo_\" . $assoc . \"_(\\d+)x(\\d+)\\.gif$/\";\n\n    if ($logo_files = $this->GetMatchingFiles($_SERVER[\"DOCUMENT_ROOT\"] . $images_file_path, $logo_file_pattern)) {\n      $logo_file_name = $logo_files[0];\n\n      if (preg_match($logo_file_pattern, $logo_file_name, $matches)) {\n        $file_info = array(\n          \"path\" => $images_file_path . \"/\" . $logo_file_name,\n          \"width\" => $matches[1],\n          \"height\" => $matches[2]\n        );\n\n        return $file_info;\n      }\n    }\n\n    return false;\n  }\n\n  final protected function GetDateFormat($type) {\n    switch ($GLOBALS[\"date_order\"]) {\n      case \"L\":\n        $date_formats = array(\n          DATE_FORMAT => \"d-m-Y\",\n          DATE_FORMAT_NOZERO => \"j-n-Y\",\n          DATETIME_FORMAT => \"d-m-Y H:i:s\",\n          DATETIME_FORMAT_NOZERO => \"j-n-Y H:i:s\"\n        );\n        break;\n      case \"B\":\n        $date_formats = array(\n          DATE_FORMAT => \"Y-m-d\",\n          DATE_FORMAT_NOZERO => \"Y-n-j\",\n          DATETIME_FORMAT => \"Y-m-d H:i:s\",\n          DATETIME_FORMAT_NOZERO => \"Y-n-j H:i:s\"\n        );\n        break;\n      default:\n        $date_formats = array();\n        break;\n    }\n\n    if (array_key_exists($type, $date_formats)) {\n      return $date_formats[$type];\n    }\n\n    return parent::GetDateFormat($type);\n  }\n\n  final protected function GetDocumentManagementServices($PropertyId) {\n    $document_management_services = array();\n\n    if ($services = $this->dbh->get_all_services($this->customer_data[\"COMPANYNUMBER\"], 3)) {\n      foreach ($services as $service_abbrev => $desc) {\n        if (class_exists($service_abbrev)) {\n          $result = $this->dbh->get_service_info($service_abbrev);\n\n          if ($result !== false) {\n            $service_info = $result;\n\n            switch ($service_info[\"CONFIG_TYPE\"]) {\n              case 1:\n                $result = $this->dbh->get_customer_service_data($service_abbrev, $this->customer_data[\"SERIALNUMBER\"]);\n                break;\n              case 2:\n                $result = $this->dbh->get_property_service_data($service_abbrev, $PropertyId);\n                break;\n              default:\n                $result = array();\n                break;\n            }\n\n            if (!empty($result)) {\n              $service_data = $result;\n\n              $document_management_services[$service_abbrev] = $service_data;\n            }\n          }\n        }\n      }\n    }\n\n    return $document_management_services;\n  }\n\n  final protected function GetStateAbbrev($product) {\n    if (isset($product)) {\n      $product_settings = parse_ini_file(BASE_DIR . \"cgi-bin/forms_online/products.ini.php\", true);\n\n      if (array_key_exists($product, $product_settings[\"abbrev\"])) {\n        $state_abbrev = $product_settings[\"abbrev\"][$product];\n      }\n      else {\n        $state_abbrev = $product;\n      }\n\n      return $state_abbrev;\n    }\n\n    return false;\n  }\n\n  final protected function KillSession() {\n    $this->customer_data = array();\n    $this->user_data = array();\n\n    return parent::KillSession();\n  }\n\n  protected function ParseForms($forms) {\n    $forms = (array) $forms;\n\n    $forms_list = array();\n\n    foreach ($forms as $form) {\n      $str = strtoupper(trim($form->Id));\n\n      if ($str !== \"\") {\n        $forms_list[] = $str;\n      }\n    }\n\n    return $forms_list;\n  }\n\n  final protected function TestAuthenticationFields($SerialNumber, $UserId, $Password) {\n    if ($result = $this->dbh->get_auth_field_meta()) {\n      $auth_field_meta = $result;\n\n      if (strlen($SerialNumber) > $auth_field_meta[\"SERIAL-NUMBER\"]) {\n        throw new SoapFault(\"Sender\", \"Value passed for SerialNumber exceeds \" . $auth_field_meta[\"SERIAL-NUMBER\"] . \"-character limit.\");\n      }\n      else if (strlen($UserId) > $auth_field_meta[\"USER-ID\"]) {\n        throw new SoapFault(\"Sender\", \"Value passed for UserId exceeds \" . $auth_field_meta[\"USER-ID\"] . \"-character limit.\");\n      }\n      else if (strlen($Password) > $auth_field_meta[\"PASSWORD\"]) {\n        throw new SoapFault(\"Sender\", \"Value passed for Password exceeds \" . $auth_field_meta[\"PASSWORD\"] . \"-character limit.\");\n      }\n      else {\n        $result = $this->dbh->test_new_db_schema($SerialNumber);\n\n        if ($result !== -1) {\n          $this->new_db_schema = $result;\n\n          $this->dbh->set_new_db_schema($this->new_db_schema);\n        }\n        else {\n          throw new SoapFault(\"Receiver\", \"This account is currently undergoing scheduled maintenance and has been temporarily disabled. Please try again later.\");\n        }\n      }\n    }\n    else {\n      throw new SoapFault(\"Receiver\", \"Unable to perform authentication.\");\n    }\n  }\n\n  final protected function TestExpirationDate($RenewalDate) {\n    if ($result = (string) $RenewalDate !== \"\") {\n      $current_timestamp = time();\n\n      $renewal_timestamp = strtotime($RenewalDate);\n\n      $license_termination_timestamp = strtotime(date(\"m/d/Y\", $renewal_timestamp) . \" +31 days\");\n\n      $result = $current_timestamp < $license_termination_timestamp;\n    }\n\n    return $result;\n  }\n\n  final protected function TestPaymentDue($PaymentDueDate, $PaymentDue) {\n    if (!$result = !((string) $PaymentDueDate !== \"\" && $PaymentDue > 0)) {\n      $current_timestamp = time();\n\n      $payment_due_timestamp = strtotime($PaymentDueDate);\n\n      $license_termination_timestamp = strtotime(date(\"m/d/Y\", $payment_due_timestamp) . \" +31 days\");\n\n      $result = $current_timestamp < $license_termination_timestamp;\n    }\n\n    return $result;\n  }\n\n  protected function TestSessionId($SessionId) {\n    if ($valid_session = (string) $SessionId !== \"\") {\n      $this->user_data = array();\n\n      $this->SuspendParentSession();\n\n      $sess_handle = new session($this->sess_name, $SessionId);\n\n      if (is_bool($_SESSION[\"new_db_schema\"])) {\n        $this->new_db_schema = $_SESSION[\"new_db_schema\"];\n      }\n\n      $this->dbh->set_new_db_schema($this->new_db_schema);\n\n      if ($result = $this->dbh->get_user_data($_SESSION[\"serialnum\"], $_SESSION[\"userid\"])) {\n        $this->user_data = $result;\n\n        $token_mismatch = false;\n        /**\n         * This section will be used to register client's acknowledgment of API message.\n         *\n         * Because each API message is linked to an ID from the TOKEN table, which depends\n         * on the implementation of the new multi-tenant user authentication, we cannot\n         * activate this feature until the MTU schema is in place.\n         *\n        if (isset($_SESSION[\"message_id\"])) {\n          $result = $this->dbh->get_token_data($_SESSION[\"message_id\"], $this->user_data[\"ID\"]);\n\n          if ($result !== false) {\n            $token_data = $result;\n\n            $token_mismatch = isset($this->message_id) && $_SESSION[\"message_id\"] !== $this->message_id;\n          }\n          else {\n            unset($_SESSION[\"message_id\"]);\n          }\n        }\n         */\n        if (!$token_mismatch) {\n          $service_name = preg_replace(\"/Dev$/i\", \"\", strtolower(get_class($this)));\n\n          $service_type = \"SOAP\";\n\n          $this->dbh->set_companies_to_log($service_name);\n\n          if ($this->dbh->test_log_company()) {\n            $this->dbh->log_xml($this->SOAP_request, \"xml_log\", $service_name, $service_type, $this->user_data[\"SERIALNUMBER\"]);\n          }\n\n          if ($result = $this->dbh->get_customer_data($this->user_data[\"SERIALNUMBER\"])) {\n            $this->customer_data = $result;\n\n            $this->dbh->set_product_state($this->customer_data[\"STATE\"]);\n\n            $GLOBALS[\"date_order\"] = $this->dbh->get_date_order($this->customer_data[\"STATE\"]);\n\n            if ($this->dbh->test_log_company($this->customer_data[\"COMPANYNUMBER\"])) {\n              $this->dbh->log_xml($this->SOAP_request, $this->customer_data[\"COMPANYNUMBER\"] . \"_log\", $service_name, $service_type, $this->user_data[\"SERIALNUMBER\"]);\n            }\n          }\n\n          if (isset($token_data)) {\n            $resource_marked_as_read = !empty($token_data[\"data\"]);\n\n            switch (strtolower($token_data[\"type\"])) {\n              case \"license_agreement\":\n                $license_accepted = !empty($this->customer_data[\"LICENSEACCEPTED\"]);\n\n                if ($resource_marked_as_read) {\n                  if (!$license_accepted) {\n                    $customer_data = $this->customer_data;\n\n                    $customer_data[\"LICENSEACCEPTED\"] = 1;\n\n                    if ($this->dbh->save_customer_data($customer_data, $this->user_data[\"SERIALNUMBER\"])) {\n                      if ($result = $this->dbh->get_customer_data($this->user_data[\"SERIALNUMBER\"])) {\n                        $this->customer_data = $result;\n                      }\n                    }\n                  }\n                }\n                else {\n                  $resource_marked_as_read = $license_accepted;\n                }\n                break;\n            }\n\n            if ($resource_marked_as_read) {\n              unset($_SESSION[\"message_id\"]);\n            }\n          }\n        }\n      }\n\n      if ($valid_session = !empty($this->user_data)) {\n        $this->CommitSession();\n      }\n      else {\n        // $this->KillSession();\n      }\n\n      $this->ResumeParentSession();\n\n      if (isset($token_data)) {\n        if ($token_mismatch) {\n          if (isset($this->message_id)) {\n            throw new SoapFault(\"Sender\", \"Invalid MessageId in ServiceMessageResponse header.\");\n          }\n          else {\n            throw new SoapFault(\"Sender\", \"Expecting MessageId in ServiceMessageResponse header.\");\n          }\n        }\n        else if (!$resource_marked_as_read) {\n          throw new SoapFault(\"Sender\", \"Resource referenced by MessageId in ServiceMessageResponse header has not been marked as read.\");\n        }\n      }\n    }\n\n    return $valid_session;\n  }\n}\n\nclass Document {\n  /** @var string */\n  public $Group;\n\n  /** @var FormGenerated[] */\n  public $Forms;\n\n  /** @var base64Binary */\n  public $Pdf;\n\n  /**\n   * @param string $Group\n   * @param FormGenerated[] $Forms\n   * @param base64Binary $Pdf\n   * @return Document\n   */\n  public function __construct($Group, $Forms, $Pdf) {\n    $this->Group = $Group;\n    $this->Forms = (array) $Forms;\n    $this->Pdf = $Pdf;\n\n    return $this;\n  }\n}\n\nclass Field {\n  /** @var string */\n  public $Name;\n\n  /** @var string */\n  public $Type;\n\n  /** @var string */\n  public $Length;\n\n  /** @var boolean */\n  public $Required;\n\n  /**\n   * @param string $Name\n   * @param string $Type\n   * @param string $Length\n   * @param boolean $Required\n   * @return Field\n   */\n  public function __construct($Name, $Type, $Length, $Required) {\n    $this->Name = $Name;\n    $this->Type = $Type;\n    $this->Length = $Length;\n    $this->Required = (bool) $Required;\n\n    return $this;\n  }\n}\n\nclass SectionField {\n  /** @var string */\n  public $Name;\n\n  /** @var string */\n  public $Label;\n\n  /** @var int **/\n  public $Rank;\n\n  /** @var Field[] */\n  public $Fields;\n\n  /**\n   * @param string $Name\n   * @param string $Label\n   * @param int $Rank\n   * @param Field[] $Fields\n   * @return SectionField\n   */\n  public function __construct($Name, $Label, $Rank, $Fields) {\n    $this->Name = $Name;\n    $this->Label = $Label;\n    $this->Rank = $Rank;\n    $this->Fields = (array) $Fields;\n\n    return $this;\n  }\n}\n\nclass FormGenerated {\n  /** @var string */\n  public $Id;\n\n  /** @var int */\n  public $Pages;\n\n  /**\n   * @param string $Id\n   * @param int $Pages\n   * @return FormGenerated\n   */\n  public function __construct($Id, $Pages) {\n    $this->Id = $Id;\n    $this->Pages = (int) $Pages;\n\n    return $this;\n  }\n}\n\nclass PrintTransaction {\n  /** @var int */\n  public $Id;\n\n  /** @var Document[] */\n  public $Documents;\n\n  /**\n   * @param int $Id\n   * @param Document[] $Documents\n   * @return PrintTransaction\n   */\n  public function __construct($Id, $Documents) {\n    $this->Id = (int) $Id;\n    $this->Documents = (array) $Documents;\n\n    return $this;\n  }\n}\n?>\n",
					"file": "bluemoon-production/cgi-bin/classes/soap_product.class.php",
					"file_size": 40678,
					"file_write_time": 131443678551214768,
					"settings":
					{
						"buffer_size": 40678,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "<?\n/**\n * Base class for web database-dependent SOAP services\n */\nabstract class OAP_Web extends SOAP_server {\n  // Class properties\n\n  protected $sess_name = null;\n\n  protected $vendor_id = null;\n\n  protected $vendor_settings = array();\n\n  // Class methods\n\n  public function __construct($service_invoked_local = false) {\n    $this->__wakeup();\n\n    $this->SetVendorId(DEV_MODE);\n\n    parent::__construct($service_invoked_local);\n  }\n\n  public function __sleep() {\n    return array(\"vendor_id\");\n  }\n\n  final protected function GetAssoc($product = null) {\n    if (isset($product)) {\n      $assoc = $this->dbh->get_assoc($product);\n\n      return $assoc;\n    }\n\n    return false;\n  }\n\n  final protected function GetFilePath($path_template, $product, $prepend_doc_root = false, $required = false) {\n    $wildcard = \"*\";\n\n    $file_path = str_replace($wildcard, $product, $path_template);\n\n    if (!$result = file_exists(($prepend_doc_root ? $_SERVER[\"DOCUMENT_ROOT\"] : \"\") . $file_path)) {\n      $assoc = $this->GetAssoc($product);\n\n      if ($assoc !== false) {\n        switch ($assoc) {\n          case \"NAA\":\n          case \"CAN\":\n          case \"UKAA\":\n            $file_path = str_replace($wildcard, $assoc, $path_template);\n\n            if (!$result = !$required) {\n              $result = file_exists(($prepend_doc_root ? $_SERVER[\"DOCUMENT_ROOT\"] : \"\") . $file_path);\n            }\n            break;\n        }\n      }\n    }\n\n    if ($result) {\n      return $file_path;\n    }\n\n    return $result;\n  }\n\n  final protected function GetCountry($product = null) {\n    if (isset($product)) {\n      $country = $this->dbh->get_country($product);\n\n      return $country;\n    }\n\n    return false;\n  }\n\n  protected function LogError($message) {\n    if (trim($message) !== \"\") {\n      error_log($message);\n    }\n  }\n\n  final protected function SetVendorId($LogVendorAuthResult = false) {\n    $this->vendor_id = null;\n\n    if (isset($_SERVER[\"PHP_AUTH_USER\"], $_SERVER[\"PHP_AUTH_PW\"])) {\n      if ($result = $this->dbh->auth_vendor($_SERVER[\"PHP_AUTH_USER\"], $_SERVER[\"PHP_AUTH_PW\"])) {\n        $this->vendor_id = $_SERVER[\"PHP_AUTH_USER\"];\n\n        $GLOBALS[\"vendor\"] = $this->vendor_id;\n      }\n\n      if ($LogVendorAuthResult) {\n        $current_time = time();\n\n        $log_entry = date(\"H:i:s\", $current_time) . \"\\t\" . $_SERVER[\"PHP_AUTH_USER\"] . \"\\t\" . $_SERVER[\"PHP_AUTH_PW\"] . \"\\t\" . ($result ? \"S\" : \"F\") . \"\\r\\n\";\n\n        record_to_log(\"vendor_log\", $log_entry);\n      }\n    }\n  }\n\n  protected function TestVendorId($vendor_service_type = null) {\n    $result = $this->dbh->get_vendor_settings($this->vendor_id, $vendor_service_type);\n\n    if ($valid_vendor = $result !== false) {\n      $this->vendor_settings = $result;\n    }\n\n    return $valid_vendor;\n  }\n}\n\nclass Applicant {\n  /** @var int */\n  public $Id;\n\n  /** @var string */\n  public $ApplicationDate;\n\n  /** @var string */\n  public $FirstName;\n\n  /** @var string */\n  public $LastName;\n\n  /**\n   * @param int $Id\n   * @param string $ApplicationDate\n   * @param string $FirstName\n   * @param string $LastName\n   * @return Applicant\n   */\n  public function __construct($Id, $ApplicationDate, $FirstName, $LastName) {\n    $this->Id = (int) $Id;\n    $this->ApplicationDate = $ApplicationDate;\n    $this->FirstName = $FirstName;\n    $this->LastName = $LastName;\n\n    return $this;\n  }\n}\n\nclass Contact {\n  /** @var string */\n  public $Name;\n\n  /** @var string */\n  public $Email;\n\n  /** @var string */\n  public $Phone;\n\n  /**\n   * @param string $Name\n   * @param string $Email\n   * @param string $Phone\n   * @return Contact\n   */\n  public function __construct($Name, $Email, $Phone) {\n    $this->Name = $Name;\n    $this->Email = $Email;\n    $this->Phone = $Phone;\n\n    return $this;\n  }\n}\n\nclass Esignature {\n  /** @var int */\n  public $Id;\n\n  /** @var string */\n  public $DateInitiated;\n\n  /** @var string */\n  public $DateExecuted;\n\n  /** @var string */\n  public $LeaseDate;\n\n  /** @var string */\n  public $StreetAddress;\n\n  /** @var string */\n  public $UnitNumber;\n\n  /** @var string */\n  public $LeaseTermBeginDate;\n\n  /** @var Signer[] */\n  public $Signers;\n\n  /** @var FormShort[] */\n  public $LeaseForms;\n\n  /** @var FormShort[] */\n  public $CustomForms;\n\n  /**\n   * @param int $Id\n   * @param string $DateInitiated\n   * @param string $DateExecuted\n   * @param string $LeaseDate\n   * @param string $StreetAddress\n   * @param string $UnitNumber\n   * @param string $LeaseTermBeginDate\n   * @param Signer[] $Signers\n   * @param FormShort[] $LeaseForms\n   * @param FormShort[] $CustomForms\n   * @return Esignature\n   */\n  public function __construct($Id, $DateInitiated, $DateExecuted, $LeaseDate, $StreetAddress, $UnitNumber, $LeaseTermBeginDate, $Signers, $LeaseForms, $CustomForms) {\n    $this->Id = (int) $Id;\n    $this->DateExecuted = $DateExecuted;\n    $this->DateInitiated = $DateInitiated;\n    $this->LeaseDate = $LeaseDate;\n    $this->StreetAddress = $StreetAddress;\n    $this->UnitNumber = $UnitNumber;\n    $this->LeaseTermBeginDate = $LeaseTermBeginDate;\n    $this->Signers = (array) $Signers;\n    $this->LeaseForms = (array) $LeaseForms;\n    $this->CustomForms = (array) $CustomForms;\n\n    return $this;\n  }\n}\n\nclass Form {\n  /** @var string */\n  public $Id;\n\n  /** @var string */\n  public $Title;\n\n  /** @var int */\n  public $Copies;\n\n  /** @var mixed */\n  public $Cost;\n\n  /** @var string */\n  public $PageSize;\n\n  /** @var string */\n  public $Language;\n\n  /**\n   * @param string $Id\n   * @param string $Title\n   * @param int $Copies\n   * @param mixed $Cost\n   * @param string $PageSize\n   * @param string $Language\n   * @return Form\n   */\n  public function __construct($Id, $Title, $Copies, $Cost, $PageSize, $Language) {\n    $this->Id = $Id;\n    $this->Title = $Title;\n    $this->Copies = (int) $Copies;\n    $this->Cost = $Cost;\n    $this->PageSize = $PageSize;\n    $this->Language = $Language;\n\n    return $this;\n  }\n}\n\nclass FormList {\n  /** @var string */\n  public $Section;\n\n  /** @var Form[] */\n  public $Forms;\n\n  /**\n   * @param string $Section\n   * @param Form[] $Forms\n   * @return FormList\n   */\n  public function __construct($Section, $Forms) {\n    $this->Section = $Section;\n    $this->Forms = (array) $Forms;\n\n    return $this;\n  }\n}\n\nclass FormShort {\n  /** @var string */\n  public $Id;\n\n  /**\n   * @param string $Id\n   * @return FormShort\n   */\n  public function __construct($Id) {\n    $this->Id = $Id;\n\n    return $this;\n  }\n}\n\nclass Privilege {\n  /** @var string */\n  public $Name;\n\n  /** @var boolean */\n  public $Restricted;\n\n  /**\n   * @param string $Name\n   * @param boolean $Restricted\n   * @return Privilege\n   */\n  public function __construct($Name, $Restricted) {\n    $this->Name = $Name;\n    $this->Restricted = (bool) $Restricted;\n\n    return $this;\n  }\n}\n\nclass Property {\n  /** @var int */\n  public $Id;\n\n  /** @var string */\n  public $Name;\n\n  /** @var string */\n  public $Type;\n\n  /**\n   * @param int $Id\n   * @param string $Name\n   * @param string $Type\n   * @return Property\n   */\n  public function __construct($Id, $Name, $Type) {\n    $this->Id = (int) $Id;\n    $this->Name = $Name;\n    $this->Type = $Type;\n\n    return $this;\n  }\n}\n\nclass Resident {\n  /** @var int */\n  public $Number;\n\n  /** @var string */\n  public $Name;\n\n  /**\n   * @param int $Number\n   * @param string $Name\n   * @return Resident\n   */\n  public function __construct($Number, $Name) {\n    $this->Number = (int) $Number;\n    $this->Name = $Name;\n\n    return $this;\n  }\n}\n\nclass SignerShort {\n  /** @var Contact */\n  public $Contact;\n\n  /** @var boolean */\n  public $Onsite;\n  /**\n   * @param Contact $Contact\n   * @param boolean $Onsite\n   * @return SignerShort\n   */\n  public function __construct($Contact, $Onsite) {\n    $this->Contact = $Contact;\n    $this->Onsite = (bool) $Onsite;\n\n    return $this;\n  }\n}\n\nclass Signer {\n  /** @var string */\n  public $Key;\n\n  /** @var string */\n  public $Name;\n\n  /** @var string */\n  public $Email;\n\n  /** @var string */\n  public $DateSigned;\n\n  /** @var boolean */\n  public $PaperlessLeaseRequested;\n\n  /**\n   * @param string $Key\n   * @param string $Name\n   * @param string $Email\n   * @param string $DateSigned\n   * @param boolean $PaperlessLeaseRequested\n   * @return Signer\n   */\n  public function __construct($Key, $Name, $Email, $DateSigned, $PaperlessLeaseRequested) {\n    $this->Key = $Key;\n    $this->Name = $Name;\n    $this->Email = $Email;\n    $this->DateSigned = $DateSigned;\n    $this->PaperlessLeaseRequested = (bool) $PaperlessLeaseRequested;\n\n    return $this;\n  }\n}\n\nclass Unit {\n  /** @var int */\n  public $Id;\n\n  /** @var string */\n  public $LeaseDate;\n\n  /** @var string */\n  public $StreetAddress;\n\n  /** @var string */\n  public $UnitNumber;\n\n  /** @var string */\n  public $LeaseTermBeginDate;\n\n  /** @var string */\n  public $LeaseTermEndDate;\n\n  /** @var Resident[] */\n  public $Residents;\n\n  /** @var boolean */\n  public $Renewed;\n\n  /**\n   * @param int $Id\n   * @param string $LeaseDate\n   * @param string $StreetAddress\n   * @param string $UnitNumber\n   * @param string $LeaseTermBeginDate\n   * @param string $LeaseTermEndDate\n   * @param Resident[] $Residents\n   * @param boolean $Renewed\n   * @return Unit\n   */\n  public function __construct($Id, $LeaseDate, $StreetAddress, $UnitNumber, $LeaseTermBeginDate, $LeaseTermEndDate, $Residents, $Renewed) {\n    $this->Id = (int) $Id;\n    $this->LeaseDate = $LeaseDate;\n    $this->StreetAddress = $StreetAddress;\n    $this->UnitNumber = $UnitNumber;\n    $this->LeaseTermBeginDate = $LeaseTermBeginDate;\n    $this->LeaseTermEndDate = $LeaseTermEndDate;\n    $this->Residents = (array) $Residents;\n    $this->Renewed = (bool) $Renewed;\n\n    return $this;\n  }\n}\n?>\n",
					"file": "bluemoon-production/cgi-bin/classes/soap_web.class.php",
					"file_size": 9655,
					"file_write_time": 131443678551414770,
					"settings":
					{
						"buffer_size": 9654,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bluemoon-production/cgi-bin/classes/forms_online.class.php",
					"settings":
					{
						"buffer_size": 143744,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"contents": "; <? die() ?> This will not be sent to browser\n      $dsn = BASE_DIR . \"cgi-bin/database/db\" . ($this->new_db_schema ? \"-new\" : \"\") . \".ini.php\";\n; db.ini.php contains database connection variables\n\n[mysql]\ndsn = db-dev.bluemoonformsdev.com\ndbname = bluemoon\nuser = office\npassword = huitL@c0ch3\nprimary = yes",
					"file": "bluemoon-production/database/dev/admin/db.ini.php",
					"file_size": 210,
					"file_write_time": 131453793532210557,
					"settings":
					{
						"buffer_size": 309,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bluemoon-production/cgi-bin/global.php",
					"settings":
					{
						"buffer_size": 9584,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bluemoon-production/database/dev-aws/sessions/db.ini.php",
					"settings":
					{
						"buffer_size": 210,
						"line_ending": "Windows"
					}
				},
				{
					"file": "bluemoon-production/dev/create_enterprise_test_logins.php",
					"settings":
					{
						"buffer_size": 1286,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bluemoon-production/cgi-bin/classes/admin_enterprise.class.php",
					"settings":
					{
						"buffer_size": 1881,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bluemoon-production/html/admin/migration/update_data.php",
					"settings":
					{
						"buffer_size": 2613,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bluemoon-production/cgi-bin/admin/migration/global.php",
					"settings":
					{
						"buffer_size": 17023,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bluemoon-production/cgi-bin/classes/migrate.class.php",
					"settings":
					{
						"buffer_size": 234875,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "<?\n/**\n * This web service handles Blue Moon Lease API requests from 3rd parties via SOAP\n */\nclass product extends SOAP_Product {\n  use esignTrait;\n  // Class constants\n\n  const MAX_ESIGN_INITIALS_LENGTH = 3;\n\n  const MAX_LEASES_SMALL_OWNER = 50;\n\n  // Class properties\n\n  protected $sess_name = \"BlueMoonFormsOnline\";\n\n  protected $dtd_groups = array(\n    \"STANDARD\",\n    \"RENEWAL\",\n    \"CUSTOM\",\n    \"RESTRICTED\"\n  );\n\n  protected $missing_fields = array();\n\n  protected $restricted_fields = array(\n    \"address\" => array(\n      \"ADDRESS\",\n      \"ADDRESS2\",\n      \"BEDROOM\",\n      \"CITY\",\n      \"OWNER\",\n      \"UNITNUM\",\n      \"UNITNUM2\",\n      \"ZIP\"\n    ),\n    \"guaranty\" => array(\n      \"GUARANTORLASTDATE\",\n      \"GUARANTYINITIALTERM\",\n      \"GUARANTYALLTERMS\"\n    ),\n    \"rent\" => array(\n      \"MONTHLYLEASETERMRENT\",\n      \"RENT\"\n    ),\n    \"term\" => array(\n      \"BEGLEASE\",\n      \"ENDLEASE\"\n    )\n  );\n\n  protected $xml_section_map = array(\n    \"STANDARD\" => array(\n      \"COMMON\",\n      \"OTHER\"\n    )\n  );\n\n  // Class methods\n\n  /**\n   * TAA, NAA, GAA and CAN licenses only - Updates composition of roommates for existing lease record\n   *\n   * @param string $SessionId\n   * @param int $LeaseId\n   * @param string $ResidentToMoveOut\n   * @param string $ResidentToMoveIn\n   * @return boolean\n   */\n  public function AmendRoommates($SessionId, $LeaseId, $ResidentToMoveOut = null, $ResidentToMoveIn = null) {\n    if ($this->TestSessionId($SessionId)) {\n      $assoc = $this->GetAssoc($this->customer_data[\"STATE\"]);\n\n      switch ($assoc) {\n        case \"CAN\":\n        case \"GAA\":\n        case \"NAA\":\n          break;\n        default:\n          throw new SoapFault(\"Sender\", \"This function not supported for \" . $assoc . \" licenses.\");\n      }\n\n      if ($this->dbh->valid_lease_record($this->user_data[\"SERIALNUMBER\"], $LeaseId)) {\n        $signer_info = parse_ini_file($this->GetFilePath(BASE_DIR . \"cgi-bin/forms_online/*/signers.ini.php\", $this->customer_data[\"STATE\"]), true);\n\n        $max_residents = $signer_info[\"RESIDENT\"][\"max\"];\n        $resident_field_prefix = $signer_info[\"RESIDENT\"][\"prefix\"];\n\n        $result = $this->dbh->get_property_number_by_unit($LeaseId);\n\n        if ($result !== false) {\n          $property_number = $result;\n\n          if ($result = $this->dbh->get_property_data($property_number)) {\n            $property_data = $result;\n\n            $db_type = strtolower($property_data[\"DBTYPE\"]);\n\n            if ($this->dbh->get_total_rental_app_records($property_number)) {\n              $move_in_data = array();\n\n              if ($results = $this->dbh->get_move_in_info_by_unit($LeaseId)) {\n                for ($i=0; $i<count($results); $i++) {\n                  $resident_field = $resident_field_prefix . $results[$i][\"RESIDENT\"];\n\n                  $move_in_data[$resident_field] = $results[$i][\"APPLICATION_ID\"];\n                }\n              }\n            }\n          }\n        }\n\n        if ($result = $this->dbh->get_lease_data($LeaseId)) {\n          $lease_data = $result;\n\n          $ResidentToMoveOut = trim($ResidentToMoveOut);\n          $ResidentToMoveIn = trim($ResidentToMoveIn);\n\n          $total_residents = 0;\n\n          for ($i=1; $i<=$max_residents; $i++) {\n            $resident_field = $resident_field_prefix . $i;\n\n            $lease_data[\"OLDRES\" . $i] = null;\n\n            if (trim($lease_data[$resident_field]) !== \"\") {\n              $lease_data[\"OLDRES\" . $i] = trim($lease_data[$resident_field]);\n\n              $total_residents++;\n            }\n            else $lease_data[$resident_field] = null;\n          }\n\n          if ($total_residents) {\n            $ResidentToMoveOut = trim($ResidentToMoveOut);\n            $ResidentToMoveIn = trim($ResidentToMoveIn);\n\n            if (!($ResidentToMoveOut === \"\" && $ResidentToMoveIn === \"\")) {\n              if ($ResidentToMoveOut !== \"\") {\n                if ($total_residents >= 2) {\n                  $old_resident_matched = false;\n\n                  for ($i=1; $i<=$max_residents; $i++) {\n                    $resident_field = $resident_field_prefix . $i;\n\n                    $name = trim($lease_data[$resident_field]);\n\n                    if ($old_resident_matched = strtoupper($ResidentToMoveOut) === strtoupper($name)) {\n                      $lease_data[$resident_field] = null;\n\n                      $total_residents--;\n\n                      if (isset($move_in_data)) {\n                        $move_in_data = array_diff_key($move_in_data, array($resident_field => null));\n                      }\n                      break;\n                    }\n                  }\n\n                  if (!$old_resident_matched) {\n                    throw new SoapFault(\"Sender\", \"Resident to move out [\" . $ResidentToMoveOut . \"] is not listed on lease.\");\n                  }\n                }\n                else {\n                  throw new SoapFault(\"Sender\", \"Cannot move out sole resident. Please create new lease.\");\n                }\n              }\n\n              if ($ResidentToMoveIn !== \"\") {\n                $new_resident_matched = false;\n\n                for ($i=1; $i<=$max_residents; $i++) {\n                  $resident_field = $resident_field_prefix . $i;\n\n                  $name = trim($lease_data[$resident_field]);\n\n                  if ($new_resident_matched = strtoupper($ResidentToMoveIn) === strtoupper($name)) {\n                    break;\n                  }\n                }\n\n                if (!$new_resident_matched) {\n                  $resident_slot_found = false;\n\n                  for ($i=1; $i<=$max_residents; $i++) {\n                    $resident_field = $resident_field_prefix . $i;\n\n                    $name = trim($lease_data[$resident_field]);\n\n                    if ($resident_slot_found = $name === \"\") {\n                      $lease_data[$resident_field] = $ResidentToMoveIn;\n\n                      $total_residents++;\n                      break;\n                    }\n                  }\n\n                  if (!$resident_slot_found) {\n                    throw new SoapFault(\"Sender\", \"Unable to move in resident because lease record already contains maximum allowed residents.\");\n                  }\n                }\n                else {\n                  throw new SoapFault(\"Sender\", \"Resident to move in [\" . $ResidentToMoveIn . \"] is already listed on lease.\");\n                }\n              }\n\n              if ($guarantor_info = $this->dbh->get_guarantor_info_by_unit($LeaseId)) {\n                foreach ($guarantor_info as $info) {\n                  if ($guaranties_signed = isset($info[\"DATESIGNED\"])) {\n                    break;\n                  }\n                }\n\n                if ($guaranties_signed) {\n                  throw new SoapFault(\"Sender\", \"Cannot change composition of residents for lease record with assigned guarantor(s).\");\n                }\n              }\n\n              $result = $this->dbh->save_lease_data($lease_data, $property_number, $move_in_data);\n\n              if ($result !== false) {\n                return true;\n              }\n              else {\n                throw new SoapFault(\"Receiver\", \"Error writing lease data.\");\n              }\n            }\n            else {\n              throw new SoapFault(\"Sender\", \"Must provide name of resident to move out and/or resident to move in.\");\n            }\n          }\n          else {\n            throw new SoapFault(\"Sender\", \"Lease record does not list any current residents.\");\n          }\n        }\n        else {\n          throw new SoapFault(\"Receiver\", \"Unable to locate lease record.\");\n        }\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Invalid LeaseId.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * Creates new lease record\n   * Returns unique LeaseId\n   *\n   * @param string $SessionId\n   * @param string $LeaseXMLData\n   * @param int $PropertyId\n   * @param int $LeaseId\n   * @return int\n   */\n  public function CreateLease($SessionId, $LeaseXMLData, $PropertyId = null, $LeaseId = null) {\n    if ($this->TestSessionId($SessionId)) {\n      if ($LeaseId) {\n        if ($result = is_numeric($LeaseId)) {\n          $result = $this->dbh->get_property_number_by_unit($LeaseId);\n        }\n\n        if ($result !== false) {\n          if (!$PropertyId) {\n            $PropertyId = $result;\n          }\n          else {\n            if ($result !== (int) $PropertyId) {\n              throw new SoapFault(\"Sender\", \"LeaseId is not valid for supplied PropertyId.\");\n            }\n          }\n        }\n        else {\n          throw new SoapFault(\"Sender\", \"Invalid LeaseId.\");\n        }\n      }\n      else $LeaseId = null;\n\n      $valid_property_number = false;\n\n      $properties = $this->dbh->get_properties($this->user_data[\"SERIALNUMBER\"]);\n\n      $i = 0;\n\n      while (!$valid_property_number && $i<count($properties)) {\n        if (!$PropertyId) {\n          $PropertyId = $properties[$i][\"number\"];\n        }\n\n        if ($valid_property_number = (int) $PropertyId === $properties[$i][\"number\"]) {\n          $db_type = strtolower($properties[$i][\"type\"]);\n        }\n\n        $i++;\n      }\n\n      if ($valid_property_number) {\n        $assoc = $this->GetAssoc($this->customer_data[\"STATE\"]);\n\n        if ($this->dbh->get_total_rental_app_records($PropertyId)) {\n          $move_in_data = array();\n        }\n\n        $guarantor_info = array();\n\n        $this->required_fields = array();\n        $this->missing_fields = array();\n\n        $import_data = $this->ParseXML($LeaseXMLData, $db_type);\n\n        switch ($assoc) {\n          case \"TSSA\":\n            break;\n          default:\n            switch ($db_type) {\n              case \"aptdb\":\n                if ($property_data = $this->dbh->get_property_data($PropertyId)) {\n                  if (!array_key_exists(\"ADDRESS\", $import_data[\"STANDARD\"])) {\n                    $import_data[\"STANDARD\"][\"ADDRESS\"] = $property_data[\"ADDRESS\"];\n                  }\n\n                  switch ($assoc) {\n                    case \"UKAA\":\n                      if (!array_key_exists(\"ADDRESS2\", $import_data[\"STANDARD\"])) {\n                        $import_data[\"STANDARD\"][\"ADDRESS2\"] = $property_data[\"ADDRESS2\"];\n                      }\n                      break;\n                  }\n                }\n                break;\n            }\n            break;\n        }\n\n        $duplicate_lease_option = $this->customer_data[\"IMPORTLEASEOPTION\"] == 1;\n\n        if ($new_record = !isset($LeaseId)) {\n          if (!$new_record = $duplicate_lease_option) {\n            if (!$new_record = (string) $import_data[\"STANDARD\"][\"UNITNUM\"] === \"\" && (string) $import_data[\"STANDARD\"][\"ADDRESS\"] === \"\") {\n              $duplicate_lease_records = $this->dbh->get_duplicate_lease_records($import_data[\"STANDARD\"][\"UNITNUM\"], $import_data[\"STANDARD\"][\"ADDRESS\"], $PropertyId);\n\n              $new_record = empty($duplicate_lease_records);\n            }\n\n            if (!$new_record) {\n              $LeaseId = $duplicate_lease_records[0];\n            }\n          }\n        }\n        else {\n          if ($result = $this->dbh->get_lease_data($LeaseId)) {\n            $old_lease_data = $result;\n\n            if (isset($old_lease_data[\"PRELEASELINK_ID\"])) {\n              if ($LeaseId > $old_lease_data[\"PRELEASELINK_ID\"]) {\n                throw new SoapFault(\"Sender\", \"Supplied LeaseId correlates to pre-lease record, which cannot be overwritten until it is activated.\");\n              }\n              else {\n                throw new SoapFault(\"Sender\", \"Supplied LeaseId correlates to record which has been pre-leased and cannot be overwritten unless other record [LeaseId: \" . $old_lease_data[\"PRELEASELINK_ID\"] . \"] is deleted.\");\n              }\n            }\n          }\n        }\n\n        if ($new_record) {\n          switch ($db_type) {\n            case \"aptdb\":\n              if ($this->customer_data[\"SOFTWARETYPE\"] == 1) {\n                $total_records = $this->dbh->get_total_lease_records($PropertyId, true);\n\n                if ($total_records >= self::MAX_LEASES_SMALL_OWNER) {\n                  throw new SoapFault(\"Sender\", \"Product license prohibits total active records from exceeding \" . self::MAX_LEASES_SMALL_OWNER . \".\");\n                }\n              }\n              break;\n          }\n        }\n\n        $lease_data = array();\n\n        foreach ($this->dtd_groups as $group) {\n          switch ($group) {\n            case \"STANDARD\":\n              if ($result = $this->dbh->get_new_lease_data_by_unit($PropertyId, $db_type, $LeaseId)) {\n                $lease_data[$group] = $result;\n\n                foreach ($lease_data[$group] as $key => $value) {\n                  if (!array_key_exists($key, $import_data[$group])) {\n                    if ((string) $value !== \"\") {\n                      $import_data[$group][$key] = $value;\n                    }\n                  }\n\n                  $lease_data[$group][$key] = null;\n                }\n\n                $lc = new lease_calcs($lease_data[$group], $this->customer_data);\n\n                $lc->set_lease_fields($import_data[$group]);\n\n                $lc->set_index_fields();\n\n                if (isset($lease_data[$group][\"BEGLEASE\"], $lease_data[$group][\"ENDLEASE\"])) {\n                  if (strtotime($lease_data[$group][\"ENDLEASE\"]) <= strtotime($lease_data[$group][\"BEGLEASE\"])) {\n                    throw new SoapFault(\"Sender\", \"Ending date must fall after start of lease term.\");\n                  }\n                }\n\n                switch ($assoc) {\n                  case \"GAA\":\n                    if (isset($lease_data[$group][\"PARKBEG\"], $lease_data[$group][\"PARKEND\"])) {\n                      if (strtotime($lease_data[$group][\"PARKEND\"]) <= strtotime($lease_data[$group][\"PARKBEG\"])) {\n                        throw new SoapFault(\"Sender\", \"Ending date must fall after start of parking lease term.\");\n                      }\n                    }\n\n                    if (isset($lease_data[$group][\"STORAGEBEG\"], $lease_data[$group][\"STORAGEEND\"])) {\n                      if (strtotime($lease_data[$group][\"STORAGEEND\"]) <= strtotime($lease_data[$group][\"STORAGEBEG\"])) {\n                        throw new SoapFault(\"Sender\", \"Ending date must fall after start of storage area lease term.\");\n                      }\n                    }\n\n                    if (isset($lease_data[$group][\"WASHERBEG\"], $lease_data[$group][\"WASHEREND\"])) {\n                      if (strtotime($lease_data[$group][\"WASHEREND\"]) <= strtotime($lease_data[$group][\"WASHERBEG\"])) {\n                        throw new SoapFault(\"Sender\", \"Ending date must fall after start of washer/dryer lease term.\");\n                      }\n                    }\n                    break;\n                }\n              }\n              break;\n            case \"CUSTOM\":\n              if ($result = $this->dbh->get_new_member_field_data($this->customer_data[\"COMPANYNUMBER\"], $PropertyId)) {\n                $lease_data[$group] = array_merge($result, $import_data[$group]);\n              }\n              break;\n          }\n        }\n\n        $result = $this->dbh->save_lease_data($lease_data[\"STANDARD\"], $PropertyId, $move_in_data, $guarantor_info);\n\n        if ($result !== false) {\n          $lease_id = $result;\n\n          if (!empty($lease_data[\"CUSTOM\"])) {\n            $this->dbh->save_member_field_data($this->customer_data[\"COMPANYNUMBER\"], $lease_id, $lease_data[\"CUSTOM\"]);\n          }\n\n          return $lease_id;\n        }\n        else {\n          throw new SoapFault(\"Receiver\", \"Error writing lease data.\");\n        }\n      }\n      else {\n        if (!$LeaseId) {\n          throw new SoapFault(\"Sender\", \"Invalid PropertyId.\");\n        }\n        else {\n          throw new SoapFault(\"Sender\", \"PropertyId inferred from supplied LeaseId is not valid for this license.\");\n        }\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * Deletes electronic signature transaction\n   *\n   * @param string $SessionId\n   * @param int $EsignatureId\n   * @return boolean\n   */\n  public function DeleteEsignature($SessionId, $EsignatureId) {\n    if ($this->TestSessionId($SessionId)) {\n      if (isset($this->customer_data[\"ESIGN\"])) {\n        $valid_esignature_id = false;\n\n        $result = $this->dbh->get_esign_data($EsignatureId);\n\n        if ($result !== false) {\n          $esign_data = $result;\n\n          $properties = $this->dbh->get_properties($this->user_data[\"SERIALNUMBER\"]);\n\n          $i = 0;\n\n          while (!$valid_esignature_id && $i<count($properties)) {\n            $valid_esignature_id = $esign_data[\"PROPERTYNUMBER\"] === $properties[$i][\"number\"];\n\n            $i++;\n          }\n        }\n\n        if ($valid_esignature_id) {\n          if (!($this->user_data[\"PRIV\"] === \"3\" && ($this->user_data[\"NOMANAGEESIGN\"] === \"T\" || $this->user_data[\"NODELETE\"] === \"T\"))) {\n            if ($result = $this->dbh->delete_esign_record($EsignatureId)) {\n              if ($esign_signers = $this->dbh->get_all_esign_signers($EsignatureId)) {\n                $this->trans_dbh = new transactions();\n\n                $this->trans_dbh->delete_esign_pdfs($esign_signers);\n              }\n            }\n\n            return $result;\n          }\n          else {\n            throw new SoapFault(\"Sender\", \"Permission denied.\");\n          }\n        }\n        else {\n          throw new SoapFault(\"Sender\", \"Invalid EsignatureId.\");\n        }\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Electronic signature feature is not enabled for this license.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * Deletes lease record\n   *\n   * @param string $SessionId\n   * @param int $LeaseId\n   * @return boolean\n   */\n  public function DeleteLease($SessionId, $LeaseId) {\n    if ($this->TestSessionId($SessionId)) {\n      if ($this->dbh->valid_lease_record($this->user_data[\"SERIALNUMBER\"], $LeaseId)) {\n        if (!($this->user_data[\"PRIV\"] === \"3\" && $this->user_data[\"NODELETE\"] === \"T\")) {\n          $result = $this->dbh->delete_lease_records(array($LeaseId));\n\n          if ($result !== false) {\n            return $result;\n          }\n          else {\n            throw new SoapFault(\"Sender\", \"Error deleting lease record.\");\n          }\n        }\n        else {\n          throw new SoapFault(\"Sender\", \"Permission denied.\");\n        }\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Invalid LeaseId.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * Modifies an existing lease record\n   *\n   * @param string $SessionId\n   * @param int $LeaseId\n   * @param string $LeaseXMLData\n   * @return boolean\n   */\n  public function EditLease($SessionId, $LeaseId, $LeaseXMLData) {\n    if ($this->TestSessionId($SessionId)) {\n      if ($this->dbh->valid_lease_record($this->user_data[\"SERIALNUMBER\"], $LeaseId)) {\n        $signer_info = parse_ini_file($this->GetFilePath(BASE_DIR . \"cgi-bin/forms_online/*/signers.ini.php\", $this->customer_data[\"STATE\"]), true);\n\n        $max_residents = $signer_info[\"RESIDENT\"][\"max\"];\n        $resident_field_prefix = $signer_info[\"RESIDENT\"][\"prefix\"];\n\n        $result = $this->dbh->get_property_number_by_unit($LeaseId);\n\n        if ($result !== false) {\n          $property_number = $result;\n\n          if ($result = $this->dbh->get_property_data($property_number)) {\n            $property_data = $result;\n\n            $db_type = strtolower($property_data[\"DBTYPE\"]);\n\n            if ($this->dbh->get_total_rental_app_records($property_number)) {\n              $move_in_data = array();\n\n              if ($results = $this->dbh->get_move_in_info_by_unit($LeaseId)) {\n                for ($i=0; $i<count($results); $i++) {\n                  $resident_field = $resident_field_prefix . $results[$i][\"RESIDENT\"];\n\n                  $move_in_data[$resident_field] = $results[$i][\"APPLICATION_ID\"];\n                }\n              }\n            }\n          }\n        }\n\n        $this->required_fields = array();\n        $this->missing_fields = array();\n\n        $import_data = $this->ParseXML($LeaseXMLData, $db_type);\n\n        $lease_data = array();\n\n        foreach ($this->dtd_groups as $group) {\n          switch ($group) {\n            case \"STANDARD\":\n              if ($result = $this->dbh->get_lease_data($LeaseId)) {\n                $lease_data[$group] = $result;\n\n                require_once(BASE_DIR . \"cgi-bin/forms_online/date.php\");\n\n                if ($lease_begin_date = valid_format(DATE_FORMAT_TYPE, $lease_data[$group][\"BEGLEASE\"])) {\n                  $lease_data[$group][\"BEGLEASE\"] = $lease_begin_date;\n                }\n                else {\n                  $lease_data[$group][\"BEGLEASE\"] = null;\n                }\n\n                if ($lease_end_date = valid_format(DATE_FORMAT_TYPE, $lease_data[$group][\"ENDLEASE\"])) {\n                  $lease_data[$group][\"ENDLEASE\"] = $lease_end_date;\n                }\n                else {\n                  $lease_data[$group][\"ENDLEASE\"] = null;\n                }\n\n                $assoc = $this->GetAssoc($this->customer_data[\"STATE\"]);\n\n                switch ($assoc) {\n                  case \"GAA\":\n                    if ($parking_lease_begin_date = valid_format(DATE_FORMAT_TYPE, $lease_data[$group][\"PARKBEG\"])) {\n                      $lease_data[$group][\"PARKBEG\"] = $parking_lease_begin_date;\n                    }\n                    else {\n                      $lease_data[$group][\"PARKBEG\"] = null;\n                    }\n\n                    if ($parking_lease_end_date = valid_format(DATE_FORMAT_TYPE, $lease_data[$group][\"PARKEND\"])) {\n                      $lease_data[$group][\"PARKEND\"] = $parking_lease_end_date;\n                    }\n                    else {\n                      $lease_data[$group][\"PARKEND\"] = null;\n                    }\n\n                    if ($storage_lease_begin_date = valid_format(DATE_FORMAT_TYPE, $lease_data[$group][\"STORAGEBEG\"])) {\n                      $lease_data[$group][\"STORAGEBEG\"] = $storage_lease_begin_date;\n                    }\n                    else {\n                      $lease_data[$group][\"STORAGEBEG\"] = null;\n                    }\n\n                    if ($storage_lease_end_date = valid_format(DATE_FORMAT_TYPE, $lease_data[$group][\"STORAGEEND\"])) {\n                      $lease_data[$group][\"STORAGEEND\"] = $storage_lease_end_date;\n                    }\n                    else {\n                      $lease_data[$group][\"STORAGEEND\"] = null;\n                    }\n\n                    if ($washer_dryer_lease_begin_date = valid_format(DATE_FORMAT_TYPE, $lease_data[$group][\"WASHERBEG\"])) {\n                      $lease_data[$group][\"WASHERBEG\"] = $washer_dryer_lease_begin_date;\n                    }\n                    else {\n                      $lease_data[$group][\"WASHERBEG\"] = null;\n                    }\n\n                    if ($washer_dryer_lease_end_date = valid_format(DATE_FORMAT_TYPE, $lease_data[$group][\"WASHEREND\"])) {\n                      $lease_data[$group][\"WASHEREND\"] = $washer_dryer_lease_end_date;\n                    }\n                    else {\n                      $lease_data[$group][\"WASHEREND\"] = null;\n                    }\n                  case \"TAA\":\n                    if ((string) $lease_data[$group][\"RENEWED\"] !== \"\") {\n                      $lease_data[$group][\"RENEWED\"] = null;\n                    }\n                    break;\n                }\n\n                $guarantor_info = $this->dbh->get_guarantor_info_by_unit($LeaseId);\n\n                if ($linked_record = isset($lease_data[$group][\"PRELEASELINK_ID\"])) {\n                  $prelease_record = $LeaseId > $lease_data[$group][\"PRELEASELINK_ID\"];\n                }\n                else $prelease_record = false;\n\n                $preleased = $linked_record && !$prelease_record;\n\n                if ($lease_executed = array_key_exists(\"PRINTLEASE\", $lease_data[$group])) {\n                  if ($lease_executed = !((string) $lease_data[$group][\"PRINTLEASE\"] === \"\" || (string) $lease_data[$group][\"BEGLEASE\"] === \"\")) {\n                    $lease_executed = time() >= strtotime($lease_data[$group][\"BEGLEASE\"] . \" +1 day\");\n                  }\n                }\n\n                $residents_changed = false;\n\n                for ($i=1; $i<=$max_residents; $i++) {\n                  $resident_field = $resident_field_prefix . $i;\n\n                  if (array_key_exists($resident_field, $import_data[$group])) {\n                    if (strtoupper($import_data[$group][$resident_field]) !== strtoupper($lease_data[$group][$resident_field])) {\n                      if (!empty($guarantor_info)) {\n                        throw new SoapFault(\"Sender\", \"Cannot change composition of residents for lease record with assigned guarantor(s).\");\n                      }\n                      else if ($lease_executed) {\n                        throw new SoapFault(\"Sender\", \"Cannot change composition of residents because lease term has already started and lease documents have been generated.\");\n                      }\n\n                      $residents_changed = true;\n                    }\n                  }\n                }\n\n                if ($residents_changed) {\n                  for ($i=1; $i<=$max_residents; $i++) {\n                    if (isset($lease_data[$group][\"OLDRES\" . $i])) {\n                      $lease_data[$group][\"OLDRES\" . $i] = null;\n                    }\n                  }\n                }\n\n                foreach ($this->restricted_fields as $type => $fields) {\n                  foreach ($fields as $name) {\n                    if (array_key_exists($name, $import_data[$group])) {\n                      if (strtoupper($import_data[$group][$name]) !== strtoupper($lease_data[$group][$name])) {\n                        switch ($type) {\n                          case \"rent\":\n                            if (!empty($guarantor_info)) {\n                              throw new SoapFault(\"Sender\", \"Cannot modify monthly rent amount for lease record with assigned guarantor(s).\");\n                            }\n                            else if ($lease_executed) {\n                              throw new SoapFault(\"Sender\", \"Cannot modify monthly rent amount because lease term has already started and lease documents have been generated.\");\n                            }\n                            break;\n                          case \"term\":\n                            if (!empty($guarantor_info)) {\n                              throw new SoapFault(\"Sender\", \"Cannot modify lease term for lease record with assigned guarantor(s).\");\n                            }\n                            else if ($lease_executed) {\n                              throw new SoapFault(\"Sender\", \"Cannot modify lease term because lease term has already started and lease documents have been generated.\");\n                            }\n\n                            if ((string) $lease_data[$group][\"RENEWED\"] !== \"\") {\n                              $lease_data[$group][\"RENEWED\"] = null;\n                            }\n                            break;\n                          default:\n                            switch ($type) {\n                              case \"address\":\n                                if (!empty($guarantor_info)) {\n                                  throw new SoapFault(\"Sender\", \"Cannot modify address information for lease record with assigned guarantor(s).\");\n                                }\n                                else if ($preleased) {\n                                  throw new SoapFault(\"Sender\", \"Cannot modify address information for record which has been pre-leased.\");\n                                }\n                                else if ($prelease_record) {\n                                  throw new SoapFault(\"Sender\", \"Cannot modify address information for pre-lease record.\");\n                                }\n                                else if ($lease_executed) {\n                                  throw new SoapFault(\"Sender\", \"Cannot modify address information because lease term has already started and lease documents have been generated.\");\n                                }\n                                break;\n                              case \"guaranty\":\n                                if (!empty($guarantor_info)) {\n                                  throw new SoapFault(\"Sender\", \"Unable to modify lease guaranty term because guarantor(s) have already been assigned to lease record.\");\n                                }\n                                if (!empty($lease_executed)) {\n                                  throw new SoapFault(\"Sender\", \"Unable to modify lease guaranty term because lease term has already started and lease documents have been generated.\");\n                                }\n                                break;\n                            }\n\n                            if ((string) $lease_data[$group][\"RENEWED\"] !== \"\") {\n                              $lease_data[$group][\"RENEWED\"] = null;\n                            }\n                            break;\n                        }\n                      }\n                    }\n                  }\n                }\n\n                $lc = new lease_calcs($lease_data[$group], $this->customer_data);\n\n                $lc->set_lease_fields($import_data[$group]);\n\n                $lc->set_index_fields();\n\n                if (isset($lease_data[$group][\"BEGLEASE\"], $lease_data[$group][\"ENDLEASE\"])) {\n                  if (strtotime($lease_data[$group][\"ENDLEASE\"]) <= strtotime($lease_data[$group][\"BEGLEASE\"])) {\n                    throw new SoapFault(\"Sender\", \"Ending date must fall after start of lease term.\");\n                  }\n                }\n\n                switch ($assoc) {\n                  case \"AANC\":\n                    if ($old_lease_end_date = valid_format(DATE_FORMAT_TYPE, $lease_data[$group][\"OLDEND\"])) {\n                      $lease_data[$group][\"OLDEND\"] = $old_lease_end_date;\n                    }\n                    else $lease_data[$group][\"OLDEND\"] = null;\n                    break;\n                  case \"GAA\":\n                    if (isset($lease_data[$group][\"PARKBEG\"], $lease_data[$group][\"PARKEND\"])) {\n                      if (strtotime($lease_data[$group][\"PARKEND\"]) <= strtotime($lease_data[$group][\"PARKBEG\"])) {\n                        throw new SoapFault(\"Sender\", \"Ending date must fall after start of parking lease term.\");\n                      }\n                    }\n\n                    if (isset($lease_data[$group][\"STORAGEBEG\"], $lease_data[$group][\"STORAGEEND\"])) {\n                      if (strtotime($lease_data[$group][\"STORAGEEND\"]) <= strtotime($lease_data[$group][\"STORAGEBEG\"])) {\n                        throw new SoapFault(\"Sender\", \"Ending date must fall after start of storage area lease term.\");\n                      }\n                    }\n\n                    if (isset($lease_data[$group][\"WASHERBEG\"], $lease_data[$group][\"WASHEREND\"])) {\n                      if (strtotime($lease_data[$group][\"WASHEREND\"]) <= strtotime($lease_data[$group][\"WASHERBEG\"])) {\n                        throw new SoapFault(\"Sender\", \"Ending date must fall after start of washer/dryer lease term.\");\n                      }\n                    }\n                    break;\n                  case \"TSSA\":\n                    break;\n                  default:\n                    if ($old_lease_begin_date = valid_format(DATE_FORMAT_TYPE, $lease_data[$group][\"OLDBEG\"])) {\n                      $lease_data[$group][\"OLDBEG\"] = $old_lease_begin_date;\n                    }\n                    else $lease_data[$group][\"OLDBEG\"] = null;\n                    break;\n                }\n\n                if (isset($move_in_data)) {\n                  $new_move_in_data = array();\n\n                  foreach ($move_in_data as $resident_field => $applicant_id) {\n                    if ($new_resident = array_key_exists($resident_field, $import_data[$group])) {\n                      $new_resident = $import_data[$group][$resident_field] !== $lease_data[$group][$resident_field];\n                    }\n\n                    if (!$new_resident) {\n                      $new_move_in_data[$resident_field] = $applicant_id;\n                    }\n                  }\n                }\n              }\n              break;\n            case \"CUSTOM\":\n              if ($result = $this->dbh->get_member_field_data($this->customer_data[\"COMPANYNUMBER\"], $LeaseId)) {\n                $lease_data[$group] = array_merge($result, $import_data[$group]);\n              }\n              break;\n          }\n        }\n\n        $result = $this->dbh->save_lease_data($lease_data[\"STANDARD\"], $property_number, $new_move_in_data);\n\n        if ($result !== false) {\n          $lease_id = $result;\n\n          if (!empty($lease_data[\"CUSTOM\"])) {\n            $this->dbh->save_member_field_data($this->customer_data[\"COMPANYNUMBER\"], $lease_id, $lease_data[\"CUSTOM\"]);\n          }\n\n          return true;\n        }\n        else {\n          throw new SoapFault(\"Receiver\", \"Error writing lease data.\");\n        }\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Invalid LeaseId.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * TAA and GAA licenses only - Modifies renewal-specific data for an existing lease record\n   *\n   * @param string $SessionId\n   * @param int $LeaseId\n   * @param string $RenewalXMLData\n   * @return boolean\n   */\n  public function EditRenewal($SessionId, $LeaseId, $RenewalXMLData) {\n    if ($this->TestSessionId($SessionId)) {\n      $assoc = $this->GetAssoc($this->customer_data[\"STATE\"]);\n\n      switch ($this->customer_data[\"STATE\"]) {\n        case \"GAA\":\n        case \"TAA\":\n          break;\n        default:\n          throw new SoapFault(\"Sender\", \"This function not supported for \" . $assoc . \" licenses.\");\n      }\n\n      if ($this->dbh->valid_lease_record($this->user_data[\"SERIALNUMBER\"], $LeaseId)) {\n        $result = $this->dbh->get_property_number_by_unit($LeaseId);\n\n        if ($result !== false) {\n          $property_number = $result;\n\n          if ($result = $this->dbh->get_property_data($property_number)) {\n            $property_data = $result;\n\n            $db_type = strtolower($property_data[\"DBTYPE\"]);\n          }\n        }\n\n        $this->required_fields = array();\n        $this->missing_fields = array();\n\n        $import_data = $this->ParseXML($RenewalXMLData, $db_type, true);\n\n        $lease_data = array();\n\n        foreach ($this->dtd_groups as $group) {\n          switch ($group) {\n            case \"RENEWAL\":\n              if ($result = $this->dbh->get_lease_data($LeaseId)) {\n                $lease_data[$group] = $result;\n\n                if ((string) $lease_data[$group][\"RENEWED\"] === \"\") {\n                  throw new SoapFault(\"Sender\", \"Lease record has not been renewed.\");\n                }\n\n                require_once(BASE_DIR . \"cgi-bin/forms_online/date.php\");\n\n                if ($lease_begin_date = valid_format(DATE_FORMAT_TYPE, $lease_data[$group][\"BEGLEASE\"])) {\n                  $lease_data[$group][\"BEGLEASE\"] = $lease_begin_date;\n                }\n                else {\n                  $lease_data[$group][\"BEGLEASE\"] = null;\n                }\n\n                if ($lease_end_date = valid_format(DATE_FORMAT_TYPE, $lease_data[$group][\"ENDLEASE\"])) {\n                  $lease_data[$group][\"ENDLEASE\"] = $lease_end_date;\n                }\n                else {\n                  $lease_data[$group][\"ENDLEASE\"] = null;\n                }\n\n                if ($lease_executed = array_key_exists(\"PRINTLEASE\", $lease_data[$group])) {\n                  if ($lease_executed = !((string) $lease_data[$group][\"PRINTLEASE\"] === \"\" || (string) $lease_data[$group][\"BEGLEASE\"] === \"\")) {\n                    $lease_executed = time() >= strtotime($lease_data[$group][\"BEGLEASE\"] . \" +1 day\");\n                  }\n                }\n\n                foreach ($this->restricted_fields as $type => $fields) {\n                  foreach ($fields as $name) {\n                    if (array_key_exists($name, $import_data[$group])) {\n                      if (strtoupper($import_data[$group][$name]) !== strtoupper($lease_data[$group][$name])) {\n                        switch ($type) {\n                          case \"term\":\n                            if ($lease_executed) {\n                              throw new SoapFault(\"Sender\", \"Cannot modify lease term because lease term has already started and lease documents have been generated.\");\n                            }\n                            break;\n                        }\n                      }\n                    }\n                  }\n                }\n\n                $lc = new lease_calcs($lease_data[$group], $this->customer_data);\n\n                $lc->set_lease_fields($import_data[$group]);\n\n                $lc->set_index_fields();\n\n                if (isset($lease_data[$group][\"BEGLEASE\"], $lease_data[$group][\"ENDLEASE\"])) {\n                  if (strtotime($lease_data[$group][\"ENDLEASE\"]) <= strtotime($lease_data[$group][\"BEGLEASE\"])) {\n                    throw new SoapFault(\"Sender\", \"Ending date must fall after start of renewal term.\");\n                  }\n                }\n\n                switch ($assoc) {\n                  case \"GAA\":\n                    break;\n                  default:\n                    if ($old_lease_begin_date = valid_format(DATE_FORMAT_TYPE, $lease_data[$group][\"OLDBEG\"])) {\n                      $lease_data[$group][\"OLDBEG\"] = $old_lease_begin_date;\n                    }\n                    else $lease_data[$group][\"OLDBEG\"] = null;\n                    break;\n                }\n              }\n              break;\n            case \"CUSTOM\":\n              if ($result = $this->dbh->get_member_field_data($this->customer_data[\"COMPANYNUMBER\"], $LeaseId)) {\n                $lease_data[$group] = array_merge($result, $import_data[$group]);\n              }\n              break;\n          }\n        }\n\n        $result = $this->dbh->save_lease_data($lease_data[\"RENEWAL\"], $property_number);\n\n        if ($result !== false) {\n          $lease_id = $result;\n\n          if (!empty($lease_data[\"CUSTOM\"])) {\n            $this->dbh->save_member_field_data($this->customer_data[\"COMPANYNUMBER\"], $lease_id, $lease_data[\"CUSTOM\"]);\n          }\n\n          return true;\n        }\n        else {\n          throw new SoapFault(\"Receiver\", \"Error writing lease data.\");\n        }\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Invalid LeaseId.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * Apply electronic signature of Owner/Rep to archived lease document\n   *\n   * @param string $SessionId\n   * @param int $EsignatureId\n   * @param string $OwnerRepSignature\n   * @param string $OwnerRepInitials\n   * @return boolean\n   */\n  public function ExecuteLease($SessionId, $EsignatureId, $OwnerRepSignature, $OwnerRepInitials = null) {\n    if ($this->TestSessionId($SessionId)) {\n      if (isset($this->customer_data[\"ESIGN\"])) {\n        $valid_esignature_id = false;\n\n        $result = $this->dbh->get_esign_data($EsignatureId);\n\n        if ($result !== false) {\n          $esign_data = $result;\n\n          $properties = $this->dbh->get_properties($this->user_data[\"SERIALNUMBER\"]);\n\n          $i = 0;\n\n          while (!$valid_esignature_id && $i<count($properties)) {\n            if ($valid_esignature_id = $esign_data[\"PROPERTYNUMBER\"] === $properties[$i][\"number\"]) {\n              $property_number = $esign_data[\"PROPERTYNUMBER\"];\n\n              if ($result = $this->dbh->get_property_data($property_number)) {\n                $property_data = $result;\n\n                $db_type = strtolower($property_data[\"DBTYPE\"]);\n              }\n            }\n\n            $i++;\n          }\n        }\n\n        if ($valid_esignature_id) {\n          $new_esignature = $this->dbh->test_new_esignature();\n\n          if (!($this->user_data[\"PRIV\"] === \"3\" && $this->user_data[\"NOMANAGEESIGN\"] === \"T\")) {\n            $OwnerRepSignature = trim($OwnerRepSignature);\n\n            if ($OwnerRepSignature !== \"\") {\n              $OwnerRepInitials = trim($OwnerRepInitials);\n\n              if ($OwnerRepInitials !== \"\") {\n                if (strlen($OwnerRepInitials) <= self::MAX_ESIGN_INITIALS_LENGTH) {\n                  $OwnerRepInitials = strtoupper($OwnerRepInitials);\n                }\n                else {\n                  throw new SoapFault(\"Sender\", \"OwnerRepInitials exceeds \" . self::MAX_ESIGN_INITIALS_LENGTH . \"-character limit.\");\n                }\n              }\n              else {\n                $full_name = text::parse_name($OwnerRepSignature);\n\n                if ((string) $full_name[\"first\"] !== \"\") {\n                  $OwnerRepInitials .= strtoupper(substr($full_name[\"first\"], 0, 1));\n                }\n\n                if ((string) $full_name[\"last\"] !== \"\") {\n                  $OwnerRepInitials .= strtoupper(substr($full_name[\"last\"], 0, 1));\n                }\n              }\n\n              if ($OwnerRepInitials !== \"\") {\n                $current_timestamp = time();\n\n                $exp_timestamp = strtotime(date(\"m/d/Y\", strtotime($esign_data[\"DATEINITIATED\"])) . \" +\" . (ESIGN_MAX_DAYS + 1) . \" days\");\n\n                $transaction_active = $current_timestamp < $exp_timestamp;\n\n                if ($result = $this->dbh->get_all_esign_signers($EsignatureId)) {\n                  $esign_signers = $result;\n\n                  $lease_key = $this->GenerateEsignatureKey($EsignatureId, \"OWNER\");\n\n                  if (in_array($lease_key, $esign_signers)) {\n                    $result = $this->dbh->get_esign_signer_data($lease_key);\n\n                    if ($result !== false) {\n                      $esign_owner_data = $result;\n\n                      $new_esignature = $new_esignature && isset($esign_owner_data[\"FORMPAGES\"]);\n\n                      if (!isset($esign_owner_data[\"DATESIGNED\"])) {\n                        if ($transaction_active) {\n                          $renewal = $esign_data[\"RENEWAL\"] === \"T\";\n\n                          $assoc = $this->GetAssoc($this->customer_data[\"STATE\"]);\n\n                          $esign_signer_info = array();\n                          $esign_signer_types = array();\n\n                          $signer_info = parse_ini_file($this->GetFilePath(BASE_DIR . \"cgi-bin/forms_online/*/signers.ini.php\", $this->customer_data[\"STATE\"]), true);\n\n                          $first_signer_signatures = array();\n\n                          foreach ($signer_info as $type => $info) {\n                            for ($i=1; $i<=$info[\"max\"]; $i++) {\n                              $signer_field = $info[\"prefix\"] . $i;\n\n                              $signer_key = $this->GenerateEsignatureKey($EsignatureId, $signer_field);\n\n                              if (in_array($signer_key, $esign_signers)) {\n                                if ($result = $this->dbh->get_esign_signer_data($signer_key)) {\n                                  $esign_signer_info[$signer_field] = $result;\n\n                                  $esign_signer_types[$signer_key] = $type;\n\n                                  switch ($esign_signer_types[$signer_key]) {\n                                    case \"RESIDENT\":\n                                      if (isset($esign_signer_info[$signer_field][\"DATESIGNED\"])) {\n                                        if ($new_esignature) {\n                                          // Fetch E-signature history data to check that all signatures have been collected\n                                          if ($result = $this->dbh->get_esign_signer_history($signer_key)) {\n                                            $esign_signer_history = $result;\n\n                                            $signer_field_root = \"(?:\" . preg_quote($signer_field) . \"|APPLICANT)\";\n\n                                            $esign_field_pattern = $this->GetEsignFieldPattern($signer_field, $signer_field_root);\n\n                                            foreach ($esign_signer_history as $form_id => $signature_fields) {\n                                              // Initialize array to track signature status for fields on current form\n                                              $signatures = array();\n\n                                              foreach ($signature_fields as $field_name => $field_info) {\n                                                $field_signed = isset($field_info[\"DATESIGNED\"]);\n\n                                                // Because some fields have suffix notation that denotes mutex relationships,\n                                                // we will track signature status by the root field name (the name minus the suffix)\n                                                if (preg_match($esign_field_pattern, $field_name, $matches)) {\n                                                  $esign_field_name_root = $matches[1];\n\n                                                  // Does the root field name represent an item that ONLY the first signer is required to sign?\n                                                  if (isset($matches[2])) {  // Yes\n                                                    // Has this root field name been indexed yet?\n                                                    if (array_key_exists($esign_field_name_root, $first_signer_signatures)) {  // Yes\n                                                      // Since root field name has been indexed previously, we can assume field is part of mutex group\n                                                      if (!$first_signer_signatures[$esign_field_name_root]) {  // We only set status if current value indicates no other field in mutex group has been signed\n                                                        $first_signer_signatures[$esign_field_name_root] = $field_signed;\n                                                      }\n                                                    }\n                                                    else {  // No\n                                                      // Since root field name has not been indexed previously, we initialize field value with signature status\n                                                      $first_signer_signatures[$esign_field_name_root] = $field_signed;\n                                                    }\n                                                  }\n                                                  else {  // No\n                                                    // Has this root field name been indexed yet?\n                                                    if (array_key_exists($esign_field_name_root, $signatures)) {  // Yes\n                                                      // Since root field name has been indexed previously, we can assume field is part of mutex group\n                                                      if (!$signatures[$esign_field_name_root]) {  // We only set status if current value indicates no other field in mutex group has been signed\n                                                        $signatures[$esign_field_name_root] = $field_signed;\n                                                      }\n                                                    }\n                                                    else {  // No\n                                                      // Since root field name has not been indexed previously, we initialize field value with signature status\n                                                      $signatures[$esign_field_name_root] = $field_signed;\n                                                    }\n                                                  }\n                                                }\n                                              }\n\n                                              // Iterate thru array indexed by root field name to see if any signatures are missing\n                                              foreach ($signatures as $field_signed) {\n                                                if (!$field_signed) {  // Signature missing\n                                                  throw new SoapFault(\"Receiver\", \"Form [\" . $form_id . \"] is missing one or more signatures for resident [\" . $esign_signer_info[$signer_field][\"NAME\"] . \"].\", null, \"We are unable to execute this document. One or more signatures are unavailable on Lease documents. Please contact Blue Moon Software at 1-800-772-1004 for assistance.\");\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                      else {\n                                        throw new SoapFault(\"Sender\", \"Electronic signature not collected for resident [\" . $esign_signer_info[$signer_field][\"NAME\"] . \"].\");\n                                      }\n                                      break;\n                                  }\n                                }\n                              }\n                            }\n                          }\n\n                          if ($new_esignature) {\n                            // Iterate thru array of first-signer-only items indexed by root field name to see if any signatures are missing\n                            foreach ($first_signer_signatures as $field_signed) {\n                              if (!$field_signed) {  // Signature missing\n                                throw new SoapFault(\"Receiver\", \"Form [\" . $form_id . \"] is missing one or more signatures for first signer.\", null, \"We are unable to execute this document. One or more signatures are unavailable on Lease documents. Please contact Blue Moon Software at 1-800-772-1004 for assistance.\");\n                              }\n                            }\n\n                            $target = \"https://\" . NEW_HOST_NAME . \"/esignature/event/document/executed/\" . rawurlencode($EsignatureId) . \"/signature/\" . rawurlencode($OwnerRepSignature) . \"/initials/\" . rawurlencode($OwnerRepInitials) . \"/session/\" . rawurlencode($SessionId);\n\n                            if ($result = $this->SignalPortal($target)) {\n                              $this->__construct();  // Reset database connection to resync transaction visibility\n\n                              $this->dbh->set_product_state($this->customer_data[\"STATE\"]);\n\n                              $result = $this->dbh->get_esign_signer_data($lease_key);\n\n                              if ($result !== false) {\n                                $esign_owner_data = $result;\n                              }\n                              else {\n                                throw new SoapFault(\"Receiver\", \"Unable to refresh owner information.\");\n                              }\n                            }\n                            else {\n                              throw new SoapFault(\"Receiver\", \"Error encountered in E-signature engine.\");\n                            }\n                          }\n\n                          $new_esign_owner_data = $esign_owner_data;\n\n                          $new_esign_owner_data[\"DATESIGNED\"] = date(\"Y-m-d H:i:s\", $current_timestamp);\n                          $new_esign_owner_data[\"SIGNEDNAME\"] = $OwnerRepSignature;\n                          $new_esign_owner_data[\"SIGNEDINITIALS\"] = $OwnerRepInitials;\n\n                          // Only record client IP address and User Agent string if client IP is different than server IP\n                          // This prevents server IP from being recorded if method was self-invoked by server via SOAP API\n                          if (CLIENT_ADDR !== $_SERVER[\"SERVER_ADDR\"]) {\n                            $new_esign_owner_data[\"IPADDRESS\"] = CLIENT_ADDR;\n                            $new_esign_owner_data[\"BROWSERTYPE\"] = $_SERVER[\"HTTP_USER_AGENT\"];\n                          }\n\n                          $result = $this->dbh->save_esign_signer_data($new_esign_owner_data);\n\n                          if ($result !== false) {\n                            $esign_owner_data = $new_esign_owner_data;\n\n                            if (!$new_esignature) {\n                              $paperless_lease_option = $this->PaperlessLeaseOption($assoc);\n\n                              require_once(BASE_DIR . \"cgi-bin/esign/global.php\");\n                              require_once(BASE_DIR . \"cgi-bin/forms_online/email.php\");\n\n                              if ($esign_data[\"DISABLENOTICES\"] !== \"T\") {\n                                send_esign_owner_signature_confirmation($esign_owner_data[\"NAME\"], $esign_owner_data[\"EMAIL\"], $esign_owner_data[\"DATESIGNED\"], $EsignatureId, $esign_data[\"DTOFLEAS\"], $esign_data[\"UNITNUM\"], $esign_data[\"ADDRESS\"], $esign_data[\"DATEINITIATED\"], $renewal, $assoc);\n                              }\n\n                              $owner_address = array();\n\n                              switch ($db_type) {\n                                case \"aptdb\":\n                                case \"storagedb\":\n                                  $company_name = $property_data[\"PROPERTYNAME\"];\n\n                                  if (trim($property_data[\"ADDRESS\"]) !== \"\") {\n                                    $owner_address[] = trim($property_data[\"ADDRESS\"]);\n                                  }\n\n                                  switch ($assoc) {\n                                    case \"UKAA\":\n                                      if (trim($property_data[\"ADDRESS2\"]) !== \"\") {\n                                        $owner_address[] = trim($property_data[\"ADDRESS2\"]);\n                                      }\n                                      break;\n                                  }\n\n                                  $state_abbrev = $this->dbh->get_state_abbrev($this->customer_data[\"STATE\"]);\n\n                                  $result = get_citystzip($property_data[\"CITY\"], $state_abbrev, $property_data[\"ZIP\"]);\n\n                                  if ($result !== \"\") {\n                                    $owner_address[] = $result;\n                                  }\n                                  break;\n                                default:\n                                  $company_name = $this->customer_data[\"COMPANYNAME\"];\n\n                                  if (trim($this->customer_data[\"ADDRESS\"]) !== \"\") {\n                                    $owner_address[] = trim($this->customer_data[\"ADDRESS\"]);\n                                  }\n\n                                  if (trim($this->customer_data[\"CITYSTZIP\"]) !== \"\") {\n                                    $owner_address[] = trim($this->customer_data[\"CITYSTZIP\"]);\n                                  }\n                                  break;\n                              }\n\n                              foreach ($esign_signer_info as $esign_signer_data) {\n                                $signer_key = $esign_signer_data[\"ID\"];\n\n                                switch ($esign_signer_types[$signer_key]) {\n                                  case \"RESIDENT\":\n                                    $paperless = $paperless_lease_option && $esign_signer_data[\"PAPERLESS\"] === \"T\";\n\n                                    send_esign_resident_confirmation($esign_signer_data[\"NAME\"], $esign_signer_data[\"EMAIL\"], $esign_owner_data[\"NAME\"], $owner_address, $esign_owner_data[\"EMAIL\"], $esign_owner_data[\"PHONE\"], $company_name, $renewal, $this->customer_data[\"STATE\"], $assoc, $signer_key, $esign_data[\"DTOFLEAS\"], $esign_data[\"DATEINITIATED\"], $esign_owner_data[\"DATESIGNED\"], $paperless);\n                                    break;\n                                  case \"GUARANTOR\":\n                                    send_esign_guarantor_confirmation($esign_signer_data[\"NAME\"], $esign_signer_data[\"EMAIL\"], $esign_owner_data[\"NAME\"], $owner_address, $esign_owner_data[\"EMAIL\"], $esign_owner_data[\"PHONE\"], $company_name, $this->customer_data[\"STATE\"], $signer_key, $esign_data[\"DTOFLEAS\"], $esign_data[\"DATEINITIATED\"], $esign_owner_data[\"DATESIGNED\"]);\n                                    break;\n                                }\n                              }\n                            }\n                          }\n                          else {\n                            throw new SoapFault(\"Receiver\", \"Error writing owner signature.\");\n                          }\n\n                          $this->document_management_services = array();\n\n                          if (!DEV_MODE) {\n                            $result = $this->FetchEsignaturePDF(null, $esign_data, $db_type, $new_esignature);\n\n                            if ($result !== false) {\n                              $pdf_buffer = $result;\n\n                              $this->document_management_services = $this->GetDocumentManagementServices($property_number);\n                            }\n                          }\n\n                          foreach ($this->document_management_services as $service_abbrev => $service_data) {\n                            $dms = new $service_abbrev($service_data);\n\n                            $request_vars = $dms->getStoreEsignatureDocumentRequestVars($pdf_buffer, $EsignatureId);\n\n                            $target_url = $dms->getStoreEsignatureDocumentURL();\n\n                            # JAD 2016/10: feature switch for vendor pdf push.  Default to use remote (bms) push\n                            if ($dms->useBms()) {\n                              unset($request_vars[\"pdf\"]);\n\n                              $request_vars[\"remote_target\"] = $target_url;\n\n                              $target_url = $dms->getStoreEsignatureDocumentBmsURL();\n\n                              if (defined(\"RECORD_TO_LOG_LOCAL\")) {\n                                record_to_log(\"vendor_push\", date(\"Y-m-d H:i:s\") . \": \" . \"Remote PDF Push \" . $EsignatureId . CRLF);\n                              }\n\n                              $dms->sendRequestBms($target_url, $request_vars);\n                            }\n                            else {\n                              if (defined(\"RECORD_TO_LOG_LOCAL\")) {\n                                record_to_log(\"vendor_push\", date(\"Y-m-d H:i:s\") . \": \" . \"Local PDF Push \" . $EsignatureId . CRLF);\n                              }\n\n                              $dms->sendRequest($target_url, $request_vars);\n                            }\n                            break;\n                          }\n\n                          return true;\n                        }\n                        else {\n                          throw new SoapFault(\"Sender\", \"Electronic signature transaction has expired.\");\n                        }\n                      }\n                      else {\n                        throw new SoapFault(\"Sender\", \"Lease document has already been executed.\");\n                      }\n                    }\n                    else {\n                      throw new SoapFault(\"Receiver\", \"Unable to locate owner information.\");\n                    }\n                  }\n                  else {\n                    throw new SoapFault(\"Receiver\", \"Incomplete E-signature record.\");\n                  }\n                }\n                else {\n                  throw new SoapFault(\"Receiver\", \"Unable to locate signer information.\");\n                }\n              }\n              else {\n                throw new SoapFault(\"Sender\", \"Invalid OwnerRepInitials.\");\n              }\n            }\n            else {\n              throw new SoapFault(\"Sender\", \"Invalid OwnerRepSignature.\");\n            }\n          }\n          else {\n            throw new SoapFault(\"Sender\", \"Permission denied.\");\n          }\n        }\n        else {\n          throw new SoapFault(\"Sender\", \"Invalid EsignatureId.\");\n        }\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Electronic signature feature is not enabled for this license.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * Returns default XML lease data\n   *\n   * @param string $SessionId\n   * @param int $PropertyId\n   * @return string\n   */\n  public function GetDefaultLeaseXMLData($SessionId, $PropertyId = null) {\n    if ($this->TestSessionId($SessionId)) {\n      $valid_property_number = false;\n\n      $properties = $this->dbh->get_properties($this->user_data[\"SERIALNUMBER\"]);\n\n      $i = 0;\n\n      while (!$valid_property_number && $i<count($properties)) {\n        if (!$PropertyId) {\n          $PropertyId = $properties[$i][\"number\"];\n        }\n\n        if ($valid_property_number = (int) $PropertyId === $properties[$i][\"number\"]) {\n          $db_type = strtolower($properties[$i][\"type\"]);\n        }\n\n        $i++;\n      }\n\n      if ($valid_property_number) {\n        return $this->FetchDefaultXML($PropertyId, $db_type);\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Invalid PropertyId.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * TAA and GAA licenses only - Returns default XML lease renewal data\n   *\n   * @param string $SessionId\n   * @param int $PropertyId\n   * @return string\n   */\n  public function GetDefaultRenewalXMLData($SessionId, $PropertyId = null) {\n    if ($this->TestSessionId($SessionId)) {\n      $assoc = $this->GetAssoc($this->customer_data[\"STATE\"]);\n\n      switch ($this->customer_data[\"STATE\"]) {\n        case \"GAA\":\n        case \"TAA\":\n          break;\n        default:\n          throw new SoapFault(\"Sender\", \"This function not supported for \" . $assoc . \" licenses.\");\n      }\n\n      $valid_property_number = false;\n\n      $properties = $this->dbh->get_properties($this->user_data[\"SERIALNUMBER\"]);\n\n      $i = 0;\n\n      while (!$valid_property_number && $i<count($properties)) {\n        if (!$PropertyId) {\n          $PropertyId = $properties[$i][\"number\"];\n        }\n\n        if ($valid_property_number = (int) $PropertyId === $properties[$i][\"number\"]) {\n          $db_type = strtolower($properties[$i][\"type\"]);\n        }\n\n        $i++;\n      }\n\n      if ($valid_property_number) {\n        return $this->FetchDefaultXML($PropertyId, $db_type, true);\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Invalid PropertyId.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * Returns electronic signature transaction data\n   *\n   * @param string $SessionId\n   * @param int $EsignatureId\n   * @return Esignature\n   */\n  public function GetEsignatureData($SessionId, $EsignatureId) {\n    if ($this->TestSessionId($SessionId)) {\n      if (isset($this->customer_data[\"ESIGN\"])) {\n        $valid_esignature_id = false;\n\n        $result = $this->dbh->get_esign_data($EsignatureId);\n\n        if ($result !== false) {\n          $esign_data = $result;\n\n          $properties = $this->dbh->get_properties($this->user_data[\"SERIALNUMBER\"]);\n\n          $i = 0;\n\n          while (!$valid_esignature_id && $i<count($properties)) {\n            $valid_esignature_id = $esign_data[\"PROPERTYNUMBER\"] === $properties[$i][\"number\"];\n\n            $i++;\n          }\n        }\n\n        if ($valid_esignature_id) {\n          if ($result = $this->dbh->get_all_esign_signers($EsignatureId)) {\n            $esign_signers = $result;\n\n            $lease_key = $this->GenerateEsignatureKey($EsignatureId, \"OWNER\");\n\n            if (in_array($lease_key, $esign_signers)) {\n              $result = $this->dbh->get_esign_signer_data($lease_key);\n\n              if ($result !== false) {\n                $esign_owner_data = $result;\n\n                $esign_date_initiated = $this->FormatDateTime($esign_data[\"DATEINITIATED\"]);\n                $esign_date_executed = $this->FormatDateTime($esign_owner_data[\"DATESIGNED\"]);\n\n                $signer_info = parse_ini_file($this->GetFilePath(BASE_DIR . \"cgi-bin/forms_online/*/signers.ini.php\", $this->customer_data[\"STATE\"]), true);\n\n                $max_residents = $signer_info[\"RESIDENT\"][\"max\"];\n                $resident_field_prefix = $signer_info[\"RESIDENT\"][\"prefix\"];\n\n                $signer_list = array();\n\n                for ($i=1; $i<=$max_residents; $i++) {\n                  $resident_field = $resident_field_prefix . $i;\n\n                  $signer_key = $this->GenerateEsignatureKey($EsignatureId, $resident_field);\n\n                  if (in_array($signer_key, $esign_signers)) {\n                    if ($result = $this->dbh->get_esign_signer_data($signer_key)) {\n                      $esign_signer_data = $result;\n\n                      $date_signed = $this->FormatDateTime($esign_signer_data[\"DATESIGNED\"]);\n\n                      $paperless = $esign_signer_data[\"PAPERLESS\"] === \"T\";\n\n                      $signer_list[] = new Signer($signer_key, $esign_signer_data[\"NAME\"], $esign_signer_data[\"EMAIL\"], $date_signed, $paperless);\n                    }\n                  }\n                }\n\n                $lease_forms = array();\n                $custom_forms = array();\n\n                if ($forms_generated = explode(\",\", $esign_owner_data[\"FORMS\"])) {\n                  foreach ($forms_generated as $form_id) {\n                    if ($member_form = (bool) preg_match(\"/^M_(\\w+)$/i\", $form_id, $matches)) {\n                      $custom_forms[] = new FormShort($matches[1]);\n                    }\n                    else {\n                      $lease_forms[] = new FormShort($form_id);\n                    }\n                  }\n                }\n\n                $esignature = new Esignature($EsignatureId, $esign_date_initiated, $esign_date_executed, $esign_data[\"DTOFLEAS\"], $esign_data[\"ADDRESS\"], $esign_data[\"UNITNUM\"], $esign_data[\"BEGLEASE\"], $signer_list, $lease_forms, $custom_forms);\n\n                return $esignature;\n              }\n              else {\n                throw new SoapFault(\"Receiver\", \"Unable to locate owner information.\");\n              }\n            }\n            else {\n              throw new SoapFault(\"Receiver\", \"Incomplete E-signature record.\");\n            }\n          }\n          else {\n            throw new SoapFault(\"Receiver\", \"Unable to locate signer information.\");\n          }\n        }\n        else {\n          throw new SoapFault(\"Sender\", \"Invalid EsignatureId.\");\n        }\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Electronic signature feature is not enabled for this license.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * Returns byte stream PDF of lease document archived for electronic signature\n   *\n   * @param string $SessionId\n   * @param int $EsignatureId\n   * @param string $SignerKey\n   * @return base64Binary\n   */\n  public function GetEsignaturePDF($SessionId, $EsignatureId, $SignerKey = null) {\n    if ($this->TestSessionId($SessionId)) {\n      if (isset($this->customer_data[\"ESIGN\"])) {\n        $valid_esignature_id = false;\n\n        $result = $this->dbh->get_esign_data($EsignatureId);\n\n        if ($result !== false) {\n          $esign_data = $result;\n\n          $properties = $this->dbh->get_properties($this->user_data[\"SERIALNUMBER\"]);\n\n          $i = 0;\n\n          while (!$valid_esignature_id && $i<count($properties)) {\n            if ($valid_esignature_id = $esign_data[\"PROPERTYNUMBER\"] === $properties[$i][\"number\"]) {\n              $db_type = strtolower($properties[$i][\"type\"]);\n            }\n\n            $i++;\n          }\n        }\n\n        if ($valid_esignature_id) {\n          $this->document_management_services = array();\n\n          $new_esignature = $this->dbh->test_new_esignature();\n\n          $result = $this->FetchEsignaturePDF($SignerKey, $esign_data, $db_type, $new_esignature);\n\n          if ($result !== false) {\n            $pdf_buffer = $result;\n\n            return $pdf_buffer;\n          }\n          else {\n            throw new SoapFault(\"Receiver\", \"Unable to retrieve PDF.\");\n          }\n        }\n        else {\n          throw new SoapFault(\"Sender\", \"Invalid EsignatureId.\");\n        }\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Electronic signature feature is not enabled for this license.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * Returns byte stream PDF of lease document\n   *\n   * @param string $SessionId\n   * @param int $LeaseId\n   * @param FormShort[] $LeaseForms\n   * @param FormShort[] $CustomForms\n   * @param boolean $Preview\n   * @return base64Binary\n   */\n  public function GetLeasePDF($SessionId, $LeaseId, $LeaseForms = null, $CustomForms = null, $Preview = false) {\n    if ($this->TestSessionId($SessionId)) {\n      if ($this->dbh->valid_lease_record($this->user_data[\"SERIALNUMBER\"], $LeaseId)) {\n        $forms_requested = array();\n\n        foreach ($this->dtd_groups as $group) {\n          $forms = array();\n\n          switch ($group) {\n            case \"STANDARD\":\n              $forms = array_values((array) $LeaseForms);\n              break;\n            case \"CUSTOM\":\n              $forms = array_values((array) $CustomForms);\n              break;\n          }\n\n          if ($result = $this->ParseForms($forms[0])) {\n            $forms_requested[$group] = $result;\n          }\n        }\n\n        return $this->NewPDF($LeaseId, $forms_requested, $Preview);\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Invalid LeaseId.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * Returns XML lease data\n   *\n   * @param string $SessionId\n   * @param int $LeaseId\n   * @return string\n   */\n  public function GetLeaseXMLData($SessionId, $LeaseId) {\n    if ($this->TestSessionId($SessionId)) {\n      if ($this->dbh->valid_lease_record($this->user_data[\"SERIALNUMBER\"], $LeaseId)) {\n        return $this->FetchXML($LeaseId);\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Invalid LeaseId.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * TAA and GAA licenses only - Returns byte stream PDF of lease renewal document\n   *\n   * @param string $SessionId\n   * @param int $LeaseId\n   * @param FormShort[] $RenewalForms\n   * @param FormShort[] $CustomForms\n   * @param boolean $Preview\n   * @return base64Binary\n   */\n  public function GetRenewalPDF($SessionId, $LeaseId, $RenewalForms = null, $CustomForms = null, $Preview = false) {\n    if ($this->TestSessionId($SessionId)) {\n      $assoc = $this->GetAssoc($this->customer_data[\"STATE\"]);\n\n      switch ($this->customer_data[\"STATE\"]) {\n        case \"GAA\":\n        case \"TAA\":\n          break;\n        default:\n          throw new SoapFault(\"Sender\", \"This function not supported for \" . $assoc . \" licenses.\");\n      }\n\n      if ($this->dbh->valid_lease_record($this->user_data[\"SERIALNUMBER\"], $LeaseId)) {\n        $forms_requested = array();\n\n        foreach ($this->dtd_groups as $group) {\n          $forms = array();\n\n          switch ($group) {\n            case \"RENEWAL\":\n              $forms = array_values((array) $RenewalForms);\n              break;\n            case \"CUSTOM\":\n              $forms = array_values((array) $CustomForms);\n              break;\n          }\n\n          if ($result = $this->ParseForms($forms[0])) {\n            $forms_requested[$group] = $result;\n          }\n        }\n\n        return $this->NewPDF($LeaseId, $forms_requested, $Preview, true);\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Invalid LeaseId.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * TAA and GAA licenses only - Returns XML lease renewal data\n   *\n   * @param string $SessionId\n   * @param int $LeaseId\n   * @return string\n   */\n  public function GetRenewalXMLData($SessionId, $LeaseId) {\n    if ($this->TestSessionId($SessionId)) {\n      $assoc = $this->GetAssoc($this->customer_data[\"STATE\"]);\n\n      switch ($this->customer_data[\"STATE\"]) {\n        case \"GAA\":\n        case \"TAA\":\n          break;\n        default:\n          throw new SoapFault(\"Sender\", \"This function not supported for \" . $assoc . \" licenses.\");\n      }\n\n      if ($this->dbh->valid_lease_record($this->user_data[\"SERIALNUMBER\"], $LeaseId)) {\n        return $this->FetchXML($LeaseId, true);\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Invalid LeaseId.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * Returns byte stream PDF of non-batch-printable form\n   *\n   * @param string $SessionId\n   * @param int $LeaseId\n   * @param FormShort $StandardForm\n   * @param FormShort $CustomForm\n   * @param string $FormXMLData\n   * @param boolean $Preview\n   * @return base64Binary\n   */\n  public function GetRestrictedPDF($SessionId, $LeaseId, $StandardForm = null, $CustomForm = null, $FormXMLData = null, $Preview = false) {\n    if ($this->TestSessionId($SessionId)) {\n      if ($this->dbh->valid_lease_record($this->user_data[\"SERIALNUMBER\"], $LeaseId)) {\n        $result = $this->dbh->get_property_number_by_unit($LeaseId);\n\n        if ($result !== false) {\n          $property_number = $result;\n\n          if ($result = $this->dbh->get_property_data($property_number)) {\n            $property_data = $result;\n\n            $db_type = strtolower($property_data[\"DBTYPE\"]);\n          }\n        }\n\n        $standard_form_id = strtoupper(trim($StandardForm->Id));\n        $custom_form_id = strtoupper(trim($CustomForm->Id));\n\n        if (!($standard_form_id !== \"\" && $custom_form_id !== \"\")) {\n          $forms_requested = array();\n\n          if ($standard_form_id !== \"\") {\n            $forms_requested[\"OTHER\"] = array(\n              $standard_form_id\n            );\n\n            $form_name = $standard_form_id;\n          }\n\n          if ($custom_form_id !== \"\") {\n            $forms_requested[\"CUSTOM_OTHER\"] = array(\n              $custom_form_id\n            );\n\n            $form_name = \"M_\" . $custom_form_id;\n          }\n\n          $this->required_fields = array();\n          $this->missing_fields = array();\n\n          $import_data = $this->ParseXML($FormXMLData, $db_type, false, $form_name);\n\n          $form_field_data = array(\n            $form_name => (array) $import_data[\"RESTRICTED\"]\n          );\n\n          return $this->NewPDF($LeaseId, $forms_requested, $Preview, false, $form_field_data);\n        }\n        else {\n          throw new SoapFault(\"Sender\", \"Only one form type can be requested at a time.\");\n        }\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Invalid LeaseId.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * Returns info for custom fields available in Default Lease template for current license\n   *\n   * @param string $SessionId\n   * @return Field[]\n   */\n  public function ListCustomDefaultFields($SessionId) {\n    if ($this->TestSessionId($SessionId)) {\n      $fields = array();\n\n      if ($result = $this->dbh->get_member_field_meta($this->customer_data[\"COMPANYNUMBER\"], true)) {\n        $member_field_meta = $result;\n\n        foreach ($member_field_meta as $name => $info) {\n          $fields[] = new Field($name, $info[\"type\"], $info[\"maxlength\"], false);\n        }\n      }\n\n      return $fields;\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * Returns info for custom fields available in Lease Database for current license\n   *\n   * @param string $SessionId\n   * @param int $PropertyId\n   * @param FormShort[] $CustomForms\n   * @return Field[]\n   */\n  public function ListCustomFields($SessionId, $PropertyId = null, $CustomForms = null) {\n    if ($this->TestSessionId($SessionId)) {\n      $valid_property_number = false;\n\n      $properties = $this->dbh->get_properties($this->user_data[\"SERIALNUMBER\"]);\n\n      $i = 0;\n\n      while (!$valid_property_number && $i<count($properties)) {\n        if (!$PropertyId) {\n          $PropertyId = $properties[$i][\"number\"];\n        }\n\n        $valid_property_number = (int) $PropertyId === $properties[$i][\"number\"];\n\n        $i++;\n      }\n\n      if ($valid_property_number) {\n        $filter_by_forms = array();\n\n        $forms = array_values((array) $CustomForms);\n\n        if ($result = $this->ParseForms($forms[0])) {\n          $filter_by_forms = $result;\n        }\n\n        return $this->FetchCustomFields($PropertyId, null, $filter_by_forms);\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Invalid PropertyId.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * Returns info for custom lease forms available for current license\n   *\n   * @param string $SessionId\n   * @param int $PropertyId\n   * @param boolean $ExcludeEsignatureRestrictedForms\n   * @return Form[]\n   */\n  public function ListCustomForms($SessionId, $PropertyId = null, $ExcludeEsignatureRestrictedForms = false) {\n    if ($this->TestSessionId($SessionId)) {\n      $valid_property_number = false;\n\n      $properties = $this->dbh->get_properties($this->user_data[\"SERIALNUMBER\"]);\n\n      $i = 0;\n\n      while (!$valid_property_number && $i<count($properties)) {\n        if (!$PropertyId) {\n          $PropertyId = $properties[$i][\"number\"];\n        }\n\n        $valid_property_number = (int) $PropertyId === $properties[$i][\"number\"];\n\n        $i++;\n      }\n\n      if ($valid_property_number) {\n        return $this->FetchCustomForms($PropertyId, $ExcludeEsignatureRestrictedForms);\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Invalid PropertyId.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * Returns info for fields available on non-batch-printable custom form for current license\n   *\n   * @param string $SessionId\n   * @param FormShort $Form\n   * @param int $PropertyId\n   * @return Field[]\n   */\n  public function ListCustomRestrictedFields($SessionId, $Form, $PropertyId = null) {\n    if ($this->TestSessionId($SessionId)) {\n      $valid_property_number = false;\n\n      $properties = $this->dbh->get_properties($this->user_data[\"SERIALNUMBER\"]);\n\n      $i = 0;\n\n      while (!$valid_property_number && $i<count($properties)) {\n        if (!$PropertyId) {\n          $PropertyId = $properties[$i][\"number\"];\n        }\n\n        $valid_property_number = (int) $PropertyId === $properties[$i][\"number\"];\n\n        $i++;\n      }\n\n      if ($valid_property_number) {\n        $form_id = strtoupper(trim($Form->Id));\n\n        if ($form_id !== \"\") {\n          $valid_forms = $this->dbh->get_valid_member_single_forms($this->customer_data[\"COMPANYNUMBER\"], $PropertyId);\n\n          $valid_form = false;\n\n          foreach ($valid_forms as $section_id => $forms) {\n            foreach ($forms as $form_data) {\n              if ($valid_form = $form_id === $form_data[\"FORMID\"]) break 2;\n            }\n          }\n\n          if ($valid_form) {\n            return $this->FetchCustomFields($PropertyId, $form_id);\n          }\n          else {\n            throw new SoapFault(\"Sender\", \"Form [\" . $form_id . \"] is not available.\");\n          }\n        }\n        else {\n          throw new SoapFault(\"Sender\", \"No form specified.\");\n        }\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Invalid PropertyId.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * Returns info for custom non-batch-printable forms available for current license\n   *\n   * @param string $SessionId\n   * @param int $PropertyId\n   * @return Form[]\n   */\n  public function ListCustomRestrictedForms($SessionId, $PropertyId = null) {\n    if ($this->TestSessionId($SessionId)) {\n      $valid_property_number = false;\n\n      $properties = $this->dbh->get_properties($this->user_data[\"SERIALNUMBER\"]);\n\n      $i = 0;\n\n      while (!$valid_property_number && $i<count($properties)) {\n        if (!$PropertyId) {\n          $PropertyId = $properties[$i][\"number\"];\n        }\n\n        $valid_property_number = (int) $PropertyId === $properties[$i][\"number\"];\n\n        $i++;\n      }\n\n      if ($valid_property_number) {\n        return $this->FetchCustomForms($PropertyId, false, true);\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Invalid PropertyId.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * Returns info for fields available in Lease database for current license which can auto-populate from Default Lease template\n   *\n   * @param string $SessionId\n   * @param int $PropertyId\n   * @return Field[]\n   */\n  public function ListDefaultFields($SessionId, $PropertyId = null) {\n    if ($this->TestSessionId($SessionId)) {\n      $valid_property_number = false;\n\n      $properties = $this->dbh->get_properties($this->user_data[\"SERIALNUMBER\"]);\n\n      $i = 0;\n\n      while (!$valid_property_number && $i<count($properties)) {\n        if (!$PropertyId) {\n          $PropertyId = $properties[$i][\"number\"];\n        }\n\n        $valid_property_number = (int) $PropertyId === $properties[$i][\"number\"];\n\n        $i++;\n      }\n\n      if ($valid_property_number) {\n        return $this->FetchDefaultFields($PropertyId);\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Invalid PropertyId.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * Returns info for all electronic signature transactions matching specified criteria\n   *\n   * @param string $SessionId\n   * @param int $PropertyId\n   * @param boolean $IncludeNonpending\n   * @param string $UnitNumber\n   * @param string $StreetAddress\n   * @param string $ResidentName\n   * @param string $StartDate\n   * @param string $EndDate\n   * @return Esignature[]\n   */\n  public function ListEsignatures($SessionId, $PropertyId = null, $IncludeNonpending = false, $UnitNumber = null, $StreetAddress = null, $ResidentName = null, $StartDate = null, $EndDate = null) \n  {\n    return $this->ListEsignaturesExpanded(\n      $SessionId,\n      $PropertyId,\n      $IncludeNonpending,\n      $UnitNumber,\n      $StreetAddress,\n      $ResidentName,\n      $StartDate,\n      $EndDate);\n  }\n\n  protected function ListEsignaturesExpanded(\n    $SessionId,\n    $PropertyId = null,\n    $IncludeNonpending = false,\n    $UnitNumber = null,\n    $StreetAddress = null,\n    $ResidentName = null,\n    $StartDate = null,\n    $EndDate = null\n    ) {\n    if ($this->TestSessionId($SessionId)) {\n      if (isset($this->customer_data[\"ESIGN\"])) {\n        $valid_property_number = false;\n\n        $properties = $this->dbh->get_properties($this->user_data[\"SERIALNUMBER\"]);\n\n        $i = 0;\n\n        while (!$valid_property_number && $i<count($properties)) {\n          if (!$PropertyId) {\n            $PropertyId = $properties[$i][\"number\"];\n          }\n\n          $valid_property_number = (int) $PropertyId === $properties[$i][\"number\"];\n\n          $i++;\n        }\n\n        if ($valid_property_number) {\n          $esignatures = array();\n\n          require_once(BASE_DIR . \"cgi-bin/forms_online/date.php\");\n\n          if ((string) $StartDate !== \"\") {\n            if ($result = valid_format(DATE_FORMAT_TYPE, $StartDate)) {\n              $StartDate = $result;\n            }\n            else {\n              throw new SoapFault(\"Sender\", \"Invalid format for StartDate (Hint: expecting '\" . strtolower($this-GetDateFormat(DATE_FORMAT)) . \"').\");\n            }\n          }\n\n          if ((string) $EndDate !== \"\") {\n            if ($result = valid_format(DATE_FORMAT_TYPE, $EndDate)) {\n              $EndDate = $result;\n\n              if ((string) $StartDate !== \"\") {\n                if (strtotime($EndDate) < strtotime($StartDate)) {\n                  throw new SoapFault(\"Sender\", \"EndDate must be equal to or later than StartDate.\");\n                }\n              }\n            }\n            else {\n              throw new SoapFault(\"Sender\", \"Invalid format for EndDate (Hint: expecting '\" . strtolower($this-GetDateFormat(DATE_FORMAT)) . \"').\");\n            }\n          }\n\n          if ($result = $this->dbh->get_esign_records($PropertyId, $IncludeNonpending, $UnitNumber, $StreetAddress, $ResidentName, $StartDate, $EndDate)) {\n            $esign_records = $result;\n\n            foreach ($esign_records as $esign_id => $data) {\n              $esign_date_initiated = $this->FormatDateTime($data[\"DATEINITIATED\"]);\n              $esign_date_executed = $this->FormatDateTime($data[\"EXECUTED\"]);\n\n              $signer_list = array();\n\n              foreach ($data[\"SIGNERS\"] as $signer_key => $info) {\n                $date_signed = $this->FormatDateTime($info[\"DATESIGNED\"]);\n                $disclosure_agreed = $this->FormatDateTime($info[\"DISCLOSUREAGREED\"]);\n\n                $paperless = $info[\"PAPERLESS\"] === \"T\";\n                if ($this->service_invoked_local) {\n                  $signer_list[] = new SignerExpanded ($signer_key, $info[\"NAME\"], $info[\"EMAIL\"], $disclosure_agreed, $date_signed, $paperless);\n                } else {\n                  $signer_list[] = new Signer ($signer_key, $info[\"NAME\"], $info[\"EMAIL\"], $date_signed, $paperless);\n                }\n              }\n\n              $lease_forms = array();\n              $custom_forms = array();\n\n              foreach ($data[\"FORMS\"] as $form_id) {\n                if ($member_form = (bool) preg_match(\"/^M_(\\w+)$/i\", $form_id, $matches)) {\n                  $custom_forms[] = new FormShort($matches[1]);\n                }\n                else {\n                  $lease_forms[] = new FormShort($form_id);\n                }\n              }\n              if ($this->service_invoked_local) {\n                $esignatures[] = new EsignatureExpanded($esign_id, $esign_date_initiated, $esign_date_executed, $data[\"DTOFLEAS\"], $data[\"ADDRESS\"], $data[\"UNITNUM\"], $data[\"BEGLEASE\"], $signer_list, $lease_forms, $custom_forms);\n              } else {\n                $esignatures[] = new Esignature($esign_id, $esign_date_initiated, $esign_date_executed, $data[\"DTOFLEAS\"], $data[\"ADDRESS\"], $data[\"UNITNUM\"], $data[\"BEGLEASE\"], $signer_list, $lease_forms, $custom_forms);\n              }\n            }\n          }\n\n          return $esignatures;\n        }\n        else {\n          throw new SoapFault(\"Sender\", \"Invalid PropertyId.\");\n        }\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Electronic signature feature is not enabled for this license.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * Returns info for fields available in Lease database for current license\n   *\n   * @param string $SessionId\n   * @param int $PropertyId\n   * @param FormShort[] $StandardForms\n   * @param FormShort[] $CustomForms\n   * @return Field[]\n   */\n  public function ListFields($SessionId, $PropertyId = null, $StandardForms = null, $CustomForms = null) {\n    if ($this->TestSessionId($SessionId)) {\n      $valid_property_number = false;\n\n      $properties = $this->dbh->get_properties($this->user_data[\"SERIALNUMBER\"]);\n\n      $i = 0;\n\n      while (!$valid_property_number && $i<count($properties)) {\n        if (!$PropertyId) {\n          $PropertyId = $properties[$i][\"number\"];\n        }\n\n        $valid_property_number = (int) $PropertyId === $properties[$i][\"number\"];\n\n        $i++;\n      }\n\n      if ($valid_property_number) {\n        $filter_by_forms = array();\n\n        foreach ($this->dtd_groups as $group) {\n          $forms = array();\n\n          switch ($group) {\n            case \"STANDARD\":\n              $forms = array_values((array) $StandardForms);\n              break;\n            case \"CUSTOM\":\n              $forms = array_values((array) $CustomForms);\n              break;\n          }\n\n          if ($result = $this->ParseForms($forms[0])) {\n            $filter_by_forms[$group] = $result;\n          }\n        }\n\n        return $this->FetchFields($PropertyId, false, null, $filter_by_forms);\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Invalid PropertyId.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * Returns info for lease forms available for current license\n   *\n   * @param string $SessionId\n   * @param int $PropertyId\n   * @param int $LeaseId\n   * @param boolean $ExcludeEsignatureRestrictedForms\n   * @return Form[]\n   */\n  public function ListForms($SessionId, $PropertyId = null, $LeaseId = null, $ExcludeEsignatureRestrictedForms = false) {\n    if ($this->TestSessionId($SessionId)) {\n      if ($LeaseId) {\n        if ($result = is_numeric($LeaseId)) {\n          $result = $this->dbh->get_property_number_by_unit($LeaseId);\n        }\n\n        if ($result !== false) {\n          if (!$PropertyId) {\n            $PropertyId = $result;\n          }\n          else {\n            if ($result !== (int) $PropertyId) {\n              throw new SoapFault(\"Sender\", \"LeaseId is not valid for supplied PropertyId.\");\n            }\n          }\n        }\n        else {\n          throw new SoapFault(\"Sender\", \"Invalid LeaseId.\");\n        }\n      }\n      else $LeaseId = null;\n\n      $valid_property_number = false;\n\n      $properties = $this->dbh->get_properties($this->user_data[\"SERIALNUMBER\"]);\n\n      $i = 0;\n\n      while (!$valid_property_number && $i<count($properties)) {\n        if (!$PropertyId) {\n          $PropertyId = $properties[$i][\"number\"];\n        }\n\n        $valid_property_number = (int) $PropertyId === $properties[$i][\"number\"];\n\n        $i++;\n      }\n\n      if ($valid_property_number) {\n        return $this->FetchForms($PropertyId, $LeaseId, $ExcludeEsignatureRestrictedForms);\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Invalid PropertyId.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * TAA and GAA licenses only - Returns info for renewal-specific fields available in Lease database for current license which can auto-populate from Default Lease template\n   *\n   * @param string $SessionId\n   * @param int $PropertyId\n   * @return Field[]\n   */\n  public function ListRenewalDefaultFields($SessionId, $PropertyId = null) {\n    if ($this->TestSessionId($SessionId)) {\n      $assoc = $this->GetAssoc($this->customer_data[\"STATE\"]);\n\n      switch ($this->customer_data[\"STATE\"]) {\n        case \"GAA\":\n        case \"TAA\":\n          break;\n        default:\n          throw new SoapFault(\"Sender\", \"This function not supported for \" . $assoc . \" licenses.\");\n      }\n\n      $valid_property_number = false;\n\n      $properties = $this->dbh->get_properties($this->user_data[\"SERIALNUMBER\"]);\n\n      $i = 0;\n\n      while (!$valid_property_number && $i<count($properties)) {\n        if (!$PropertyId) {\n          $PropertyId = $properties[$i][\"number\"];\n        }\n\n        $valid_property_number = (int) $PropertyId === $properties[$i][\"number\"];\n\n        $i++;\n      }\n\n      if ($valid_property_number) {\n        return $this->FetchDefaultFields($PropertyId, true);\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Invalid PropertyId.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * TAA and GAA licenses only - Returns info for renewal-specific fields available in Lease database for current license\n   *\n   * @param string $SessionId\n   * @param int $PropertyId\n   * @param FormShort[] $StandardForms\n   * @param FormShort[] $CustomForms\n   * @return Field[]\n   */\n  public function ListRenewalFields($SessionId, $PropertyId = null, $StandardForms = null, $CustomForms = null) {\n    if ($this->TestSessionId($SessionId)) {\n      $assoc = $this->GetAssoc($this->customer_data[\"STATE\"]);\n\n      switch ($this->customer_data[\"STATE\"]) {\n        case \"GAA\":\n        case \"TAA\":\n          break;\n        default:\n          throw new SoapFault(\"Sender\", \"This function not supported for \" . $assoc . \" licenses.\");\n      }\n\n      $valid_property_number = false;\n\n      $properties = $this->dbh->get_properties($this->user_data[\"SERIALNUMBER\"]);\n\n      $i = 0;\n\n      while (!$valid_property_number && $i<count($properties)) {\n        if (!$PropertyId) {\n          $PropertyId = $properties[$i][\"number\"];\n        }\n\n        $valid_property_number = (int) $PropertyId === $properties[$i][\"number\"];\n\n        $i++;\n      }\n\n      if ($valid_property_number) {\n        $filter_by_forms = array();\n\n        foreach ($this->dtd_groups as $group) {\n          $forms = array();\n\n          switch ($group) {\n            case \"STANDARD\":\n              $forms = array_values((array) $StandardForms);\n              break;\n            case \"CUSTOM\":\n              $forms = array_values((array) $CustomForms);\n              break;\n          }\n\n          if ($result = $this->ParseForms($forms[0])) {\n            $filter_by_forms[$group] = $result;\n          }\n        }\n\n        return $this->FetchFields($PropertyId, true, null, $filter_by_forms);\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Invalid PropertyId.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * TAA and GAA licenses only - Returns info for lease renewal forms available for current license\n   *\n   * @param string $SessionId\n   * @param int $PropertyId\n   * @param boolean $ExcludeEsignatureRestrictedForms\n   * @return Form[]\n   */\n  public function ListRenewalForms($SessionId, $PropertyId = null, $ExcludeEsignatureRestrictedForms = false) {\n    if ($this->TestSessionId($SessionId)) {\n      $assoc = $this->GetAssoc($this->customer_data[\"STATE\"]);\n\n      switch ($this->customer_data[\"STATE\"]) {\n        case \"GAA\":\n        case \"TAA\":\n          break;\n        default:\n          throw new SoapFault(\"Sender\", \"This function not supported for \" . $assoc . \" licenses.\");\n      }\n\n      $valid_property_number = false;\n\n      $properties = $this->dbh->get_properties($this->user_data[\"SERIALNUMBER\"]);\n\n      $i = 0;\n\n      while (!$valid_property_number && $i<count($properties)) {\n        if (!$PropertyId) {\n          $PropertyId = $properties[$i][\"number\"];\n        }\n\n        $valid_property_number = (int) $PropertyId === $properties[$i][\"number\"];\n\n        $i++;\n      }\n\n      if ($valid_property_number) {\n        return $this->FetchForms($PropertyId, null, $ExcludeEsignatureRestrictedForms, true);\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Invalid PropertyId.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * Returns info for fields available on non-batch-printable form for current license\n   *\n   * @param string $SessionId\n   * @param FormShort $Form\n   * @param int $PropertyId\n   * @return Field[]\n   */\n  public function ListRestrictedFields($SessionId, $Form, $PropertyId = null) {\n    if ($this->TestSessionId($SessionId)) {\n      $valid_property_number = false;\n\n      $properties = $this->dbh->get_properties($this->user_data[\"SERIALNUMBER\"]);\n\n      $i = 0;\n\n      while (!$valid_property_number && $i<count($properties)) {\n        if (!$PropertyId) {\n          $PropertyId = $properties[$i][\"number\"];\n        }\n\n        if ($valid_property_number = (int) $PropertyId === $properties[$i][\"number\"]) {\n          $db_type = strtolower($properties[$i][\"type\"]);\n        }\n\n        $i++;\n      }\n\n      if ($valid_property_number) {\n        $form_id = strtoupper(trim($Form->Id));\n\n        if ($form_id !== \"\") {\n          $valid_forms = $this->dbh->get_valid_single_forms($this->customer_data[\"STATE\"], $db_type);\n\n          $valid_form = false;\n\n          foreach ($valid_forms as $section_id => $forms) {\n            foreach ($forms as $form_data) {\n              if ($valid_form = $form_id === $form_data[\"FORMID\"]) break 2;\n            }\n          }\n\n          if ($valid_form) {\n            return $this->FetchFields($PropertyId, false, $form_id);\n          }\n          else {\n            throw new SoapFault(\"Sender\", \"Form [\" . $form_id . \"] is not available.\");\n          }\n        }\n        else {\n          throw new SoapFault(\"Sender\", \"No form specified.\");\n        }\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Invalid PropertyId.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * Returns info for non-batch-printable forms available for current license\n   *\n   * @param string $SessionId\n   * @param int $PropertyId\n   * @return Form[]\n   */\n  public function ListRestrictedForms($SessionId, $PropertyId = null) {\n    if ($this->TestSessionId($SessionId)) {\n      $valid_property_number = false;\n\n      $properties = $this->dbh->get_properties($this->user_data[\"SERIALNUMBER\"]);\n\n      $i = 0;\n\n      while (!$valid_property_number && $i<count($properties)) {\n        if (!$PropertyId) {\n          $PropertyId = $properties[$i][\"number\"];\n        }\n\n        $valid_property_number = (int) $PropertyId === $properties[$i][\"number\"];\n\n        $i++;\n      }\n\n      if ($valid_property_number) {\n        return $this->FetchForms($PropertyId, null, false, false, true);\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Invalid PropertyId.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * Returns info for all lease records matching specified criteria\n   *\n   * @param string $SessionId\n   * @param int $PropertyId\n   * @param string $UnitNumber\n   * @param string $StreetAddress\n   * @param string $ResidentName\n   * @param string $StartDate\n   * @param string $EndDate\n   * @return Unit[]\n   */\n  public function ListUnits($SessionId, $PropertyId = null, $UnitNumber = null, $StreetAddress = null, $ResidentName = null, $StartDate = null, $EndDate = null) {\n    if ($this->TestSessionId($SessionId)) {\n      $valid_property_number = false;\n\n      $properties = $this->dbh->get_properties($this->user_data[\"SERIALNUMBER\"]);\n\n      $i = 0;\n\n      while (!$valid_property_number && $i<count($properties)) {\n        if (!$PropertyId) {\n          $PropertyId = $properties[$i][\"number\"];\n        }\n\n        $valid_property_number = (int) $PropertyId === $properties[$i][\"number\"];\n\n        $i++;\n      }\n\n      if ($valid_property_number) {\n        $units = array();\n\n        require_once(BASE_DIR . \"cgi-bin/forms_online/date.php\");\n\n        if ((string) $StartDate !== \"\") {\n          if ($result = valid_format(DATE_FORMAT_TYPE, $StartDate)) {\n            $StartDate = $result;\n          }\n          else {\n            throw new SoapFault(\"Sender\", \"Invalid format for StartDate (Hint: expecting '\" . strtolower($this-GetDateFormat(DATE_FORMAT)) . \"').\");\n          }\n        }\n\n        if ((string) $EndDate !== \"\") {\n          if ($result = valid_format(DATE_FORMAT_TYPE, $EndDate)) {\n            $EndDate = $result;\n\n            if ((string) $StartDate !== \"\") {\n              if (strtotime($EndDate) < strtotime($StartDate)) {\n                throw new SoapFault(\"Sender\", \"EndDate must be equal to or later than StartDate.\");\n              }\n            }\n          }\n          else {\n            throw new SoapFault(\"Sender\", \"Invalid format for EndDate (Hint: expecting '\" . strtolower($this-GetDateFormat(DATE_FORMAT)) . \"').\");\n          }\n        }\n\n        if ($result = $this->dbh->get_lease_records($PropertyId, $UnitNumber, $StreetAddress, $ResidentName, $StartDate, $EndDate)) {\n          $lease_records = $result;\n\n          $signer_info = parse_ini_file($this->GetFilePath(BASE_DIR . \"cgi-bin/forms_online/*/signers.ini.php\", $this->customer_data[\"STATE\"]), true);\n\n          $max_residents = $signer_info[\"RESIDENT\"][\"max\"];\n          $resident_field_prefix = $signer_info[\"RESIDENT\"][\"prefix\"];\n\n          foreach ($lease_records as $lease_id => $data) {\n            $resident_names = array();\n\n            for ($i=1; $i<=$max_residents; $i++) {\n              $resident_field = $resident_field_prefix . $i;\n\n              if ((string) $data[$resident_field] !== \"\") {\n                $resident_names[$i] = $data[$resident_field];\n              }\n            }\n\n            $residents = array();\n\n            foreach ($resident_names as $number => $name) {\n              $residents[] = new Resident($number, $name);\n            }\n\n            $renewal = (string) $data[\"RENEWED\"] !== \"\";\n\n            $units[] = new Unit($lease_id, $data[\"DTOFLEAS\"], $data[\"ADDRESS\"], $data[\"UNITNUM\"], $data[\"BEGLEASE\"], $data[\"ENDLEASE\"], $residents, $renewal);\n          }\n        }\n\n        return $units;\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Invalid PropertyId.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * Returns account privileges for current user\n   *\n   * @param string $SessionId\n   * @return Privilege[]\n   */\n  public function ListUserPrivileges($SessionId) {\n    if ($this->TestSessionId($SessionId)) {\n      $user_privileges = array();\n\n      $user_privileges[] = new Privilege(\"Delete\", ($this->user_data[\"PRIV\"] === \"3\" ? $this->user_data[\"NODELETE\"] === \"T\" : false));\n      $user_privileges[] = new Privilege(\"Esignature\", ($this->user_data[\"PRIV\"] === \"3\" ? $this->user_data[\"NOMANAGEESIGN\"] === \"T\" : false));\n\n      return $user_privileges;\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * TAA and GAA licenses only - Extends term of existing lease record\n   *\n   * @param string $SessionId\n   * @param int $LeaseId\n   * @param string $RenewalXMLData\n   * @param boolean $ImportDefaultLeaseData\n   * @return boolean\n   */\n  public function RenewLease($SessionId, $LeaseId, $RenewalXMLData, $ImportDefaultLeaseData = false) {\n    if ($this->TestSessionId($SessionId)) {\n      $assoc = $this->GetAssoc($this->customer_data[\"STATE\"]);\n\n      switch ($this->customer_data[\"STATE\"]) {\n        case \"GAA\":\n        case \"TAA\":\n          break;\n        default:\n          throw new SoapFault(\"Sender\", \"This function not supported for \" . $assoc . \" licenses.\");\n      }\n\n      if ($this->dbh->valid_lease_record($this->user_data[\"SERIALNUMBER\"], $LeaseId)) {\n        $result = $this->dbh->get_property_number_by_unit($LeaseId);\n\n        if ($result !== false) {\n          $property_number = $result;\n\n          if ($result = $this->dbh->get_property_data($property_number)) {\n            $property_data = $result;\n\n            $db_type = strtolower($property_data[\"DBTYPE\"]);\n          }\n        }\n\n        $this->required_fields = array();\n        $this->missing_fields = array();\n\n        $import_data = $this->ParseXML($RenewalXMLData, $db_type, true);\n\n        require_once(BASE_DIR . \"cgi-bin/forms_online/date.php\");\n\n        if ((string) $import_data[\"RENEWAL\"][\"ENDLEASE\"] === \"\") {\n          throw new SoapFault(\"Sender\", \"Must provide ending date for renewed lease term.\");\n        }\n\n        $lease_data = array();\n\n        foreach ($this->dtd_groups as $group) {\n          switch ($group) {\n            case \"RENEWAL\":\n              if ($result = $this->dbh->get_lease_data($LeaseId)) {\n                $lease_data[$group] = $result;\n\n                $signer_info = parse_ini_file($this->GetFilePath(BASE_DIR . \"cgi-bin/forms_online/*/signers.ini.php\", $this->customer_data[\"STATE\"]), true);\n\n                $max_residents = $signer_info[\"RESIDENT\"][\"max\"];\n\n                for ($i=1; $i<=$max_residents; $i++) {\n                  if (isset($lease_data[$group][\"OLDRES\" . $i])) {\n                    throw new SoapFault(\"Sender\", \"This function cannot be used because original composition of residents was previously modified using roommate amendment form.\");\n                  }\n                }\n\n                switch ($assoc) {\n                  case \"GAA\":\n                    if ((string) $lease_data[\"RENEWED\"] !== \"\") {\n                      throw new SoapFault(\"Sender\", \"This function cannot be used because original \" . $assoc . \" Rental Agreement has already been renewed once.\");\n                    }\n                    break;\n                  case \"TAA\":\n                    if (strtotime($lease_data[\"DTOFLEAS\"]) < TAA_RENEWAL_MIN_TIMESTAMP) {\n                      throw new SoapFault(\"Sender\", \"This function cannot be used because original \" . $assoc . \" Lease Contract for this record was copyrighted prior to \" . date(\"F Y\", strtotime(date(\"Y-m-d\", TAA_RENEWAL_MIN_TIMESTAMP) . \" -1 month\")) . \".\");\n                    }\n                    break;\n                }\n\n                if (isset($lease_data[$group][\"PRELEASELINK_ID\"])) {\n                  if ($LeaseId > $lease_data[$group][\"PRELEASELINK_ID\"]) {\n                    throw new SoapFault(\"Sender\", \"Supplied LeaseId correlates to pre-lease record, which cannot be renewed until it is activated.\");\n                  }\n                  else {\n                    throw new SoapFault(\"Sender\", \"Supplied LeaseId correlates to record which has been pre-leased and cannot be renewed unless other record [LeaseId: \" . $lease_data[$group][\"PRELEASELINK_ID\"] . \"] is deleted.\");\n                  }\n                }\n\n                if ($lease_begin_date = valid_format(DATE_FORMAT_TYPE, $lease_data[$group][\"BEGLEASE\"])) {\n                  $lease_data[$group][\"BEGLEASE\"] = $lease_begin_date;\n                }\n                else {\n                  $lease_data[$group][\"BEGLEASE\"] = null;\n                }\n\n                if ($lease_end_date = valid_format(DATE_FORMAT_TYPE, $lease_data[$group][\"ENDLEASE\"])) {\n                  $lease_data[$group][\"ENDLEASE\"] = $lease_end_date;\n                }\n                else {\n                  $lease_data[$group][\"ENDLEASE\"] = null;\n                }\n\n                if (!isset($import_data[$group][\"BEGLEASE\"])) {\n                  if (isset($lease_data[$group][\"ENDLEASE\"])) {\n                    $import_data[$group][\"BEGLEASE\"] = date($this->GetDateFormat(DATE_FORMAT), strtotime($lease_data[$group][\"ENDLEASE\"] . \" + 1 day\"));\n                  }\n                }\n\n                if ($result = $this->dbh->get_default_lease_data($property_number)) {\n                  $default_lease_data = array_intersect_key($result, $lease_data[$group]);\n\n                  if ($ImportDefaultLeaseData) {\n                    if ($result = $this->dbh->get_transferable_lease_data($LeaseId, $db_type, $ImportDefaultLeaseData)) {\n                      if ((string) $lease_data[$group][\"OCCUPAN1\"] !== \"\") {\n                        $result[\"OCCUPAN1\"] = $lease_data[$group][\"OCCUPAN1\"];\n                      }\n\n                      $default_lease_data = array_diff_key($default_lease_data, $result);\n                    }\n\n                    if ($result = array_diff_key($default_lease_data, $import_data[$group])) {\n                      foreach ($result as $key => $value) {\n                        if ((string) $value !== \"\") {\n                          $import_data[$group][$key] = $value;\n                        }\n                        else {\n                          $lease_data[$group][$key] = $value;\n                        }\n                      }\n                    }\n                  }\n                }\n\n                $lc = new lease_calcs($lease_data[$group], $this->customer_data);\n\n                $lc->set_renewal_fields($default_lease_data);\n\n                $lc->set_lease_fields($import_data[$group]);\n\n                $lc->set_index_fields();\n\n                if (isset($lease_data[$group][\"BEGLEASE\"], $lease_data[$group][\"ENDLEASE\"])) {\n                  if (strtotime($lease_data[$group][\"ENDLEASE\"]) <= strtotime($lease_data[$group][\"BEGLEASE\"])) {\n                    throw new SoapFault(\"Sender\", \"Ending date must fall after start of renewal term.\");\n                  }\n                }\n              }\n              break;\n            case \"CUSTOM\":\n              if ($result = $this->dbh->get_member_field_data($this->customer_data[\"COMPANYNUMBER\"], $LeaseId)) {\n                $lease_data[$group] = array_merge($result, $import_data[$group]);\n              }\n              break;\n          }\n        }\n\n        $result = $this->dbh->save_lease_data($lease_data[\"RENEWAL\"], $property_number);\n\n        if ($result !== false) {\n          $lease_id = $result;\n\n          if (!empty($lease_data[\"CUSTOM\"])) {\n            $this->dbh->save_member_field_data($this->customer_data[\"COMPANYNUMBER\"], $lease_id, $lease_data[\"CUSTOM\"]);\n          }\n\n          return true;\n        }\n        else {\n          throw new SoapFault(\"Receiver\", \"Error writing lease renewal data.\");\n        }\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Invalid LeaseId.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * Generates/archives PDF lease document and sends electronic signature request to all lease signers\n   * Returns unique EsignatureId\n   *\n   * @param string $SessionId\n   * @param int $LeaseId\n   * @param Contact $OwnerRep\n   * @param Contact[] $Residents\n   * @param FormShort[] $LeaseForms\n   * @param FormShort[] $CustomForms\n   * @param boolean $SendOwnerRepNotices\n   * @return int\n   */\n  public function RequestEsignature($SessionId, $LeaseId, $OwnerRep, $Residents, $LeaseForms = null, $CustomForms = null, $SendOwnerRepNotices = false) {\n    if ($this->TestSessionId($SessionId)) {\n      if (isset($this->customer_data[\"ESIGN\"])) {\n        if ($this->dbh->valid_lease_record($this->user_data[\"SERIALNUMBER\"], $LeaseId)) {\n          $forms_requested = array();\n\n          foreach ($this->dtd_groups as $group) {\n            $forms = array();\n\n            switch ($group) {\n              case \"STANDARD\":\n                $forms = array_values((array) $LeaseForms);\n                break;\n              case \"CUSTOM\":\n                $forms = array_values((array) $CustomForms);\n                break;\n            }\n\n            if ($result = $this->ParseForms($forms[0])) {\n              $forms_requested[$group] = $result;\n            }\n          }\n\n          if ($result = array_values((array) $Residents)) {\n            $resident_contact_info = (array) $result[0];\n          }\n\n          $resident_signers = array();\n\n          foreach ($resident_contact_info as $resident) {\n            $resident_signers[] = new SignerShort($resident, false);\n          }\n\n          return $this->NewEsignature($OwnerRep, $resident_signers, $LeaseId, $SendOwnerRepNotices, $forms_requested);\n        }\n        else {\n          throw new SoapFault(\"Sender\", \"Invalid LeaseId.\");\n        }\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Electronic signature feature is not enabled for this license.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * TAA and GAA licenses only - Generates/archives PDF lease renewal document and sends electronic signature request to all lease signers\n   * Returns unique EsignatureId\n   *\n   * @param string $SessionId\n   * @param int $LeaseId\n   * @param Contact $OwnerRep\n   * @param Contact[] $Residents\n   * @param FormShort[] $RenewalForms\n   * @param FormShort[] $CustomForms\n   * @param boolean $SendOwnerRepNotices\n   * @return int\n   */\n  public function RequestRenewalEsignature($SessionId, $LeaseId, $OwnerRep, $Residents, $RenewalForms = null, $CustomForms = null, $SendOwnerRepNotices = false) {\n    if ($this->TestSessionId($SessionId)) {\n      $assoc = $this->GetAssoc($this->customer_data[\"STATE\"]);\n\n      switch ($this->customer_data[\"STATE\"]) {\n        case \"GAA\":\n        case \"TAA\":\n          break;\n        default:\n          throw new SoapFault(\"Sender\", \"This function not supported for \" . $assoc . \" licenses.\");\n      }\n\n      if (isset($this->customer_data[\"ESIGN\"])) {\n        if ($this->dbh->valid_lease_record($this->user_data[\"SERIALNUMBER\"], $LeaseId)) {\n          $forms_requested = array();\n\n          foreach ($this->dtd_groups as $group) {\n            $forms = array();\n\n            switch ($group) {\n              case \"RENEWAL\":\n                $forms = array_values((array) $RenewalForms);\n                break;\n              case \"CUSTOM\":\n                $forms = array_values((array) $CustomForms);\n                break;\n            }\n\n            if ($result = $this->ParseForms($forms[0])) {\n              $forms_requested[$group] = $result;\n            }\n          }\n\n          if ($result = array_values((array) $Residents)) {\n            $resident_contact_info = (array) $result[0];\n          }\n\n          $resident_signers = array();\n\n          foreach ($resident_contact_info as $resident) {\n            $resident_signers[] = new SignerShort($resident, false);\n          }\n\n          return $this->NewEsignature($OwnerRep, $resident_signers, $LeaseId, $SendOwnerRepNotices, $forms_requested, true);\n        }\n        else {\n          throw new SoapFault(\"Sender\", \"Invalid LeaseId.\");\n        }\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Electronic signature feature is not enabled for this license.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  /**\n   * Resend electronic signature notification email to resident\n   *\n   * @param string $SessionId\n   * @param string $SignerKey\n   * @param string $Email\n   * @return boolean\n   */\n  public function ResendEsignatureRequest($SessionId, $SignerKey, $Email = null) {\n    if ($this->TestSessionId($SessionId)) {\n      if (isset($this->customer_data[\"ESIGN\"])) {\n        $valid_signer_key = false;\n\n        $result = $this->dbh->get_esign_signer_data($SignerKey);\n\n        if ($result !== false) {\n          $esign_signer_data = $result;\n\n          $esign_id = $esign_signer_data[\"ESIGN_ID\"];\n\n          $lease_key = $this->GenerateEsignatureKey($esign_id, \"OWNER\");\n\n          if ($SignerKey !== $lease_key) {\n            $result = $this->dbh->get_esign_data($esign_id);\n\n            if ($result !== false) {\n              $esign_data = $result;\n\n              $properties = $this->dbh->get_properties($this->user_data[\"SERIALNUMBER\"]);\n\n              $i = 0;\n\n              while (!$valid_signer_key && $i<count($properties)) {\n                if ($valid_signer_key = $esign_data[\"PROPERTYNUMBER\"] === $properties[$i][\"number\"]) {\n                  $property_number = $esign_data[\"PROPERTYNUMBER\"];\n\n                  if ($result = $this->dbh->get_property_data($property_number)) {\n                    $property_data = $result;\n\n                    $db_type = strtolower($property_data[\"DBTYPE\"]);\n                  }\n                }\n\n                $i++;\n              }\n            }\n          }\n        }\n\n        if ($valid_signer_key) {\n          $new_esignature = $this->dbh->test_new_esignature();\n\n          if (!isset($esign_signer_data[\"DATESIGNED\"])) {\n            $current_timestamp = time();\n\n            $exp_timestamp = strtotime(date(\"m/d/Y\", strtotime($esign_data[\"DATEINITIATED\"])) . \" +\" . (ESIGN_MAX_DAYS + 1) . \" days\");\n\n            $transaction_active = $current_timestamp < $exp_timestamp;\n\n            if ($result = $this->dbh->get_all_esign_signers($esign_id)) {\n              $esign_signers = $result;\n\n              if (in_array($lease_key, $esign_signers)) {\n                $result = $this->dbh->get_esign_signer_data($lease_key);\n\n                if ($result !== false) {\n                  $esign_owner_data = $result;\n\n                  $new_esignature = $new_esignature && isset($esign_owner_data[\"FORMPAGES\"]);\n\n                  if (!isset($esign_owner_data[\"DATESIGNED\"])) {\n                    if ($transaction_active) {\n                      if ($lease_term_started = isset($esign_data[\"BEGLEASE\"])) {\n                        $lease_term_started = time() >= strtotime($esign_data[\"BEGLEASE\"] . \" +1 day\");\n                      }\n\n                      if (!$lease_term_started) {\n                        // If not OTS, check that resend is triggered on \"next\" signer\n                        if ($this->dbh->test_on_the_spot() == false) {\n                          if ($new_esignature) {\n                            $signer_info = parse_ini_file($this->GetFilePath(BASE_DIR . \"cgi-bin/forms_online/*/signers.ini.php\", $this->customer_data[\"STATE\"]), true);\n\n                            $max_residents = $signer_info[\"RESIDENT\"][\"max\"];\n                            $resident_field_prefix = $signer_info[\"RESIDENT\"][\"prefix\"];\n\n                            $unsigned_residents = array();\n\n                            for ($i=1; $i<=$max_residents; $i++) {\n                              $resident_field = $resident_field_prefix . $i;\n\n                              $current_signer_key = $this->GenerateEsignatureKey($esign_id, $resident_field);\n\n                              if (in_array($current_signer_key, $esign_signers)) {\n                                switch ($current_signer_key) {\n                                  case $SignerKey:\n                                    break 2;\n                                  default:\n                                    if ($result = $this->dbh->get_esign_signer_data($current_signer_key)) {\n                                      if (!isset($result[\"DATESIGNED\"])) {\n                                        $unsigned_residents[] = $result[\"NAME\"];\n                                      }\n                                    }\n                                    break;\n                                }\n                              }\n                            }\n\n                            if (!empty($unsigned_residents)) {\n                              throw new SoapFault(\"Sender\", \"Because parties must sign in same sequence as names appear on lease document, signature request for \" . $esign_signer_data[\"NAME\"] . \" cannot be sent until signatures for following parties have been collected (in order): \" . join(\", \", $unsigned_residents));\n                            }\n                          }\n                        }\n\n                        require_once(BASE_DIR . \"cgi-bin/test_format.php\");\n\n                        if (trim($Email) !== \"\") {\n                          $result = valid_format(\"email\", $Email);\n\n                          if ($result !== false) {\n                            $Email = $result;\n                          }\n                          else {\n                            throw new SoapFault(\"Sender\", \"'\" . $Email . \"' value is not a recognized Email format.\");\n                          }\n                        }\n                        else {\n                          $Email = $esign_signer_data[\"EMAIL\"];\n                        }\n\n                        if ($Email !== $esign_signer_data[\"EMAIL\"]) {\n                          if (!($this->user_data[\"PRIV\"] === \"3\" && $this->user_data[\"NOMANAGEESIGN\"] === \"T\")) {\n                            $new_esign_signer_data = $esign_signer_data;\n\n                            $new_esign_signer_data[\"EMAIL\"] = $Email;\n\n                            if ($this->dbh->save_esign_signer_data($new_esign_signer_data)) {\n                              $esign_signer_data = $new_esign_signer_data;\n                            }\n                            else {\n                              throw new SoapFault(\"Receiver\", \"Unable to update signer Email.\");\n                            }\n                          }\n                          else {\n                            throw new SoapFault(\"Sender\", \"Permission to update signer Email denied.\");\n                          }\n                        }\n\n                        if ($new_esignature) {\n                          $target = \"https://\" . NEW_HOST_NAME . \"/esignature/event/document/resend/\" . rawurlencode($SignerKey);\n\n                          if (!$result = $this->SignalPortal($target)) {\n                            throw new SoapFault(\"Receiver\", \"Error encountered in E-signature engine.\");\n                          }\n                        }\n                        else {\n                          $assoc = $this->GetAssoc($this->customer_data[\"STATE\"]);\n\n                          require_once(BASE_DIR . \"cgi-bin/esign/global.php\");\n                          require_once(BASE_DIR . \"cgi-bin/forms_online/email.php\");\n\n                          $owner_address = array();\n\n                          switch ($db_type) {\n                            case \"aptdb\":\n                            case \"storagedb\":\n                              $company_name = $property_data[\"PROPERTYNAME\"];\n\n                              if (trim($property_data[\"ADDRESS\"]) !== \"\") {\n                                $owner_address[] = trim($property_data[\"ADDRESS\"]);\n                              }\n\n                              switch ($assoc) {\n                                case \"UKAA\":\n                                  if (trim($property_data[\"ADDRESS2\"]) !== \"\") {\n                                    $owner_address[] = trim($property_data[\"ADDRESS2\"]);\n                                  }\n                                  break;\n                              }\n\n                              $state_abbrev = $this->dbh->get_state_abbrev($this->customer_data[\"STATE\"]);\n\n                              $result = get_citystzip($property_data[\"CITY\"], $state_abbrev, $property_data[\"ZIP\"]);\n\n                              if ($result !== \"\") {\n                                $owner_address[] = $result;\n                              }\n                              break;\n                            default:\n                              $company_name = $this->customer_data[\"COMPANYNAME\"];\n\n                              if (trim($this->customer_data[\"ADDRESS\"]) !== \"\") {\n                                $owner_address[] = trim($this->customer_data[\"ADDRESS\"]);\n                              }\n\n                              if (trim($this->customer_data[\"CITYSTZIP\"]) !== \"\") {\n                                $owner_address[] = trim($this->customer_data[\"CITYSTZIP\"]);\n                              }\n                              break;\n                          }\n\n                          $result = send_esign_resident_request($esign_signer_data[\"NAME\"], $esign_signer_data[\"EMAIL\"], $esign_owner_data[\"NAME\"], $owner_address, $esign_owner_data[\"EMAIL\"], $esign_owner_data[\"PHONE\"], $esign_data[\"RENEWAL\"] === \"T\", $this->customer_data[\"RENTALAPP\"] == 1, $company_name, $this->customer_data[\"STATE\"], $assoc, $SignerKey, $esign_data[\"BEGLEASE\"], $esign_data[\"DATEINITIATED\"]);\n                        }\n\n                        return $result;\n                      }\n                      else {\n                        throw new SoapFault(\"Sender\", \"Cannot request signature after start of lease term.\");\n                      }\n                    }\n                    else {\n                      throw new SoapFault(\"Sender\", \"Electronic signature transaction has expired.\");\n                    }\n                  }\n                  else {\n                    throw new SoapFault(\"Sender\", \"Lease document has already been executed.\");\n                  }\n                }\n                else {\n                  throw new SoapFault(\"Receiver\", \"Unable to locate owner information.\");\n                }\n              }\n              else {\n                throw new SoapFault(\"Receiver\", \"Incomplete E-signature record.\");\n              }\n            }\n            else {\n              throw new SoapFault(\"Receiver\", \"Unable to locate signer information.\");\n            }\n          }\n          else {\n            throw new SoapFault(\"Sender\", \"This party has already signed lease document.\");\n          }\n        }\n        else {\n          throw new SoapFault(\"Sender\", \"Invalid SignerKey.\");\n        }\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Electronic signature feature is not enabled for this license.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"Invalid SessionId.\");\n    }\n  }\n\n  protected function FetchCustomFields($PropertyId, $restricted_form_id = null, $filter_by_forms = null) {\n    $fields = array();\n\n    if (isset($restricted_form_id)) {\n      $result = $this->dbh->get_member_single_form_field_meta($this->customer_data[\"COMPANYNUMBER\"], $restricted_form_id);\n\n      if ($result !== false) {\n        $field_meta = $result;\n\n        $result = $this->dbh->get_member_single_form_field_info($this->customer_data[\"COMPANYNUMBER\"], $restricted_form_id);\n      }\n    }\n    else {\n      if (!empty($filter_by_forms)) {\n        $valid_form_info = array();\n\n        $valid_form_info[] = $this->dbh->get_valid_member_forms($this->customer_data[\"COMPANYNUMBER\"], $PropertyId);\n        $valid_form_info[] = $this->dbh->get_valid_member_single_forms($this->customer_data[\"COMPANYNUMBER\"], $PropertyId);\n\n        $valid_forms = array();\n\n        for ($i=0; $i<count($valid_form_info); $i++) {\n          foreach ($valid_form_info[$i] as $section_id => $info) {\n            foreach ($info as $form_data) {\n              if (!in_array($form_data[\"FORMID\"], $valid_forms)) {\n                $valid_forms[] = $form_data[\"FORMID\"];\n              }\n            }\n          }\n        }\n\n        foreach ($filter_by_forms as $form_id) {\n          if (!in_array($form_id, $valid_forms)) {\n            throw new SoapFault(\"Sender\", \"Form [\" . $form_id . \"] is not available.\");\n          }\n        }\n      }\n\n      $result = $this->dbh->get_member_field_meta($this->customer_data[\"COMPANYNUMBER\"], false, $filter_by_forms);\n\n      if ($result !== false) {\n        $field_meta = $result;\n\n        $result = $this->dbh->get_member_field_info($this->customer_data[\"COMPANYNUMBER\"]);\n      }\n    }\n\n    if ($result !== false) {\n      $field_info = array_intersect_key($result, $field_meta);\n\n      foreach ($field_info as $dtd_alias => $field_names) {\n        $fields[] = new Field($dtd_alias, $field_meta[$dtd_alias][\"type\"], $field_meta[$dtd_alias][\"maxlength\"], (bool) $field_meta[$dtd_alias][\"required\"]);\n      }\n    }\n\n    return $fields;\n  }\n\n  protected function FetchCustomForms($PropertyId, $ExcludeEsignatureRestrictedForms, $single_forms = false) {\n    $forms = array();\n\n    if ($single_forms) {\n      $valid_forms = $this->dbh->get_valid_member_single_forms($this->customer_data[\"COMPANYNUMBER\"], $PropertyId);\n    }\n    else {\n      $valid_forms = $this->dbh->get_valid_member_forms($this->customer_data[\"COMPANYNUMBER\"], $PropertyId);\n    }\n\n    if (!empty($valid_forms)) {\n      $unit_based_billing = $this->customer_data[\"UNITBASEDBILLING\"] === \"T\";\n\n      $assoc = $this->GetAssoc($this->customer_data[\"STATE\"]);\n\n      $unique_forms = array();\n\n      foreach ($valid_forms as $form_data) {\n        for ($i=0; $i<count($form_data); $i++) {\n          /**\n            * Exclude non-English language forms per Pivotal story #110924824\n            *\n            * Revised per Pivotal story #116242245 to key off of string language name, not numeric language ID\n            */\n          if (!$include_form = (string) $form_data[$i][\"LANGUAGE\"] === \"\") {  // If language name is not set, assume English\n            switch ($form_data[$i][\"LANGUAGE\"]) {\n              case \"english\":\n                $include_form = true;\n                break;\n            }\n          }\n\n          if ($include_form && !($ExcludeEsignatureRestrictedForms && $form_data[$i][\"ESIGNRESTRICTED\"] === \"T\")) {\n            $form_id = $form_data[$i][\"FORMID\"];\n\n            if (!in_array($form_id, $unique_forms)) {\n              $unique_forms[] = $form_id;\n\n              if (!$unit_based_billing && $form_data[$i][\"COST\"] - 0) {\n                switch ($assoc) {\n                  case \"AANC\":\n                  case \"GAA\":\n                    $form_cost = (string) number_format($form_data[$i][\"COST\"], 2);\n                    break;\n                  default:\n                    $form_cost = (int) $form_data[$i][\"COST\"];\n                    break;\n                }\n              }\n              else $form_cost = null;\n\n              /**\n                * Decide whether to publish number of copies to be printed per Pivotal story #111692804\n                */\n              switch ($assoc) {\n                case \"GAA\":\n                case \"NAA\":\n                  $form_data_copies = null;  // Don't publish\n                  break;\n                default:\n                  $form_data_copies = $form_data[$i][\"COPIES\"];  // Publish\n                  break;\n              }\n\n              $forms[] = new Form($form_id, $form_data[$i][\"LABEL\"], $form_data_copies, $form_cost, $form_data[$i][\"PAPERSIZE\"], $form_data[$i][\"LANGUAGE\"]);\n            }\n          }\n        }\n      }\n    }\n\n    return $forms;\n  }\n\n  protected function FetchDefaultFields($PropertyId, $renewal = false) {\n    $fields = array();\n\n    if ($result = $this->dbh->get_property_data($PropertyId)) {\n      $property_data = $result;\n\n      $db_type = strtolower($property_data[\"DBTYPE\"]);\n    }\n\n    $result = $this->dbh->get_lease_field_meta($this->customer_data[\"STATE\"], $db_type, true, $renewal);\n\n    if ($result !== false) {\n      $field_meta = $result;\n\n      $result = $this->dbh->get_lease_field_info($this->customer_data[\"STATE\"], $db_type, true, $renewal);\n\n      if ($result !== false) {\n        $field_info = array_intersect_key($result, $field_meta);\n\n        foreach ($field_info as $dtd_alias => $field_names) {\n          $fields[] = new Field($dtd_alias, $field_meta[$dtd_alias][\"type\"], $field_meta[$dtd_alias][\"maxlength\"], false);\n        }\n      }\n    }\n\n    return $fields;\n  }\n\n  protected function FetchDefaultXML($PropertyId, $db_type, $renewal = false) {\n    $writer = new XMLWriter();\n\n    $writer->openMemory();\n\n    $writer->startDocument(\"1.0\", self::XML_ENCODING);\n\n    $writer->setIndent(true);\n\n    $writer->startElement(\"LEASE\");\n\n    if ($property_data = $this->dbh->get_property_data($PropertyId)) {\n      $assoc = $this->GetAssoc($this->customer_data[\"STATE\"]);\n\n      foreach ($this->dtd_groups as $group) {\n        switch ($group) {\n          case \"RENEWAL\":\n            $valid_group = $renewal;\n            break;\n          case \"STANDARD\":\n            $valid_group = !$renewal;\n            break;\n          default:\n            $valid_group = true;\n            break;\n        }\n\n        if (!$valid_group) continue;\n\n        switch ($group) {\n          case \"RENEWAL\":\n          case \"STANDARD\":\n            $lease_data = $this->dbh->get_default_lease_data($PropertyId);\n\n            if ($result = !empty($lease_data)) {\n              switch ($assoc) {\n                case \"TSSA\":\n                  break;\n                default:\n                  switch ($db_type) {\n                    case \"aptdb\":\n                      if ((string) $lease_data[\"ADDRESS\"] === \"\") {\n                        $lease_data[\"ADDRESS\"] = $property_data[\"ADDRESS\"];\n                      }\n\n                      switch ($assoc) {\n                        case \"UKAA\":\n                          if ((string) $lease_data[\"ADDRESS2\"] === \"\") {\n                            $lease_data[\"ADDRESS2\"] = $property_data[\"ADDRESS2\"];\n                          }\n                          break;\n                      }\n                      break;\n                  }\n                  break;\n              }\n\n              $result = $this->dbh->get_lease_field_meta($this->customer_data[\"STATE\"], $db_type, true, $renewal);\n\n              if ($result !== false) {\n                $field_meta = $result;\n\n                $result = $this->dbh->get_lease_field_info($this->customer_data[\"STATE\"], $db_type, true, $renewal);\n              }\n            }\n            break;\n          case \"CUSTOM\":\n            $lease_data = $this->dbh->get_default_member_field_data($this->customer_data[\"COMPANYNUMBER\"], $PropertyId);\n\n            if ($result = !empty($lease_data)) {\n              $result = $this->dbh->get_member_field_meta($this->customer_data[\"COMPANYNUMBER\"]);\n\n              if ($result !== false) {\n                $field_meta = $result;\n\n                $result = $this->dbh->get_member_field_info($this->customer_data[\"COMPANYNUMBER\"], true);\n              }\n            }\n            break;\n        }\n\n        if ($result !== false) {\n          $field_info = array_intersect_key($result, $field_meta);\n\n          $writer->startElement($group);\n\n          foreach ($field_info as $dtd_alias => $field_names) {\n            $val = null;\n\n            $valid_dtd_alias = false;\n\n            foreach ($field_names as $group_id => $name) {\n              if (array_key_exists($name, $lease_data)) {\n                $valid_dtd_alias = true;\n\n                if (count($field_names) > 1) {\n                  if ((string) $lease_data[$name] !== \"\") {\n                    $val = $group_id;\n                    break;\n                  }\n                }\n                else {\n                  switch ($field_meta[$dtd_alias][\"type\"]) {\n                    case \"boolean\":\n                      if ((string) $lease_data[$name] !== \"\") $val = \"T\";\n                      else $val = \"F\";\n                      break;\n                    default:\n                      if ((string) $lease_data[$name] !== \"\") {\n                        $val = $lease_data[$name];\n                      }\n                      break;\n                  }\n                  break;\n                }\n              }\n            }\n\n            if ($valid_dtd_alias) {\n              $writer->writeElement($dtd_alias, $val);\n            }\n          }\n\n          $writer->endElement();\n        }\n      }\n    }\n\n    $writer->endElement();\n\n    $writer->endDocument();\n\n    return $writer->outputMemory();\n  }\n\n  protected function FetchEsignaturePDF($SignerKey, $esign_data, $db_type, $new_esignature) {\n    $esign_id = $esign_data[\"ID\"];\n\n    $current_timestamp = time();\n\n    $exp_timestamp = strtotime(date(\"m/d/Y\", strtotime($esign_data[\"DATEINITIATED\"])) . \" +\" . (ESIGN_MAX_DAYS + 1) . \" days\");\n\n    $transaction_active = $current_timestamp < $exp_timestamp;\n\n    if ($result = $this->dbh->get_all_esign_signers($esign_id)) {\n      $esign_signers = $result;\n\n      $lease_key = $this->GenerateEsignatureKey($esign_id, \"OWNER\");\n\n      if ((string) $SignerKey === \"\") {\n        $SignerKey = $lease_key;\n      }\n      else {\n        if (!in_array($SignerKey, $esign_signers)) {\n          throw new SoapFault(\"Sender\", \"SignerId not valid for specified EsignatureId.\");\n        }\n      }\n\n      if (in_array($lease_key, $esign_signers)) {\n        $signer_is_owner = $SignerKey === $lease_key;\n\n        $result = $this->dbh->get_esign_signer_data($lease_key);\n\n        if ($result !== false) {\n          $esign_owner_data = $result;\n\n          $new_esignature = $new_esignature && isset($esign_owner_data[\"FORMPAGES\"]);\n\n          $signer_info = parse_ini_file($this->GetFilePath(BASE_DIR . \"cgi-bin/forms_online/*/signers.ini.php\", $this->customer_data[\"STATE\"]), true);\n\n          $lease_executed = isset($esign_owner_data[\"DATESIGNED\"]);\n\n          if ($new_esignature) {\n            $signatures = array();\n            $initials = array();\n\n            $esign_signer_histories = array(\n              $lease_key => $this->dbh->get_esign_signer_history($lease_key)\n            );\n\n            if ($receipt_attached = $lease_executed && isset($esign_owner_data[\"CAPTUREDNAME\"], $esign_owner_data[\"CAPTUREDINITIALS\"])) {\n              $audit_data = array();\n            }\n          }\n          else {\n            if ($receipt_attached = $lease_executed) {\n              $receipt_data = array();\n            }\n\n            if ($result = $this->dbh->get_esign_special_forms()) {\n              if ($esign_special_forms = array_intersect($result, explode(\",\", $esign_owner_data[\"FORMS\"]))) {\n                if (!$signer_is_owner) {\n                  for ($i=1; $i<=$signer_info[\"RESIDENT\"][\"max\"]; $i++) {\n                    if ($SignerKey === $this->GenerateEsignatureKey($esign_id, $signer_info[\"RESIDENT\"][\"prefix\"] . $i)) {\n                      foreach ($esign_special_forms as $form_id) {\n                        if ($result = $this->dbh->get_esign_special_forms_signer_data($SignerKey, $form_id)) {\n                          if (!isset($result[\"DATESIGNED\"])) {\n                            $special_form_unsigned = $form_id;\n                            break;\n                          }\n                        }\n                      }\n                      break;\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          if ($transaction_active) {\n            $this->trans_dbh = new transactions();\n\n            $result = $this->trans_dbh->get_esign_pdf($lease_key);\n\n            if ($result !== false) {\n              $lease_document = $result;\n            }\n            else {\n              throw new SoapFault(\"Receiver\", \"Error loading archived lease document.\");\n            }\n          }\n          else {\n            if ($receipt_attached) {\n              if (!$signer_is_owner) {\n                throw new SoapFault(\"Sender\", \"Lease document not found.\");\n              }\n            }\n            else {\n              throw new SoapFault(\"Sender\", \"Electronic signature transaction expired before document was executed.\");\n            }\n          }\n\n          $pdfs = array();\n\n          $esign_signer_info = array();\n          $esign_signer_types = array();\n          $esign_type_counts = array();\n\n          foreach ($signer_info as $type => $info) {\n            $esign_type_counts[$type] = 0;\n\n            for ($i=1; $i<=$info[\"max\"]; $i++) {\n              $signer_field = $info[\"prefix\"] . $i;\n\n              $current_signer_key = $this->GenerateEsignatureKey($esign_id, $signer_field);\n\n              if (in_array($current_signer_key, $esign_signers)) {\n                if (isset($lease_document) && !isset($special_form_unsigned)) {\n                  switch ($SignerKey) {\n                    case $lease_key:\n                    case $current_signer_key:\n                      $result = $this->trans_dbh->get_esign_pdf($current_signer_key);\n\n                      if ($result !== false) {\n                        $pdfs[$current_signer_key] = $result;\n                      }\n                      break;\n                  }\n                }\n\n                if ($result = $this->dbh->get_esign_signer_data($current_signer_key)) {\n                  $esign_signer_info[$signer_field] = $result;\n\n                  $esign_signer_types[$current_signer_key] = $type;\n\n                  $esign_type_counts[$type]++;\n\n                  if ($new_esignature) {\n                    if ((string) $esign_signer_info[$signer_field][\"DATESIGNED\"] !== \"\") {\n                      if ($result = $this->dbh->get_esign_signer_history($current_signer_key)) {\n                        $esign_signer_histories[$current_signer_key] = $result;\n                      }\n                    }\n                  }\n\n                  if ($receipt_attached) {\n                    if (!$new_esignature) {\n                      $receipt_data[$type . \"NAME\" . $i] = $esign_signer_info[$signer_field][\"NAME\"];\n                      $receipt_data[$type . \"EMAIL\" . $i] = $esign_signer_info[$signer_field][\"EMAIL\"];\n                      $receipt_data[$type . \"DATESIGNED\" . $i] = date(\"n/d/Y g:i:s A (T)\", strtotime($esign_signer_info[$signer_field][\"DATESIGNED\"]));\n                      $receipt_data[$type . \"KEY\" . $i] = $current_signer_key;\n                      $receipt_data[$type . \"IPADDRESS\" . $i] = $esign_signer_info[$signer_field][\"IPADDRESS\"];\n                      $receipt_data[$type . \"BROWSER\" . $i] = $esign_signer_info[$signer_field][\"BROWSERTYPE\"];\n                      $receipt_data[$type . \"ONSITE\" . $i] = $esign_signer_info[$signer_field][\"ONSITE\"];\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          if (isset($lease_document)) {\n            $pdfs[$lease_key] = $lease_document;\n          }\n\n          $esign_signer_info[\"LEASE\"] = $esign_owner_data;\n          $esign_signer_types[$lease_key] = \"OWNER\";\n\n          if (isset($esign_special_forms)) {\n            $esign_special_forms_signer_info = array();\n\n            foreach ($esign_special_forms as $form_id) {\n              $esign_special_forms_signer_info[$form_id] = array();\n\n              foreach ($esign_signer_info as $group => $esign_signer_data) {\n                $current_signer_key = $esign_signer_data[\"ID\"];\n\n                if ($esign_special_forms_signer_info[$form_id][$current_signer_key] = $this->dbh->get_esign_special_forms_signer_data($current_signer_key, $form_id)) {\n                  if ($receipt_attached) {\n                    if (isset($esign_special_forms_signer_info[$form_id][$current_signer_key][\"DATESIGNED\"])) {\n                      $index = preg_replace(\"/^\\w+(\\d+)$/\", \"$1\", $group);\n\n                      $receipt_data[$esign_signer_types[$current_signer_key] . $form_id . \"SIGNED\" . $index] = date(\"n/d/Y g:i:s A (T)\", strtotime($esign_special_forms_signer_info[$form_id][$current_signer_key][\"DATESIGNED\"]));\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          if ($receipt_attached) {\n            $form_labels = array();\n\n            $result = $this->dbh->get_form_data($this->customer_data[\"STATE\"], $db_type, null, $this->customer_data[\"COMPANYNUMBER\"], null, true);\n\n            if ($result !== false) {\n              $form_data = $result;\n\n              for ($i=0; $i<count($form_data); $i++) {\n                $form_id = strtoupper($form_data[$i][\"FORMID\"]);\n\n                $form_labels[$form_id] = $form_data[$i][\"LABEL\"];\n              }\n            }\n          }\n\n          if ($new_esignature) {\n            $signature_field_info = array();\n\n            $all_forms = array();\n          }\n\n          $total_pages = 0;\n\n          $i = 1;\n\n          foreach ($esign_signer_info as $group => $esign_signer_data) {\n            $current_signer_key = $esign_signer_data[\"ID\"];\n\n            if ($new_esignature) {\n              if ($receipt_attached) {\n                if (array_key_exists($current_signer_key, $esign_signer_histories)) {\n                  $audit_data[$current_signer_key] = array(\n                    \"NAME\" => $esign_signer_data[\"NAME\"],\n                    \"SIGNEDNAME\" => $esign_signer_data[\"SIGNEDNAME\"],\n                    \"EMAIL\" => $esign_signer_data[\"EMAIL\"],\n                    \"FORMS\" => array(),\n                    \"DATESIGNED\" => $esign_signer_data[\"DATESIGNED\"],\n                    \"IPADDRESS\" => $esign_signer_data[\"IPADDRESS\"],\n                    \"BROWSERTYPE\" => $esign_signer_data[\"BROWSERTYPE\"],\n                    \"ONSITE\" => $esign_signer_data['ONSITE'],\n                    \"DISCLOSURESIGNED\" => $esign_signer_data['DISCLOSUREAGREED'],\n                    \"VALIDATEDAT\" => $this->dbh->get_ots_validated_data($esign_id, $current_signer_key),\n                    \"OTSFLAG\" => $this->dbh->test_on_the_spot()\n                  );\n                }\n              }\n\n              if ((string) $esign_signer_data[\"CAPTUREDNAME\"] !== \"\") {\n                $signatures[$current_signer_key] = base64_decode($esign_signer_data[\"CAPTUREDNAME\"]);\n              }\n\n              if ((string) $esign_signer_data[\"CAPTUREDINITIALS\"] !== \"\") {\n                $initials[$current_signer_key] = base64_decode($esign_signer_data[\"CAPTUREDINITIALS\"]);\n              }\n            }\n\n            $include_form = $signer_is_owner;\n\n            switch ($current_signer_key) {\n              case $lease_key:\n              case $SignerKey:\n                $include_form = true;\n              default:\n                if ($include_form) {\n                  if ((string) $esign_signer_data[\"FORMS\"] !== \"\") {\n                    if ($forms_list = explode(',', $esign_signer_data[\"FORMS\"])) {\n                      $total_pages += $esign_signer_data[\"PAGECOUNT\"];\n\n                      if ($new_esignature) {\n                        $all_forms[$group] = array_combine($forms_list, explode(',', $esign_signer_data[\"FORMPAGES\"]));\n                      }\n                      else {\n                        if ($receipt_attached) {\n                          foreach ($form_labels as $form_id => $label) {\n                            if (in_array($form_id, $forms_list)) {\n                              $forms_list = array_values(array_diff($forms_list, array($form_id)));\n\n                              switch ($group) {\n                                case \"LEASE\":\n                                  break;\n                                default:\n                                  $type = $esign_signer_types[$current_signer_key];\n\n                                  if ($esign_type_counts[$type] > 1) {\n                                    $label .= \" - \" . $esign_signer_data[\"NAME\"];\n                                  }\n                                  break;\n                              }\n\n                              // Populate Form label field\n                              $receipt_data[\"FORM\" . $i] = $label;\n\n                              $i++;\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n                break;\n            }\n          }\n\n          if ($new_esignature) {\n            $pi = 1;\n\n            foreach ($all_forms as $group => $forms) {\n              $esign_signer_data = $esign_signer_info[$group];\n\n              foreach ($forms as $form_id => $page_count) {\n                foreach ($esign_signer_histories as $current_signer_key => $history) {\n                  if ($current_signer_key === $lease_key || $esign_signer_data[\"ID\"] === $current_signer_key || $esign_signer_data[\"ID\"] === $lease_key) {\n                    if (array_key_exists($form_id, $history)) {\n                      if ($receipt_attached) {\n                        $audit_data[$current_signer_key][\"FORMS\"][$form_id] = array(\n                          \"FIELDS\" => array()\n                        );\n\n                        if (array_key_exists($form_id, $form_labels)) {\n                          $audit_data[$current_signer_key][\"FORMS\"][$form_id][\"LABEL\"] = $form_labels[$form_id];\n                        }\n                      }\n\n                      foreach ($history[$form_id] as $field_name => $info) {\n                        if ($receipt_attached) {\n                          $audit_data[$current_signer_key][\"FORMS\"][$form_id][\"FIELDS\"][$field_name] = $info[\"DATESIGNED\"];\n                        }\n\n                        $page = $pi + $info[\"PAGE\"] - 1;\n\n                        if (!array_key_exists($page, $signature_field_info)) {\n                          $signature_field_info[$page] = array();\n                        }\n\n                        if (!array_key_exists($current_signer_key, $signature_field_info[$page])) {\n                          $signature_field_info[$page][$current_signer_key] = array();\n                        }\n\n                        $signature_field_info[$page][$current_signer_key][$field_name] = $info;\n                      }\n                    }\n                  }\n                }\n\n                $pi += $page_count;\n              }\n            }\n          }\n          else {\n            if ($receipt_attached) {\n              // Populate Owner fields\n              $receipt_data[\"OWNER\"] = $esign_owner_data[\"SIGNEDNAME\"];\n              $receipt_data[\"OWNERDATESIGNED\"] = date(\"n/d/Y g:i:s A (T)\", strtotime($esign_owner_data[\"DATESIGNED\"]));\n\n              // Populate Document Info fields\n              $receipt_data[\"DOCUMENTID\"] = $esign_id;\n              $receipt_data[\"LEASEDATE\"] = ($esign_data[\"DTOFLEAS\"] ? date(\"n/d/Y\", strtotime($esign_data[\"DTOFLEAS\"])) : \"N/A\");\n              $receipt_data[\"TOTALPAGES\"] = $total_pages;\n            }\n          }\n\n          return $this->GenerateEsignaturePDF($SignerKey, $esign_data, $pdfs, $receipt_data, $audit_data, $signature_field_info, $esign_special_forms_signer_info, $special_form_unsigned, $esign_signer_types, $signatures, $initials);\n        }\n        else {\n          throw new SoapFault(\"Receiver\", \"Unable to locate owner information.\");\n        }\n      }\n      else {\n        throw new SoapFault(\"Receiver\", \"Incomplete E-signature record.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Receiver\", \"Unable to locate signer information.\");\n    }\n  }\n\n  protected function FetchFields($PropertyId, $renewal = false, $restricted_form_id = null, $filter_by_forms = null) {\n    $fields = array();\n\n    if ($result = $this->dbh->get_property_data($PropertyId)) {\n      $property_data = $result;\n\n      $db_type = strtolower($property_data[\"DBTYPE\"]);\n    }\n\n    if (isset($restricted_form_id)) {\n      $result = $this->dbh->get_single_form_field_meta($this->customer_data[\"STATE\"], $restricted_form_id);\n\n      if ($result !== false) {\n        $field_meta = $result;\n\n        $result = $this->dbh->get_single_form_field_info($this->customer_data[\"STATE\"], $restricted_form_id);\n      }\n    }\n    else {\n      $field_meta = array();\n\n      if (!empty($filter_by_forms)) {\n        foreach ($filter_by_forms as $group => $forms) {\n          $valid_form_info = array();\n\n          switch ($group) {\n            case \"STANDARD\":\n              $valid_form_info[] = $this->dbh->get_valid_lease_forms($this->customer_data[\"STATE\"], $db_type, $renewal);\n\n              if (!$renewal) {\n                $valid_form_info[] = $this->dbh->get_valid_single_forms($this->customer_data[\"STATE\"], $db_type);\n              }\n              break;\n            case \"CUSTOM\":\n              $valid_form_info[] = $this->dbh->get_valid_member_forms($this->customer_data[\"COMPANYNUMBER\"], $PropertyId);\n\n              if (!$renewal) {\n                $valid_form_info[] = $this->dbh->get_valid_member_single_forms($this->customer_data[\"COMPANYNUMBER\"], $PropertyId);\n              }\n              break;\n          }\n\n          $valid_forms = array();\n\n          for ($i=0; $i<count($valid_form_info); $i++) {\n            foreach ($valid_form_info[$i] as $section_id => $info) {\n              foreach ($info as $form_data) {\n                if (!in_array($form_data[\"FORMID\"], $valid_forms)) {\n                  $valid_forms[] = $form_data[\"FORMID\"];\n                }\n              }\n            }\n          }\n\n          foreach ($forms as $form_id) {\n            if (!in_array($form_id, $valid_forms)) {\n              throw new SoapFault(\"Sender\", \"Form [\" . $form_id . \"] is not available.\");\n            }\n          }\n\n          $result = $this->dbh->get_lease_field_meta($this->customer_data[\"STATE\"], $db_type, false, $renewal, $forms, ($group === \"CUSTOM\" ? $this->customer_data[\"COMPANYNUMBER\"] : null));\n\n          if ($result !== false) {\n            $field_meta = array_merge($field_meta, $result);\n          }\n        }\n      }\n      else {\n        $result = $this->dbh->get_lease_field_meta($this->customer_data[\"STATE\"], $db_type, false, $renewal);\n\n        if ($result !== false) {\n          $field_meta = $result;\n        }\n      }\n\n      $result = $this->dbh->get_lease_field_info($this->customer_data[\"STATE\"], $db_type, true, $renewal);\n    }\n\n    if ($result !== false) {\n      $field_info = array_intersect_key($result, $field_meta);\n\n      foreach ($field_info as $dtd_alias => $field_names) {\n        $fields[] = new Field($dtd_alias, $field_meta[$dtd_alias][\"type\"], $field_meta[$dtd_alias][\"maxlength\"], (bool) $field_meta[$dtd_alias][\"required\"]);\n      }\n    }\n\n    return $fields;\n  }\n\n  protected function FetchForms($PropertyId, $LeaseId = null, $ExcludeEsignatureRestrictedForms, $renewal = false, $single_forms = false) {\n    $forms = array();\n\n    if ($result = $this->dbh->get_property_data($PropertyId)) {\n      $property_data = $result;\n\n      $db_type = strtolower($property_data[\"DBTYPE\"]);\n    }\n\n    if ($single_forms) {\n      $valid_forms = $this->dbh->get_valid_single_forms($this->customer_data[\"STATE\"], $db_type);\n    }\n    else {\n      $valid_forms = $this->dbh->get_valid_lease_forms($this->customer_data[\"STATE\"], $db_type, $renewal);\n    }\n\n    if (!empty($valid_forms)) {\n      $unit_based_billing = $this->customer_data[\"UNITBASEDBILLING\"] === \"T\";\n\n      $assoc = $this->GetAssoc($this->customer_data[\"STATE\"]);\n\n      if (isset($LeaseId)) {\n        if ($lease_printed = $this->dbh->test_lease_printed($LeaseId)) {\n          require_once(BASE_DIR . \"cgi-bin/forms_online/print.php\");\n\n          $form_types = $GLOBALS[\"form_types\"];\n        }\n      }\n\n      $unique_forms = array();\n\n      foreach ($valid_forms as $form_data) {\n        for ($i=0; $i<count($form_data); $i++) {\n          /**\n            * Exclude non-English language forms per Pivotal story #110924824\n            *\n            * Revised per Pivotal story #116242245 to key off of string language name, not numeric language ID\n            */\n          if (!$include_form = (string) $form_data[$i][\"LANGUAGE\"] === \"\") {  // If language name is not set, assume English\n            switch ($form_data[$i][\"LANGUAGE\"]) {\n              case \"english\":\n                $include_form = true;\n                break;\n            }\n          }\n\n          if ($include_form && !($ExcludeEsignatureRestrictedForms && $form_data[$i][\"ESIGNRESTRICTED\"] === \"T\")) {\n            $form_id = $form_data[$i][\"FORMID\"];\n\n            if (!in_array($form_id, $unique_forms)) {\n              $unique_forms[] = $form_id;\n\n              if (isset($LeaseId)) {\n                if ($lease_printed) {\n                  if (in_array($form_id, $form_types[\"lease_contracts\"])) {\n                    switch ($assoc) {\n                      case \"AANC\":\n                        $form_data[$i][\"COST\"] = 0.00;\n                        break;\n                      case \"TAA\":\n                        switch ($form_name) {\n                          case \"CONARREN\":\n                            $form_data[$i][\"COST\"] = 1;\n                            break 2;\n                        }\n                      default:\n                        $form_data[$i][\"COST\"] = 2;\n                        break;\n                    }\n                  }\n                }\n              }\n\n              if (!$unit_based_billing && $form_data[$i][\"COST\"] - 0) {\n                switch ($assoc) {\n                  case \"AANC\":\n                  case \"GAA\":\n                    $form_cost = (string) number_format($form_data[$i][\"COST\"], 2);\n                    break;\n                  default:\n                    $form_cost = (int) $form_data[$i][\"COST\"];\n                    break;\n                }\n              }\n              else {\n                $form_cost = null;\n              }\n\n              /**\n                * Decide whether to publish number of copies to be printed per Pivotal story #111692804\n                */\n              switch ($assoc) {\n                case \"GAA\":\n                case \"NAA\":\n                  $form_data_copies = null;  // Don't publish\n                  break;\n                default:\n                  $form_data_copies = $form_data[$i][\"COPIES\"];  // Publish\n                  break;\n              }\n\n              $forms[] = new Form($form_id, $form_data[$i][\"LABEL\"], $form_data_copies, $form_cost, $form_data[$i][\"PAPERSIZE\"], $form_data[$i][\"LANGUAGE\"]);\n            }\n          }\n        }\n      }\n    }\n\n    return $forms;\n  }\n\n  /**\n   * Fetch PDF is the shared PDF generation code of (at least) esign/non-esign pdf \n   * creation.  It, in turn calls soap_license->GeneratePDF which does the \n   * actual PDFLib work and makes the transaction.PRINT_TRANS entry.  \n   * @method FetchPDF\n   * @author Mike <michael@bluemoonforms.com>\n   * @author Jad <jad@bluemoonforms.com> (doc header and comments)\n   * @param  int $PropertyId : PROPERTYNUMBER attached to the forms generated.\n   * @param  array $lease_data : field => value pairs to populate the form.\n   * @param  array $forms_requested : group => array-of-forms to be included in the PDF\n   * @param  boolean $renewal : true if pdf is a lease renewal\n   * @param  boolean $esign : true if pdf is part of an esign transaction\n   * @param  boolean $sample : true if pdf should be watermarked as a sample\n   * @param  array $form_field_data : form => fields, custom restricted form fields.\n   * @return array $pdf_info : array passed back from GeneratePDF.  Includes pdf\n   * as well as some form info and the PRINT_TRANS ID.  See GeneratePDF for more.\n   */\n \n  protected function FetchPDF($PropertyId, $lease_data, $forms_requested, $renewal = false, $esign = false, $sample = false, $form_field_data = null) {\n    if (!empty($forms_requested)) {\n      if ($result = $this->dbh->get_property_data($PropertyId)) {\n        $property_data = $result;\n\n        $db_type = strtolower($property_data[\"DBTYPE\"]);\n      }\n\n      $lease_id = $lease_data[\"LEASE_ID\"];\n\n      $requested_form_info = array();\n\n      $max_rank = 0;\n\n      foreach ($forms_requested as $group => $forms_list) {\n        $forms_list = array_values(array_unique($forms_list));\n\n        switch ($group) {\n          case \"STANDARD\":\n          case \"RENEWAL\":\n            $valid_forms = $this->dbh->get_valid_lease_forms($this->customer_data[\"STATE\"], $db_type, $renewal);\n            break;\n          case \"OTHER\":\n            $valid_forms = $this->dbh->get_valid_single_forms($this->customer_data[\"STATE\"], $db_type);\n            break;\n          case \"CUSTOM\":\n          case \"CUSTOM_OTHER\":\n            switch ($group) {\n              case \"CUSTOM\":\n                $valid_forms = $this->dbh->get_valid_member_forms($this->customer_data[\"COMPANYNUMBER\"], $PropertyId);\n                break;\n              case \"CUSTOM_OTHER\":\n                $valid_forms = $this->dbh->get_valid_member_single_forms($this->customer_data[\"COMPANYNUMBER\"], $PropertyId);\n                break;\n            }\n\n            if ($valid_forms) {\n              if ($result = $this->dbh->get_member_field_data($this->customer_data[\"COMPANYNUMBER\"], $lease_id)) {\n                $member_field_data = $result;\n              }\n            }\n            break;\n        }\n\n        foreach ($forms_list as $form_id) {\n          $valid_form = false;\n\n          foreach ($valid_forms as $section_id => $forms) {\n            foreach ($forms as $form_data) {\n              if ($valid_form = $form_id === $form_data[\"FORMID\"]) {\n                if (!($esign && $form_data[\"ESIGNRESTRICTED\"] === \"T\")) {\n                  if ($form_data[\"RANK\"] > $max_rank) {\n                    $max_rank = (int) $form_data[\"RANK\"];\n                  }\n\n                  if (!array_key_exists($section_id, $requested_form_info)) {\n                    $requested_form_info[$section_id] = array();\n                  }\n                  break 2;\n                }\n                else {\n                  throw new SoapFault(\"Sender\", \"Form requested [\" . $form_id . \"] cannot be signed electronically.\");\n                }\n              }\n            }\n          }\n\n          if (!$valid_form) {\n            throw new SoapFault(\"Sender\", \"Form requested [\" . $form_id . \"] is not available.\");\n          }\n        }\n\n        foreach ($valid_forms as $section_id => $forms) {\n          foreach ($forms as $form_data) {\n            $index = array_search($form_data[\"FORMID\"], $forms_list);\n\n            if ($index !== false) {\n              unset($forms_list[$index]);\n\n              $requested_form_info[$section_id][] = $form_data;\n            }\n          }\n        }\n      }\n\n      $unit_based_billing = $this->customer_data[\"UNITBASEDBILLING\"] === \"T\";\n\n      $state = $this->customer_data[\"STATE\"];\n\n      $assoc = $this->GetAssoc($state);\n\n      $state_abbrev = $this->dbh->get_state_abbrev($state);\n\n      $signer_info = parse_ini_file($this->GetFilePath(BASE_DIR . \"cgi-bin/forms_online/*/signers.ini.php\", $state), true);\n\n      $GLOBALS[\"state\"] = $state;\n      $GLOBALS[\"assoc\"] = $assoc;\n      $GLOBALS[\"state_abbrev\"] = $state_abbrev;\n      $GLOBALS[\"signer_info\"] = $signer_info;\n\n      require_once(BASE_DIR . \"cgi-bin/forms_online/print.php\");\n\n      $association_data = $this->dbh->get_association_data($this->customer_data[\"ASSOCIATION\"]);\n\n      $unit_data = array();\n\n      if (isset($lease_data)) {\n        $unit_data = $lease_data;\n      }\n\n      if (isset($member_field_data)) {\n        foreach ($member_field_data as $key => $val) {\n          $unit_data[\"M_\" . $key] = $val;\n        }\n      }\n\n      $form_types = $GLOBALS[\"form_types\"];\n\n      $forms_to_generate = array();\n\n      $total_cost = 0;\n\n      $lease_selected = false;\n      $renewal_selected = false;\n\n      $lease_printed = (string) $lease_data[\"PRINTLEASE\"] === \"1\";\n\n      foreach ($requested_form_info as $forms) {\n        $rank = array();\n        $label = array();\n        $form_id = array();\n        $member_id = array();\n\n        foreach ($forms as $index => $form_data) {\n          $rank[$index] = (isset($form_data[\"RANK\"]) ? (int) $form_data[\"RANK\"] : $max_rank + 1);\n          $label[$index] = strtoupper($form_data[\"LABEL\"]);\n          $form_id[$index] = $form_data[\"FORMID\"];\n          $member_id[$index] = $form_data[\"MEMBER_ID\"];\n        }\n\n        array_multisort($rank, SORT_ASC, $label, SORT_ASC, $form_id, SORT_ASC, $member_id, SORT_DESC, $forms);\n\n        foreach ($forms as $form_data) {\n          $form_name = (isset($form_data[\"MEMBER_ID\"]) ? \"M_\" : \"\") . $form_data[\"FORMID\"];\n\n          if (is_array($form_field_data)) {\n            $custom_data = get_custom_data($association_data, $property_data, $this->customer_data, $unit_data);\n\n            if (array_key_exists($form_name, $form_field_data)) {\n              $restricted_form_fields = $form_field_data[$form_name];\n\n              if ($restricted_form_fields_file_path = $this->GetFilePath(BASE_DIR . \"cgi-bin/forms_online/\" . (isset($form_data[\"MEMBER_ID\"]) ? \"members\" : \"*\") . \"/print/restricted_form_fields/\" . $form_data[\"FORMID\"] . \".php\", $state, false, true)) {\n                require_once($restricted_form_fields_file_path);\n\n                if ($result = get_custom_restricted_form_field_data($restricted_form_fields)) {\n                  $restricted_form_fields = array_merge($restricted_form_fields, $result);\n                }\n              }\n\n              $custom_data = array_merge($custom_data, $restricted_form_fields);\n            }\n          }\n\n          if (in_array($form_name, $form_types[\"lease_contracts\"])) {\n            $lease_selected = true;\n\n            if ($lease_printed) {\n              switch ($assoc) {\n                case \"AANC\":\n                  $form_data[\"COST\"] = 0.00;\n                  break;\n                case \"TAA\":\n                  switch ($form_name) {\n                    case \"CONARREN\":\n                      $form_data[\"COST\"] = 1;\n                      break 2;\n                  }\n                default:\n                  $form_data[\"COST\"] = 2;\n                  break;\n              }\n            }\n          }\n          else if (in_array($form_name, $form_types[\"renewal_forms\"])) {\n            $renewal_selected = true;\n          }\n          else if (in_array($form_name, $form_types[\"roommate_amendment\"])) {\n            if (!isset($custom_data[\"OLDRESIDENTS\"])) {\n              throw new SoapFault(\"Sender\", \"Cannot generate \" . $form_data[\"LABEL\"] . \" because lease record does not contain valid amendment info.\");\n            }\n          }\n\n          $forms_to_generate[] = $form_name;\n\n          if (!($sample || $unit_based_billing)) {\n            $total_cost += $form_data[\"COST\"];\n          }\n        }\n      }\n\n      if ($esign) {\n        if (!($lease_selected || $renewal_selected)) {\n          throw new SoapFault(\"Sender\", \"E-signature request must include \" . ($renewal ? \"Renewal\" : \"Lease\") . \" form.\");\n        }\n\n        $new_esignature = $this->dbh->test_new_esignature();\n      }\n\n      if ($lease_selected || $renewal_selected) {\n        if (!($esign && $new_esignature)) {\n          if ($results = $this->dbh->get_esign_special_forms()) {\n            if ($esign_special_forms = array_intersect($results, $forms_to_generate)) {\n              $forms_to_generate = array_merge($esign_special_forms, array_diff($forms_to_generate, $esign_special_forms));\n            }\n          }\n        }\n      }\n\n      if ($cover_sheets = array_intersect($forms_to_generate, $form_types[\"cover_sheets\"])) {\n        $forms_to_generate = array_merge($cover_sheets, array_diff($forms_to_generate, $cover_sheets));\n      }\n\n      if ($total_cost <= $this->customer_data[\"COUNTER\"]) {\n        $print_data = array(\n          \"FORMS\" => join(\",\", $forms_to_generate),\n          \"CHARGE\" => $total_cost\n        );\n\n        $request_data = get_print_request_data($print_data, $association_data, $property_data, $this->customer_data, $unit_data, $custom_data);\n\n        $result = $this->GeneratePDF($PropertyId, $request_data, $esign, $sample, $lease_id);\n\n        if ($result !== false) {\n          $pdf_info = $result;\n\n          if (!$sample) {\n            if (array_key_exists(\"PRINTLEASE\", $lease_data)) {\n              if (($lease_selected || $renewal_selected) && !$lease_printed) {\n                if ((string) $lease_data[\"PRINTLEASE\"] !== \"2\") {\n                  $this->dbh->set_lease_printed($lease_id, $lease_selected);\n                }\n              }\n            }\n          }\n\n          return $pdf_info;\n        }\n        else {\n          throw new SoapFault(\"Receiver\", \"Unable to generate PDF.\");\n        }\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"Insufficient forms (clicks) available for this request.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"No forms were requested.\");\n    }\n  }\n\n  protected function FetchXML($LeaseId, $renewal = false) {\n    $writer = new XMLWriter();\n\n    $writer->openMemory();\n\n    $writer->startDocument(\"1.0\", self::XML_ENCODING);\n\n    $writer->setIndent(true);\n\n    $writer->startElement(\"LEASE\");\n\n    foreach ($this->dtd_groups as $group) {\n      switch ($group) {\n        case \"RENEWAL\":\n          $valid_group = $renewal;\n          break;\n        case \"STANDARD\":\n          $valid_group = !$renewal;\n          break;\n        default:\n          $valid_group = true;\n          break;\n      }\n\n      if (!$valid_group) continue;\n\n      switch ($group) {\n        case \"RENEWAL\":\n        case \"STANDARD\":\n          $lease_data = $this->dbh->get_lease_data($LeaseId);\n\n          if ($result = !empty($lease_data)) {\n            $result = $this->dbh->get_property_number_by_unit($LeaseId);\n\n            if ($result !== false) {\n              $property_number = $result;\n        \n              if ($result = $this->dbh->get_property_data($property_number)) {\n                $property_data = $result;\n\n                $db_type = strtolower($property_data[\"DBTYPE\"]);\n              }\n            }\n\n            $result = $this->dbh->get_lease_field_meta($this->customer_data[\"STATE\"], $db_type, false, $renewal);\n\n            if ($result !== false) {\n              $field_meta = $result;\n\n              $result = $this->dbh->get_lease_field_info($this->customer_data[\"STATE\"], $db_type, true, $renewal);\n            }\n          }\n          break;\n        case \"CUSTOM\":\n          $lease_data = $this->dbh->get_member_field_data($this->customer_data[\"COMPANYNUMBER\"], $LeaseId);\n\n          if ($result = !empty($lease_data)) {\n            $result = $this->dbh->get_member_field_meta($this->customer_data[\"COMPANYNUMBER\"]);\n\n            if ($result !== false) {\n              $field_meta = $result;\n\n              $result = $this->dbh->get_member_field_info($this->customer_data[\"COMPANYNUMBER\"]);\n            }\n          }\n          break;\n      }\n\n      if ($result !== false) {\n        $field_info = array_intersect_key($result, $field_meta);\n\n        $writer->startElement($group);\n\n        foreach ($field_info as $dtd_alias => $field_names) {\n          $val = null;\n\n          $valid_dtd_alias = false;\n\n          foreach ($field_names as $group_id => $name) {\n            if (array_key_exists($name, $lease_data)) {\n              $valid_dtd_alias = true;\n\n              if (count($field_names) > 1) {\n                if ((string) $lease_data[$name] !== \"\") {\n                  $val = $group_id;\n                  break;\n                }\n              }\n              else {\n                switch ($field_meta[$dtd_alias][\"type\"]) {\n                  case \"boolean\":\n                    if ((string) $lease_data[$name] !== \"\") $val = \"T\";\n                    else $val = \"F\";\n                    break;\n                  default:\n                    if ((string) $lease_data[$name] !== \"\") {\n                      $val = $lease_data[$name];\n                    }\n                    break;\n                }\n                break;\n              }\n            }\n          }\n\n          if ($valid_dtd_alias) {\n            $writer->writeElement($dtd_alias, $val);\n          }\n        }\n\n        $writer->endElement();\n      }\n    }\n\n    $writer->endElement();\n\n    $writer->endDocument();\n\n    return $writer->outputMemory();\n  }\n\n  protected function GenerateEsignatureKey($EsignatureId, $signer_field) {\n    return md5($EsignatureId . \",\" . $signer_field);\n  }\n\n  protected function GenerateEsignaturePDF($SignerKey, $esign_data, &$pdfs, $receipt_data = null, $audit_data = null, $signature_field_info = null, $esign_special_forms_signer_info = null, $special_form_unsigned = null, $esign_signer_types = null, $signatures = null, $initials = null) {\n    $esign_id = $esign_data[\"ID\"];\n\n    $lease_key = $this->GenerateEsignatureKey($esign_id, \"OWNER\");\n\n    $assoc = $this->GetAssoc($this->customer_data[\"STATE\"]);\n\n    switch ($this->customer_data[\"STATE\"]) {\n      case \"TAA\":\n        $assoc_label = $this->customer_data[\"STATE\"];\n        break;\n      default:\n        $assoc_label = $assoc;\n        break;\n    }\n\n    require_once(BASE_DIR . \"cgi-bin/pdf.php\");\n\n    $pdf_compatibility = DEFAULT_PDF_COMPATIBILITY;\n\n    $pdf_password = DEFAULT_PDF_PSWD;\n\n    foreach ($this->document_management_services as $service_abbrev => $service_data) {\n      if ($this->TestVendorId()) {\n        if (is_numeric($this->vendor_settings[\"PDFCOMPATIBILITY\"])) {\n          $pdf_compatibility = $this->vendor_settings[\"PDFCOMPATIBILITY\"];\n        }\n\n        if (isset($this->vendor_settings[\"PRINTKEY\"])) {\n          $pdf_password = $this->vendor_settings[\"PRINTKEY\"];\n        }\n      }\n      else {\n        if (isset($this->customer_data[\"VENDORID\"])) {\n          if ($vendor_info = $this->dbh->get_vendor_info($this->user_data[\"SERIALNUMBER\"])) {\n            $vendor_id = strtoupper($this->customer_data[\"VENDORID\"]);\n\n            if (is_numeric($vendor_info[$vendor_id][\"PDFCOMPATIBILITY\"])) {\n              $pdf_compatibility = $vendor_info[$vendor_id][\"PDFCOMPATIBILITY\"];\n            }\n\n            if ($vendor_info[$vendor_id][\"PRINTKEY\"]) {\n              $pdf_password = $vendor_info[$vendor_id][\"PRINTKEY\"];\n            }\n          }\n        }\n      }\n      break;\n    }\n\n    $pdf_permissions = array(\n      \"nomodify\",\n      \"noannots\"\n    );\n\n    if (isset($special_form_unsigned)) {\n      $pdf_permissions[] = \"noprint\";\n    }\n\n    try {\n      $p = new PDFlib();\n\n      if (file_exists(PDFLIB_LICENSE_PATH)) {\n        // Set path to PDFlib license file\n        $p->set_parameter(\"licensefile\", PDFLIB_LICENSE_PATH);\n      }\n\n      $document_options = array(\n        \"compatibility\" => $pdf_compatibility,\n        \"masterpassword\" => $pdf_password,\n        \"permissions\" => join(\" \", $pdf_permissions),\n        \"inmemory\" => \"true\",\n        \"linearize\" => \"true\"\n      );\n\n      $optlist = array();\n\n      foreach ($document_options as $opt => $val) {\n        $optlist[] = $opt . \"={\" . $val . \"}\";\n      }\n\n      $p->begin_document(\"\", join(\" \", $optlist));\n\n      // This line is required to avoid problems on Japanese systems\n      $p->set_parameter(\"hypertextencoding\", \"winansi\");\n\n      $embed_fonts = array(\n        \"winansi\" => array(\n          \"courbd\",\n          \"opensans\"\n        ),\n        \"builtin\" => array(\n          \"wingdng2\"\n        )\n      );\n\n      if ($receipt_attached = isset($receipt_data) || isset($audit_data)) {\n        $embed_fonts[\"winansi\"][] = \"verdanab\";\n\n        $assoc_logo_file_info = $this->GetAssocLogoFileInfo($assoc_label);\n      }\n\n      if (isset($signatures, $initials)) {\n        $embed_fonts[\"unicode\"] = array(\n          \"fontawesome\"\n        );\n\n        $esign_input_types_subpattern = $this->GetEsignInputTypesSubpattern(true);\n\n        $esign_input_type_pattern = \"/^E_\" . $esign_input_types_subpattern . \"/\";\n\n        $signature_file_paths = array();\n\n        foreach ($signatures as $current_signer_key => $data) {\n          $signature_file_paths[$current_signer_key] = \"/pvf/svg/signature/\" . $current_signer_key . \".svg\";  // Specify virtual file path to vectorized signature\n\n          $p->create_pvf($signature_file_paths[$current_signer_key], $data, \"copy\");\n        }\n\n        $initials_file_paths = array();\n\n        foreach ($initials as $current_signer_key => $data) {\n          $initials_file_paths[$current_signer_key] = \"/pvf/svg/initials/\" . $current_signer_key . \".svg\";  // Specify virtual file path to vectorized initials\n\n          $p->create_pvf($initials_file_paths[$current_signer_key], $data, \"copy\");\n        }\n      }\n\n      $fi = 1;\n\n      foreach ($embed_fonts as $encoding => $fonts) {\n        foreach ($fonts as $font) {\n          $p->set_parameter(\"FontOutline\", \"f\" . $fi . \"=\" . BASE_DIR . \"fonts/ttf/\" . $font . \".ttf\");\n\n          $$font = $p->load_font(\"f\" . $fi, $encoding, \"embedding=true\");\n\n          $GLOBALS[$font] = $$font;\n\n          $fi++;\n        }\n      }\n\n      $global_pi = 0;\n\n      foreach ($pdfs as $key => $pdf) {\n        $form_file_path = \"/pvf/pdf/\" . $key . \".pdf\";  // Specify virtual file path\n\n        $p->create_pvf($form_file_path, $pdf, \"\");\n\n        $form = $p->open_pdi_document($form_file_path, \"password {\" . DEFAULT_PDF_PSWD . \"} errorpolicy {exception}\");\n\n        if ($page_count = $p->get_pdi_value(\"/Root/Pages/Count\", $form, 0, 0)) {\n          $field_info = array();\n\n          if (isset($esign_special_forms_signer_info)) {\n            foreach ($esign_special_forms_signer_info as $form_id => $esign_special_forms_signer_data) {\n              $form_name = strtolower($form_id);\n\n              $form_file_path = BASE_DIR . \"forms/\" . strtolower($this->customer_data[\"STATE\"]) . \"/\";\n\n              if (file_exists($form_file_path . $form_name . \".dbd\")) {\n                if ($dbd = parse_ini_file($form_file_path . $form_name . \".dbd\", true)) {\n                  if (array_key_exists($lease_key, $esign_special_forms_signer_data)) {\n                    foreach ($dbd as $field_name => $info) {\n                      if (preg_match(\"/\" . $esign_signer_types[$lease_key] . \"_INITIALS\\d*$/i\", $field_name)) {\n                        for ($i=1; $i<=$esign_special_forms_signer_data[$lease_key][\"PAGECOUNT\"]; $i++) {\n                          if ($info['Page'] == $i) {\n                            $pi = $i + $esign_special_forms_signer_data[$lease_key][\"PAGEINDEX\"] - 1;\n\n                            if (!isset($field_info[$pi])) $field_info[$pi] = array();\n\n                            $field_info[$pi][] = array(\n                              $info,\n                              $esign_special_forms_signer_data[$lease_key][\"INITIALS\"]\n                            );\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          if (isset($special_form_unsigned)) {\n            $start_pi = $esign_special_forms_signer_info[$special_form_unsigned][$SignerKey][\"PAGEINDEX\"];\n\n            $np = $start_pi + $esign_special_forms_signer_info[$special_form_unsigned][$SignerKey][\"PAGECOUNT\"] - 1;\n          }\n          else {\n            $start_pi = 1;\n\n            $np = $page_count;\n          }\n\n          for ($pi = $start_pi; $pi <= $np; $pi++) {\n            $global_pi++;\n\n            $page = $p->open_pdi_page($form, $pi, \"errorpolicy {exception}\");\n\n            $pagewidth = $p->get_pdi_value(\"width\", $form, $page, 0);\n            $pageheight = $p->get_pdi_value(\"height\", $form, $page, 0);\n\n            // Establish coordinates with the origin in the upper left corner\n            $p->begin_page_ext($pagewidth, $pageheight, \"topdown=true\");\n\n            $p->fit_pdi_page($page, 0, $pageheight, \"\");\n\n            $p->close_pdi_page($page);\n\n            // Test whether current page contains electronically signed initials\n            if (isset($field_info[$pi])) {\n              for ($i=0; $i<count($field_info[$pi]); $i++) {\n                put_field($p, $field_info[$pi][$i][0], $field_info[$pi][$i][1], $courbd, true, true);\n              }\n            }\n\n            if (isset($signature_field_info, $signatures, $initials)) {\n              if (array_key_exists($global_pi, $signature_field_info)) {\n                foreach ($signature_field_info[$global_pi] as $current_signer_key => $fields) {\n                  foreach ($fields as $field_name => $info) {\n                    if ((string) $info[\"DATESIGNED\"] !== \"\") {\n                      if (preg_match($esign_input_type_pattern, $field_name, $matches)) {\n                        $field_info = array(\n                          \"Page\" => $info[\"PAGE\"],\n                          \"Top\" => (double) $info[\"YPOS\"],\n                          \"Left\" => (double) $info[\"XPOS\"],\n                          \"Right\" => (double) $info[\"XPOS\"] + (double) $info[\"WIDTH\"],\n                          \"Bottom\" => (double) $info[\"YPOS\"] + (double) $info[\"HEIGHT\"],\n                          \"ULIndent\" => (double) $info[\"ULINDENT\"],\n                          \"LRIndent\" => (double) $info[\"LRINDENT\"],\n                          \"LineSpacing\" => (double) $info[\"LINESPACING\"],\n                          \"Align\" => $info[\"ALIGN\"],\n                          \"BaseLnAdj\" => (double) $info[\"BASELINEADJ\"],\n                          \"Font\" => $info[\"FONT\"],\n                          \"FontHeight\" => (double) $info[\"FONTHEIGHT\"],\n                          \"FontColor\" => $info[\"FONTCOLOR\"],\n                          \"FontBold\" => $info[\"FONTBOLD\"],\n                          \"FontItalic\" => $info[\"FONTITALIC\"],\n                          \"FontUnderline\" => $info[\"FONTUNDERLINE\"]\n                        );\n\n                        switch ($matches[1]) {\n                          case \"CHECK\":\n                            // put_field($p, $field_info, \"U+F00D\", $fontawesome);  // Font Awesome icon\n                            put_field($p, $field_info, \"X\", $courbd);  // Courier Bold 'X'\n                            break;\n                          case \"DATE\":\n                            put_field($p, $field_info, date(\"m/d/Y\", strtotime($info[\"DATESIGNED\"])), $opensans);\n                            break;\n                          case \"INIT\":\n                            put_signature($p, $initials_file_paths[$current_signer_key], $field_info);\n                            break;\n                          case \"SIG\":\n                            put_signature($p, $signature_file_paths[$current_signer_key], $field_info);\n                            break;\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n\n            if ($receipt_attached) {\n              $p->save();\n\n              // Insert E-signature watermark\n              $pagecenter = $pagewidth / 2;\n\n              $checkboxsize = 10;\n\n              $font = $opensans;\n\n              $font_size = round($checkboxsize * 0.8);\n\n              $p->setfont($font, $font_size);\n\n              $text = \"This document was executed via the \" . $assoc_label . \" E-signature System - ID: \" . $esign_id;\n\n              $padding = 5;\n\n              $boxwidth = $p->stringwidth($text, $font, $font_size) + ($padding * 2);\n              $boxheight = $checkboxsize;\n\n              $pos_x = $pagecenter - ($boxwidth / 2) + ($checkboxsize / 2);\n              $pos_y = $pageheight - 16;\n\n              $p->fit_textline($text, $pos_x, $pos_y, \"fillcolor={rgb 1 1 1} matchbox={boxheight={fontsize descender} fillcolor={rgb 1 1 1} offsetleft=-\" . ($padding + $checkboxsize) . \" offsetright=\" . $padding . \"} boxsize={\" . $boxwidth . \" \" . $boxheight . \"} position={center} fitmethod=auto\");\n              $p->fit_textline($text, $pos_x, $pos_y, \"boxsize={\" . $boxwidth . \" \" . $boxheight . \"} position={center} showborder=true fitmethod=auto\");\n\n              $font = $wingdng2;\n\n              $font_size = round($checkboxsize * 1.8);\n\n              $p->setfont($font, $font_size);\n\n              $text = chr(80);\n\n              $p->fit_textline($text, $pos_x - $checkboxsize, $pos_y, \"boxsize={\" . $checkboxsize . \" \" . $checkboxsize . \"} position={left 40} showborder=true fitmethod=nofit\");\n\n              $p->restore();\n            }\n\n            $p->end_page_ext(\"\");\n          }\n        }\n\n        $p->close_pdi_document($form);\n\n        $p->delete_pvf($form_file_path);\n      }\n\n      if ($receipt_attached) {\n        if (isset($receipt_data)) {\n          // Attach receipt page\n          $form_name = \"receipt\";\n\n          $result = $this->GetReceiptFilePath($form_name);\n\n          if ($result !== false) {\n            $receipt_file_path = $result;\n\n            $dbd = parse_ini_file($receipt_file_path . $form_name . \".dbd\", true);\n\n            $form = $p->open_pdi_document(realpath($receipt_file_path . $form_name . \".pdf\"), \"password {\" . DEFAULT_PDF_PSWD . \"} errorpolicy {exception}\");\n\n            $np = $dbd['*Form*']['PageCount'];\n          }\n          else error_message(\"Unable to generate E-signature Receipt page\");  // Generate error\n\n          for ($pi = 1; $pi <= $np; $pi++) {\n            $page = $p->open_pdi_page($form, $pi, \"errorpolicy {exception}\");\n\n            if (!$is_service) {\n              $pagewidth = $dbd['*Form*']['Page' . $pi . ' Width'] * 72;\n              $pageheight = $dbd['*Form*']['Page' . $pi . ' Height'] * 72;\n            }\n\n            // Establish coordinates with the origin in the upper left corner\n            $p->begin_page_ext($pagewidth, $pageheight, \"topdown=true\");\n\n            $p->fit_pdi_page($page, 0, $pageheight, \"\");\n\n            $p->close_pdi_page($page);\n\n            if ($assoc_logo_file_info) {\n              // Insert E-signature logo\n              $p->save();\n\n              $pagecenter = $pagewidth / 2;\n\n              $header_height = 72;\n              $max_logo_height = $header_height - 20;\n\n              if ($assoc_logo_file_info[\"height\"] > $max_logo_height) {\n                $logo_width = ceil($assoc_logo_file_info[\"width\"] * ($max_logo_height / $assoc_logo_file_info[\"height\"]));\n                $logo_height = $max_logo_height;\n              }\n              else {\n                $logo_width = $assoc_logo_file_info[\"width\"];\n                $logo_height = $assoc_logo_file_info[\"height\"];\n              }\n\n              $p->setfont($verdanab, 16);\n\n              $text = \"Electronic Signature System\";\n\n              $boxwidth = 265;\n              $boxheight = $logo_height;\n\n              $pos_x = $pagecenter - ($boxwidth / 2) + ($logo_width / 2);\n              $pos_y = $header_height - floor(($header_height - $logo_height) / 2);\n\n              $p->fit_textline($text, $pos_x, $pos_y, \"boxsize={\" . $boxwidth . \" \" . $boxheight . \"} position={center center} fitmethod=auto\");\n\n              $p->restore();\n\n              $img = $p->load_image(\"auto\", realpath($_SERVER[\"DOCUMENT_ROOT\"] . $assoc_logo_file_info[\"path\"]), \"\");\n\n              $p->fit_image($img, $pos_x - $logo_width, $pos_y, \"boxsize={\" . $logo_width . \" \" . $logo_height . \"} fitmethod=auto\");\n\n              $p->close_image($img);\n            }\n\n            $dbd_fields = array_change_key_case(array_keys($dbd), CASE_UPPER);\n\n            $field_data = null;\n\n            foreach ($dbd as $field_name => $info) {\n              if ($info['Page'] == $pi) {\n                $field_data = $receipt_data[$field_name];\n\n                if ((string) $field_data !== \"\") {\n                  put_field($p, $info, $field_data, $courbd);\n                }\n              }\n            }\n\n            $p->end_page_ext(\"\");\n          }\n\n          $p->close_pdi_document($form);\n        }\n        else if (isset($audit_data)) {\n          $form_list = array();\n\n          $lease_form_ids = array_keys($audit_data[$lease_key][\"FORMS\"]);\n\n          foreach ($audit_data as $current_signer_key => $data) {\n            foreach ($data[\"FORMS\"] as $form_id => $info) {\n              $form_label = $info[\"LABEL\"];\n\n              switch ($current_signer_key) {\n                case $lease_key:\n                  $form_list[] = $form_label;\n                  break;\n                default:\n                  if (!in_array($form_id, $lease_form_ids)) {\n                    $form_list[] = $form_label . \" - \" . $data[\"NAME\"];\n                  }\n                  break;\n              }\n            }\n          }\n\n          $receipt_width = 8.5;\n\n          switch ($assoc) {\n            case \"AANC\":\n            case \"GAA\":\n            case \"TSSA\":\n              $receipt_height = 11;\n              break;\n            default:\n              $receipt_height = 14;\n              break;\n          }\n\n          // Attach receipt section\n          $document_data = array(\n            \"Status\" => \"Signed\",\n            \"Document ID\" => $esign_id,\n            \"Created\" => date(\"m/d/y\", strtotime($esign_data[\"DATEINITIATED\"])),\n            \"Completed\" => date(\"m/d/y\", strtotime($audit_data[$lease_key][\"DATESIGNED\"])),\n            \"Total Pages\" => $global_pi,\n            \"Forms Included\" => $form_list\n          );\n\n          switch ($db_type) {\n            case \"storagedb\":\n              $owner_title = \"Facility Manager\";\n              break;\n            default:\n              $owner_title = \"Owner Representative\";\n              break;\n          }\n\n          $owner_data = array(\n            $owner_title => $audit_data[$lease_key][\"SIGNEDNAME\"],\n            \"Date Signed\" => date(\"m/d/Y h:i:s A T\", strtotime($audit_data[$lease_key][\"DATESIGNED\"])),\n            \"key\" => $lease_key\n          );\n\n          foreach ($audit_data as $signer_key => $data){\n            $signing_method_data[$signer_key] = $this->dbh->get_signing_method_data($signer_key);\n          }\n\n          $er = new esign_receipt($p);\n\n          $er->set_page_w($receipt_width);\n          $er->set_page_h($receipt_height);\n          $er->set_font($opensans);\n          $er->set_logo($assoc_logo_file_info);\n          $er->set_esign_input_type_pattern($esign_input_type_pattern);\n\n          // Set data points\n          $er->set_document_data($document_data);\n          $er->set_owner_data($owner_data);\n          $er->set_audit_data($audit_data);\n          $er->set_signature_paths($signature_file_paths);\n          $er->set_initials_paths($initials_file_paths);\n          $er->set_signing_method_data($signing_method_data);\n\n          // Appends receipt section to PDF\n          $er->build_receipt();\n        }\n\n        if (isset($signature_file_paths)) {\n          foreach ($signature_file_paths as $current_signer_key => $signature_pvf_path) {\n            $p->delete_pvf($signature_pvf_path);\n          }\n        }\n\n        if (isset($initials_file_paths)) {\n          foreach ($initials_file_paths as $current_signer_key => $initials_pvf_path) {\n            $p->delete_pvf($initials_pvf_path);\n          }\n        }\n      }\n\n      $p->set_info(\"Creator\", PDF_CREATOR);\n      $p->set_info(\"Author\", PDF_AUTHOR);\n      $p->set_info(\"Title\", (isset($special_form_unsigned) ? $special_form_unsigned : \"Document ID: \" . $esign_id));\n\n      $p->end_document(\"\");\n\n      $pdf_buffer = $p->get_buffer();\n    }\n    catch (PDFlibException $e) {\n      $pdf_error = \"[\" . $e->get_errnum() . \"] \" . $e->get_apiname() . \": \" . $e->get_errmsg() . \" in \" . __FILE__ . \" on line \" . $e->getLine();\n\n      $this->LogError($pdf_error);\n    }\n\n    unset($p);\n\n    if (isset($pdf_buffer)) {\n      return $pdf_buffer;\n    }\n\n    return false;\n  }\n\n  protected function GetReceiptFilePath($form_id) {\n    $receipt_file_path = BASE_DIR . \"forms/esign/\" . strtolower($this->customer_data[\"STATE\"]) . \"/\";\n\n    if (!$valid_receipt_file_path = file_exists($receipt_file_path . $form_id . \".dbd\") && file_exists($receipt_file_path . $form_id . \".pdf\")) {\n      switch ($this->customer_data[\"STATE\"]) {\n        case \"AANC\":\n        case \"GAA\":\n        case \"TSSA\":\n          break;\n        default:\n          $assoc = $this->GetAssoc($this->customer_data[\"STATE\"]);\n\n          switch ($assoc) {\n            case \"NAA\":\n              $receipt_file_path = BASE_DIR . \"forms/esign/\";\n              break;\n            default:\n              $receipt_file_path = BASE_DIR . \"forms/esign/\" . strtolower($assoc) . \"/\";\n              break;\n          }\n\n          $valid_receipt_file_path = file_exists($receipt_file_path . $form_id . \".dbd\") && file_exists($receipt_file_path . $form_id . \".pdf\");\n          break;\n      }\n    }\n\n    if ($valid_receipt_file_path) return $receipt_file_path;\n\n    return $valid_receipt_file_path;\n  }\n\n  protected function NewEsignature($OwnerRep, $resident_signers, $LeaseId, $SendOwnerRepNotices, $forms_requested = null, $renewal = false, $PaymentRequested = null) {\n    require_once(BASE_DIR . \"cgi-bin/test_format.php\");\n\n    $OwnerRep->Name = trim($OwnerRep->Name);\n\n    if ($OwnerRep->Name === \"\") {\n      throw new SoapFault(\"Sender\", \"OwnerRep.Name value is empty.\");\n    }\n\n    if (trim($OwnerRep->Email) !== \"\") {\n      $result = valid_format(\"email\", $OwnerRep->Email);\n\n      if ($result !== false) {\n        $OwnerRep->Email = $result;\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"'\" . $OwnerRep->Email . \"' value passed for OwnerRep.Email is not a recognized format.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"OwnerRep.Email value is empty.\");\n    }\n\n    if (trim($OwnerRep->Phone) !== \"\") {\n      $result = valid_format(\"phone\", $OwnerRep->Phone);\n\n      if ($result !== false) {\n        $OwnerRep->Phone = $result;\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"'\" . $OwnerRep->Phone . \"' value passed for OwnerRep.Phone is not a recognized format.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Sender\", \"OwnerRep.Phone value is empty.\");\n    }\n\n    if ($result = $this->dbh->get_lease_data($LeaseId)) {\n      $lease_data = $result;\n\n      if ($renewal) {\n        if ((string) $lease_data[\"RENEWED\"] === \"\") {\n          throw new SoapFault(\"Sender\", \"Renewal forms cannot be generated for this record because lease has not been renewed.\");\n        }\n      }\n\n      if ((string) $lease_data[\"BEGLEASE\"] !== \"\") {\n        $assoc = $this->GetAssoc($this->customer_data[\"STATE\"]);\n\n        $signer_info = parse_ini_file($this->GetFilePath(BASE_DIR . \"cgi-bin/forms_online/*/signers.ini.php\", $this->customer_data[\"STATE\"]), true);\n\n        $max_residents = $signer_info[\"RESIDENT\"][\"max\"];\n        $resident_field_prefix = $signer_info[\"RESIDENT\"][\"prefix\"];\n\n        $unit_residents = array();\n\n        for ($i=1; $i<=$max_residents; $i++) {\n          $resident_field = $resident_field_prefix . $i;\n\n          if (trim($lease_data[$resident_field]) !== \"\") {\n            $unit_residents[$resident_field] = trim($lease_data[$resident_field]);\n          }\n        }\n\n        if (!empty($unit_residents)) {\n          $signers = array(\n            \"OWNER\" => new SignerShort($OwnerRep, false)\n            );\n\n          $signer_is_agent = false;\n\n          switch ($assoc) {\n            case \"TSSA\":\n              $resident_label = \"tenant\";\n\n              if ($signer_is_agent = (string) $lease_data[\"CBBUSINESS\"] !== \"\") {\n                $resident_label .= \"'s authorized agent\";\n              }\n              break;\n            default:\n              $resident_label = \"resident\";\n              break;\n          }\n          /*\n            switch ($assoc) {\n              case \"AANC\":\n              case \"ENG\":\n              case \"GAA\":\n              case \"TSSA\":\n                break;\n              default:\n                if (!isset($this->customer_data[\"RENTALAPP\"])) {\n                  throw new SoapFault(\"Sender\", \"E-signature request aborted because selectable option indicating usage of \" . $assoc . \" application form has not been configured in system settings.\");\n                }\n                break;\n            }\n          */\n          foreach ($unit_residents as $field => $name) {\n            $resident_matched = false;\n\n            foreach ($resident_signers as $index => $resident) {\n              $resident->Contact->Name = trim($resident->Contact->Name);\n\n              switch ($assoc) {\n                case \"TSSA\":\n                  if ($resident_matched = $signer_is_agent) {\n                    if ($resident->Contact->Name === \"\") {\n                      throw new SoapFault(\"Sender\", \"Name value for \" . $resident_label . \" is empty.\");\n                    }\n                    break;\n                  }\n                default:\n                  $resident_matched = strtoupper($name) === strtoupper($resident->Contact->Name);\n                  break;\n              }\n\n              if ($resident_matched) {\n                if (trim($resident->Contact->Email) !== \"\") {\n                  $result = valid_format(\"email\", $resident->Contact->Email);\n\n                  if ($result !== false) {\n                    $resident->Contact->Email = $result;\n                  }\n                  else {\n                    throw new SoapFault(\"Sender\", \"'\" . $resident->Contact->Email . \"' value passed for \" . $resident_label . \" [\" . $resident->Contact->Name . \"] is not a recognized Email format.\");\n                  }\n                }\n                else {\n                  throw new SoapFault(\"Sender\", \"Email value for \" . $resident_label . \" [\" . $resident->Contact->Name . \"] is empty.\");\n                }\n\n                $signers[$field] = $resident;\n                break;\n              }\n            }\n\n            if ($resident_matched) {\n              $resident_signers = array_diff_key($resident_signers, array($index => null));\n            }\n            else {\n              throw new SoapFault(\"Sender\", \"No contact info supplied for \" . $resident_label . \" [\" . $name . \"].\");\n            }\n          }\n\n          foreach ($resident_signers as $index => $resident) {\n            $resident->Contact->Name = trim($resident->Contact->Name);\n\n            throw new SoapFault(\"Sender\", ucfirst($resident_label) . \" [\" . $resident->Contact->Name . \"] is not listed on Lease.\");\n          }\n        }\n        else {\n          throw new SoapFault(\"Sender\", \"Lease record has no \" . $resident_label . \" defined.\");\n        }\n\n        $collect_payment = false;\n\n        if (isset($PaymentRequested)) {\n          if ($PaymentRequested->Amount) {\n            if (!$collect_payment = (string) $PaymentRequested->Description !== \"\") {\n              throw new SoapFault(\"Sender\", \"No description supplied for fee amount to be collected.\");\n            }\n          }\n        }\n\n        $result = $this->dbh->get_property_number_by_unit($LeaseId);\n\n        if ($result !== false) {\n          $property_number = $result;\n        }\n\n        if ($forms_requested) {\n          $pdf_info = $this->FetchPDF($property_number, $lease_data, $forms_requested, $renewal, true);\n\n          $forms_generated = array();\n\n          foreach ($pdf_info[\"forms\"] as $form_id => $page_count) {\n            $forms_generated[] = new FormGenerated($form_id, $page_count);\n          }\n\n          $document = new Document(\"LEASE\", $forms_generated, base64_encode($pdf_info[\"buffer\"]));\n\n          $this->last_print_transaction = new PrintTransaction($pdf_info[\"trans_id\"], array($document));\n        }\n        else {\n          if (!isset($this->last_print_transaction)) {\n            throw new SoapFault(\"Receiver\", \"Unable to retrieve generated PDF.\");\n          }\n\n          $this->trans_dbh = new transactions();\n\n          $this->document_management_services = array();\n\n          if (!DEV_MODE) {\n            $this->document_management_services = $this->GetDocumentManagementServices($property_number);\n          }\n        }\n\n        $result = $this->dbh->get_guarantor_info_by_unit($LeaseId);\n\n        if ($result !== false) {\n          $guarantor_info = $result;\n        }\n\n        $print_info = array();\n\n        foreach ($this->last_print_transaction->Documents as $document) {\n          $print_info[$document->Group] = array(\n            \"forms\" => array(),\n            \"pdf_buffer\" => base64_decode($document->Pdf)\n          );\n\n          foreach ($document->Forms as $form) {\n            $print_info[$document->Group][\"forms\"][$form->Id] = $form->Pages;\n          }\n        }\n\n        $esign_data = array(\n          \"ID\" => $this->last_print_transaction->Id,\n          \"PROPERTYNUMBER\" => $property_number,\n          \"RENEWAL\" => ($renewal ? \"T\" : \"F\"),\n          \"UNITNUM\" => $lease_data[\"UNITNUM\"],\n          \"ADDRESS\" => $lease_data[\"ADDRESS\"],\n          \"DTOFLEAS\" => $lease_data[\"DTOFLEAS\"],\n          \"BEGLEASE\" => $lease_data[\"BEGLEASE\"],\n          \"DISABLENOTICES\" => ($SendOwnerRepNotices ? \"F\" : \"T\")\n        );\n\n        if ($collect_payment) {\n          $esign_data[\"FEEREQUESTED\"] = $PaymentRequested->Amount;\n          $esign_data[\"FEEDESCRIPTION\"] = $PaymentRequested->Description;\n        }\n\n        if ($this->dbh->save_esign_data($esign_data)) {\n          if ($result = $this->dbh->get_esign_data($esign_data[\"ID\"])) {\n            $esign_data = $result;\n\n            $esign_id = $esign_data[\"ID\"];\n\n            $property_number = $esign_data[\"PROPERTYNUMBER\"];\n\n            $renewal = $esign_data[\"RENEWAL\"] === \"T\";\n\n            if (!$new_esignature = $this->dbh->test_new_esignature()) {\n              if ($result = $this->dbh->get_esign_special_forms()) {\n                $esign_special_forms = array_intersect($result, array_keys($print_info[\"LEASE\"][\"forms\"]));\n              }\n\n              if ($result = $this->dbh->get_property_data($property_number)) {\n                $property_data = $result;\n\n                $db_type = strtolower($property_data[\"DBTYPE\"]);\n              }\n\n              require_once(BASE_DIR . \"cgi-bin/esign/global.php\");\n\n              $owner_address = array();\n\n              switch ($db_type) {\n                case \"aptdb\":\n                case \"storagedb\":\n                  $company_name = $property_data[\"PROPERTYNAME\"];\n\n                  if (trim($property_data[\"ADDRESS\"]) !== \"\") {\n                    $owner_address[] = trim($property_data[\"ADDRESS\"]);\n                  }\n\n                  switch ($assoc) {\n                    case \"UKAA\":\n                      if (trim($property_data[\"ADDRESS2\"]) !== \"\") {\n                        $owner_address[] = trim($property_data[\"ADDRESS2\"]);\n                      }\n                      break;\n                  }\n\n                  $state_abbrev = $this->dbh->get_state_abbrev($this->customer_data[\"STATE\"]);\n\n                  $result = get_citystzip($property_data[\"CITY\"], $state_abbrev, $property_data[\"ZIP\"]);\n\n                  if ($result !== \"\") {\n                    $owner_address[] = $result;\n                  }\n                  break;\n                default:\n                  $company_name = $this->customer_data[\"COMPANYNAME\"];\n\n                  if (trim($this->customer_data[\"ADDRESS\"]) !== \"\") {\n                    $owner_address[] = trim($this->customer_data[\"ADDRESS\"]);\n                  }\n\n                  if (trim($this->customer_data[\"CITYSTZIP\"]) !== \"\") {\n                    $owner_address[] = trim($this->customer_data[\"CITYSTZIP\"]);\n                  }\n                  break;\n              }\n\n              require_once(BASE_DIR . \"cgi-bin/forms_online/email.php\");\n\n              $signer_emails = array();\n            }\n\n            $current_timestamp = time();\n\n            foreach ($signers as $signer_field => $signer) {\n              $signer_key = $this->GenerateEsignatureKey($esign_id, $signer_field);\n\n              if (preg_match(\"/^(.+)\\d+/\", $signer_field, $matches)) {\n                $prefix = $matches[1];\n              }\n              else $prefix = $signer_field;\n\n              switch ($prefix) {\n                case \"OWNER\":\n                  $group = \"LEASE\";\n                  break;\n                default:\n                  $group = $signer_field;\n                  break;\n              }\n\n              if (array_key_exists($group, $print_info)) {\n                if (!$this->trans_dbh->store_esign_pdf($signer_key, $esign_data[\"DATEINITIATED\"], $print_info[$group][\"pdf_buffer\"])) {\n                  throw new SoapFault(\"Receiver\", \"Unable to archive lease document.\");\n                }\n              }\n\n              $esign_signer_data = array(\n                \"ID\" => $signer_key,\n                \"ESIGN_ID\" => $esign_id,\n                \"NAME\" => $signer->Contact->Name,\n                \"EMAIL\" => $signer->Contact->Email,\n                \"PHONE\" => $signer->Contact->Phone,\n                \"ONSITE\" => ($signer->Onsite ? \"T\" : \"F\"),\n                \"PAGECOUNT\" => 0\n              );\n\n              $forms_list = array();\n              $form_pages = array();\n\n              foreach ($print_info as $group => $info) {\n                switch ($group) {\n                  case \"LEASE\":\n                    if ($signer_field !== \"OWNER\") break;\n                  case $signer_field:\n                    $esign_signer_data[\"PAGECOUNT\"] += array_sum($info[\"forms\"]);\n\n                    $forms_list = array_merge($forms_list, array_keys($info[\"forms\"]));\n                    $form_pages = array_merge($form_pages, array_values($info[\"forms\"]));\n                    break;\n                }\n              }\n\n              $esign_signer_data[\"FORMS\"] = join(\",\", $forms_list);\n\n              if ($new_esignature) {\n                $esign_signer_data[\"FORMPAGES\"] = join(\",\", $form_pages);\n              }\n\n              switch ($prefix) {\n                case \"GUARANTOR\":\n                  if (isset($guarantor_info)) {\n                    $guarantor_index = 0;\n\n                    foreach ($guarantor_info as $guarantor_data) {\n                      $guarantor_field = $prefix . ++$guarantor_index;\n\n                      if ($guarantor_field === $signer_field) {\n                        $esign_signer_data[\"DATESIGNED\"] = $guarantor_data[\"DATESIGNED\"];\n                        $esign_signer_data[\"IPADDRESS\"] = $guarantor_data[\"IPADDRESS\"];\n                        $esign_signer_data[\"BROWSERTYPE\"] = $guarantor_data[\"BROWSERTYPE\"];\n                        break;\n                      }\n                    }\n                  }\n                case \"OWNER\":\n                  $signer_field_root = preg_quote($signer_field);\n                  break;\n                default:\n                  $signer_field_root = \"(?:\" . preg_quote($signer_field) . \"|APPLICANT)\";\n                  $first_resident = !isset($first_resident);\n                  break;\n              }\n\n              if ($result = $this->dbh->save_esign_signer_data($esign_signer_data)) {\n                if ($new_esignature) {\n                  switch ($prefix) {\n                    case \"GUARANTOR\":  // Do not record signature fields for Lease Guarantors\n                      break;\n                    default:\n                      foreach ($print_info as $group => $info) {\n                        if ($signer_field === \"OWNER\" || $group === $signer_field || $group === \"LEASE\") {\n                          $this->StoreEsignatureSignerHistory($signer_key, $signer_field, $signer_field_root, array_keys($info[\"forms\"]), $first_resident);\n                        }\n                      }\n                      break;\n                  }\n                }\n                else {\n                  switch ($prefix) {\n                    case \"OWNER\":\n                    case \"RESIDEN\":\n                      if (isset($esign_special_forms)) {\n                        $esign_special_forms_signer_data = array(\n                          \"ESIGN_USE_ID\" => $signer_key\n                        );\n\n                        $page_index = 1;\n\n                        foreach ($print_info[\"LEASE\"][\"forms\"] as $form_id => $pages) {\n                          if (in_array($form_id, $esign_special_forms)) {\n                            $esign_special_forms_signer_data[\"ESIGN_SPECIAL_FORMS_ID\"] = $form_id;\n                            $esign_special_forms_signer_data[\"PAGECOUNT\"] = $pages;\n                            $esign_special_forms_signer_data[\"PAGEINDEX\"] = $page_index;\n\n                            if ($prefix === \"OWNER\") {\n                              if (isset($_POST[$form_id . \"_ACCEPT\"]) || !empty($_POST[$form_id . \"_ACKNOWLEDGMENT\"])) {\n                                $esign_special_forms_signer_data[\"DATESIGNED\"] = date(\"Y-m-d H:i:s\", $current_timestamp);\n\n                                if (!empty($_POST[$form_id . \"_ACKNOWLEDGMENT\"])) {\n                                  $esign_special_forms_signer_data[\"INITIALS\"] = $_POST[$form_id . \"_ACKNOWLEDGMENT\"];\n                                }\n                              }\n                            }\n\n                            if (!$this->dbh->save_esign_special_forms_signer_data($esign_special_forms_signer_data)) break;\n                          }\n\n                          $page_index += $pages;\n                        }\n                      }\n\n                      if ($prefix === \"RESIDEN\") {\n                          send_esign_resident_request($esign_signer_data[\"NAME\"], $esign_signer_data[\"EMAIL\"], $signers[\"OWNER\"]->Contact->Name, $owner_address, $signers[\"OWNER\"]->Contact->Email, $signers[\"OWNER\"]->Contact->Phone, $renewal, $this->customer_data[\"RENTALAPP\"] == 1, $company_name, $this->customer_data[\"STATE\"], $assoc, $signer_key, $esign_data[\"BEGLEASE\"], $esign_data[\"DATEINITIATED\"]);\n                      }\n                      break;\n                  }\n\n                  if ($result) {\n                    $signer_emails[] = $esign_signer_data[\"NAME\"] . \" <\" . $esign_signer_data[\"EMAIL\"] . \">\";\n                  }\n                }\n              }\n              else {\n                throw new SoapFault(\"Receiver\", \"Error writing E-signature signer data.\");\n              }\n            }\n\n            if ($new_esignature) {\n              $target = \"https://\" . NEW_HOST_NAME . \"/esignature/event/document/created/\" . rawurlencode($esign_id);\n\n              if (!$result = $this->SignalPortal($target)) {\n                throw new SoapFault(\"Receiver\", \"Error encountered in E-signature engine.\");\n              }\n            }\n            else {\n              if ($esign_data[\"DISABLENOTICES\"] !== \"T\") {\n                send_esign_owner_notification($signers[\"OWNER\"]->Name, $signers[\"OWNER\"]->Email, $signer_emails, $renewal, $assoc);\n              }\n            }\n\n            $form_info = array();\n\n            foreach ($print_info as $group => $info) {\n              $form_info = array_merge($form_info, $info[\"forms\"]);\n            }\n\n            foreach ($this->document_management_services as $service_abbrev => $service_data) {\n              $dms = new $service_abbrev($service_data);\n\n              $request_vars = $dms->getInitiateEsignatureRequestVars($form_info, $property_number, $LeaseId, $esign_id);\n\n              $target_url = $dms->getInitiateEsignatureURL();\n\n              # JAD 2016/10: feature switch for vendor pdf push.\n              if ($dms->useBms()) {\n                $request_vars['remote_target'] = $target_url;\n\n                $target_url = $dms->getInitiateEsignatureBmsURL();\n\n                if (defined(\"RECORD_TO_LOG_LOCAL\")) {\n                  record_to_log(\"vendor_push\", date(\"Y-m-d H:i:s\") . \": \" . \"Remote Esign Init Push \" . $esign_id . CRLF);\n                }\n\n                $dms->sendRequestBms($target_url, $request_vars);\n              }\n              else {\n                if (defined(\"RECORD_TO_LOG_LOCAL\")) {\n                  record_to_log(\"vendor_push\", date(\"Y-m-d H:i:s\") . \": \" . \"Local Esign Init Push \" . $esign_id . CRLF);\n                }\n\n                $dms->sendRequest($target_url, $request_vars);\n              }\n              break;\n            }\n\n            return $esign_id;\n          }\n          else {\n            throw new SoapFault(\"Receiver\", \"Unable to retrieve E-signature transaction data.\");\n          }\n        }\n        else {\n          throw new SoapFault(\"Receiver\", \"Error writing E-signature transaction data.\");\n        }\n      }\n      else {\n        throw new SoapFault(\"Sender\", \"No begin date specified for lease term.\");\n      }\n    }\n    else {\n      throw new SoapFault(\"Receiver\", \"Unable to retrieve lease data.\");\n    }\n  }\n\n  protected function NewPDF($LeaseId, $forms_requested, $Preview, $renewal = false, $form_field_data = null) {\n    if ($result = $this->dbh->get_lease_data($LeaseId)) {\n      $lease_data = $result;\n\n      if ($renewal) {\n        if ((string) $lease_data[\"RENEWED\"] === \"\") {\n          throw new SoapFault(\"Sender\", \"Renewal forms cannot be generated for this record because lease has not been renewed.\");\n        }\n      }\n\n      $result = $this->dbh->get_property_number_by_unit($LeaseId);\n\n      if ($result !== false) {\n        $property_number = $result;\n      }\n\n      $pdf_info = $this->FetchPDF($property_number, $lease_data, $forms_requested, $renewal, false, $Preview, $form_field_data);\n\n      return $pdf_info[\"buffer\"];\n    }\n    else {\n      throw new SoapFault(\"Receiver\", \"Unable to retrieve lease data.\");\n    }\n  }\n\n  protected function PaperlessLeaseOption($assoc) {\n    switch ($assoc) {\n      case \"NAA\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  protected function ParseXML($str, $db_type, $renewal = false, $form_name = null) {\n    $import_data = array();\n\n    $filled_fields = array();\n\n    if ((string) $str !== \"\") {\n      require_once(BASE_DIR . \"cgi-bin/test_format.php\");\n\n      $single_form = (string) $form_name !== \"\";\n\n      foreach ($this->dtd_groups as $group) {\n        switch ($group) {\n          case \"RENEWAL\":\n            $valid_group = $renewal && !$single_form;\n            break;\n          case \"STANDARD\":\n            $valid_group = !($renewal || $single_form);\n            break;\n          case \"RESTRICTED\":\n            $valid_group = $single_form;\n            break;\n          default:\n            $valid_group = !$single_form;\n            break;\n        }\n\n        if (!$valid_group) continue;\n\n        $import_data[$group] = array();\n\n        $filled_fields[$group] = array();\n\n        switch ($group) {\n          case \"RENEWAL\":\n          case \"STANDARD\":\n            $result = $this->dbh->get_lease_field_meta($this->customer_data[\"STATE\"], $db_type, false, $renewal);\n\n            if ($result !== false) {\n              $field_meta = $result;\n\n              $result = $this->dbh->get_lease_field_info($this->customer_data[\"STATE\"], $db_type, true, $renewal);\n            }\n            break;\n          case \"CUSTOM\":\n            $result = $this->dbh->get_member_field_meta($this->customer_data[\"COMPANYNUMBER\"]);\n\n            if ($result !== false) {\n              $field_meta = $result;\n\n              $result = $this->dbh->get_member_field_info($this->customer_data[\"COMPANYNUMBER\"]);\n            }\n            break;\n          case \"RESTRICTED\":\n            if ((bool) preg_match(\"/^M_(\\w+)$/i\", $form_name, $matches)) {\n              $form_id = $matches[1];\n\n              $result = $this->dbh->get_member_single_form_field_meta($this->customer_data[\"COMPANYNUMBER\"], $form_id);\n\n              if ($result !== false) {\n                $field_meta = $result;\n\n                $result = $this->dbh->get_member_single_form_field_info($this->customer_data[\"COMPANYNUMBER\"], $form_id);\n              }\n            }\n            else {\n              $result = $this->dbh->get_single_form_field_meta($this->customer_data[\"STATE\"], $form_name);\n\n              if ($result !== false) {\n                $field_meta = $result;\n\n                $result = $this->dbh->get_single_form_field_info($this->customer_data[\"STATE\"], $form_name);\n              }\n            }\n            break;\n        }\n\n        if ($result !== false) {\n          $field_info = array_intersect_key($result, $field_meta);\n\n          libxml_use_internal_errors(true);\n\n          $result = simplexml_load_string($str);\n\n          if ($result !== false) {\n            $xml = $result;\n\n            $xml_sections = array();\n\n            if ($result = $xml->xpath('//LEASE/' . $group)) {\n              $xml_sections[] = $result[0];\n            }\n            else {\n              if (array_key_exists($group, $this->xml_section_map)) {\n                foreach ($this->xml_section_map[$group] as $section) {\n                  if ($result = $xml->xpath('//LEASE/' . $section)) {\n                    $xml_sections[] = $result[0];\n                  }\n                }\n              }\n            }\n\n            foreach ($xml_sections as $xml) {\n              foreach ($xml as $element => $data) {\n                $children = $data->children();\n\n                if (count($children) === 0) {\n                  $val = trim($data);\n\n                  if (array_key_exists($element, $field_info)) {\n                    if ($val !== \"\") {\n                      if (isset($field_meta[$element][\"type\"])) {\n                        $type = $field_meta[$element][\"type\"];\n\n                        $result = valid_format($type, $val);\n\n                        if ($result !== false) {\n                          switch ($type) {\n                            case \"boolean\":\n                              if ($result === \"TRUE\") {\n                                $val = \"X\";\n                              }\n                              else {\n                                $val = null;\n                              }\n                              break;\n                            default:\n                              $val = $result;\n                              break;\n                          }\n                        }\n                        else {\n                          throw new SoapFault(\"Sender\", \"'\" . $data . \"' value passed for <\" . $element . \"> field does not meet format requirements for \" . strtoupper($type) . \" type.\");\n                        }\n                      }\n\n                      if (isset($field_meta[$element][\"maxlength\"])) {\n                        $maxlength = $field_meta[$element][\"maxlength\"];\n\n                        if (strlen($val) > $maxlength) {\n                          throw new SoapFault(\"Sender\", \"'\" . $data . \"' value passed for <\" . $element . \"> field exceeds \" . $maxlength . \"-character limit.\");\n                        }\n                      }\n                    }\n                    else $val = null;\n\n                    if (isset($val)) {\n                      if (!in_array($element, $filled_fields[$group])) {\n                        $filled_fields[$group][] = $element;\n                      }\n                    }\n\n                    if (count($field_info[$element]) > 1) {\n                      foreach ($field_info[$element] as $group_id => $name) {\n                        if ($val == $group_id) {\n                          $import_data[$group][$name] = \"X\";\n                        }\n                        else {\n                          $import_data[$group][$name] = null;\n                        }\n                      }\n                    }\n                    else {\n                      $name = $field_info[$element][0];\n\n                      $import_data[$group][$name] = $val;\n                    }\n                  }\n                }\n              }\n            }\n          }\n          else {\n            $libxml_errors = array();\n\n            foreach(libxml_get_errors() as $error) {\n              $libxml_errors[] = $error->message;\n            }\n\n            $error_msg = join(\"\\t\", $libxml_errors);\n\n            throw new SoapFault(\"Sender\", $error_msg);\n          }\n        }\n      }\n    }\n\n    foreach ($this->required_fields as $group => $required_fields) {\n      $missing_fields = array_diff($required_fields, (array) $filled_fields[$group]);\n\n      foreach ($missing_fields as $name) {\n        $missing_field_name = $name . ($group === \"CUSTOM\" ? \"*\" : \"\");\n\n        if (!in_array($missing_field_name, $this->missing_fields)) {\n          $this->missing_fields[] = $missing_field_name;\n        }\n      }\n    }\n\n    return $import_data;\n  }\n}\n?>\n",
					"file": "bluemoon-production/cgi-bin/classes/product.class.php",
					"file_size": 216944,
					"file_write_time": 131443678550814763,
					"settings":
					{
						"buffer_size": 216944,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bluemoon-production/cgi-bin/classes/soap_server.class.php",
					"settings":
					{
						"buffer_size": 4457,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "Searching 90 files for \"class product\" (case sensitive)\n\n0 matches\n\nSearching 26022 files for \"cgi-bin/database/admin\" (case sensitive)\n\n0 matches\n\nSearching 26022 files for \"db.mysql-admin.ini.php\" (case sensitive)\n\n/home/jadavis/repos/bluemoon-production/cgi-bin/admin/migration/global.php:\n  648  );\n  649  \n  650: $dbh = new migrate(false, BASE_DIR . \"cgi-bin/database/db.mysql-admin.ini.php\");  // Instantiate database object\n  651  \n  652  $valid_table_map = array();\n\n/home/jadavis/repos/bluemoon-production/dev/create_enterprise_test_logins.php:\n   10    $password = \"blue22\";\n   11  \n   12:   $dbh = new admin(false, BASE_DIR . \"cgi-bin/database/db.mysql-admin.ini.php\");  // Instantiate database object\n   13  \n   14    $enterprise_dbh = new admin_enterprise(false);  // Instantiate enterprise database object\n\n/home/jadavis/repos/bluemoon-production/html/admin/migration/replicate_data.php:\n   22  }\n   23  \n   24: $dbh = new migrate(false, BASE_DIR . \"cgi-bin/database/db.mysql-admin.ini.php\");  // Instantiate database object\n   25  \n   26  // Read HTML code segment for pull-down menu options\n\n3 matches across 3 files\n",
					"settings":
					{
						"buffer_size": 1133,
						"line_ending": "Unix",
						"name": "Find Results",
						"scratch": true
					}
				},
				{
					"file": "bluemoon-production/cgi-bin/configuration.php",
					"settings":
					{
						"buffer_size": 18942,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bluemoon-production/lib/thirdparty/Guzzle/Batch/composer.json",
					"settings":
					{
						"buffer_size": 815,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bluemoon-production/html/test.php",
					"settings":
					{
						"buffer_size": 3027,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bluemoon-production/cgi-bin/classes/session.class.php",
					"settings":
					{
						"buffer_size": 9670,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bluemoon-production/html/admin/test.php",
					"settings":
					{
						"buffer_size": 2485,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bluemoon-production/cgi-bin/classes/lease.class.php",
					"settings":
					{
						"buffer_size": 216942,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bluemoon-production/cgi-bin/classes/soap_license.class.php",
					"settings":
					{
						"buffer_size": 40678,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bluemoon-production/cgi-bin/classes/admin.class.php",
					"settings":
					{
						"buffer_size": 41329,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "bluemoon-production/dev/set_config.php",
					"settings":
					{
						"buffer_size": 1247,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bluemoon-production/dev/send_invoices.php",
					"settings":
					{
						"buffer_size": 2788,
						"line_ending": "Unix"
					}
				}
			],
			"build_system": "",
			"build_system_choices":
			[
				[
					[
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							""
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (All)"
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (This File Only)"
						],
						[
							"Packages/User/builds/psr2.sublime-build",
							""
						]
					],
					[
						"Packages/User/builds/psr2.sublime-build",
						""
					]
				]
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 392.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"Package Control: ",
						"Package Control: Install Package"
					],
					[
						"pack",
						"Package Control: List Packages"
					],
					[
						"Snippet: ",
						"Snippet: COOKIE['…']"
					],
					[
						"Package Control: install",
						"Package Control: Install Package"
					],
					[
						"Snippet: ld",
						"Snippet: LogDebug"
					],
					[
						"Paconrepa",
						"Package Control: Remove Package"
					],
					[
						"inp",
						"Package Control: Install Package"
					],
					[
						"instal",
						"Package Control: Install Package"
					],
					[
						"pa",
						"Package Control: Install Package"
					],
					[
						"paconad",
						"Package Control: Add Repository"
					],
					[
						"sniff",
						"PHP Code Sniffer: Sniff this file"
					],
					[
						"phpunit",
						"PHPUnit: Run"
					],
					[
						"phpun",
						"PHPUnit: Run"
					],
					[
						"tenant",
						"GitGutter: Show Comparing Against"
					],
					[
						"getset",
						"Generate Getter and Setter for ..."
					],
					[
						"togglet",
						"View: Toggle Tabs"
					],
					[
						"get set",
						"PHP: Generate Getters and Setters"
					],
					[
						"toggle tab",
						"View: Toggle Tabs"
					],
					[
						"View:toggl",
						"View: Toggle Tabs"
					],
					[
						"sublimelinter",
						"Preferences: SublimeLinter Key Bindings – Default"
					],
					[
						"packagecon",
						"Package Control: List Packages"
					],
					[
						"in",
						"Package Control: Install Package"
					],
					[
						"inst",
						"Package Control: Install Package"
					],
					[
						"sublim",
						"SublimeLinter: Show All Errors"
					],
					[
						"ins",
						"Package Control: Install Package"
					],
					[
						"generate",
						"Generate Getter and Setter for ..."
					],
					[
						"phprefa",
						"PHPSimpleRefactor: extract current lines to method"
					],
					[
						"pca",
						"Package Control: Install Package"
					],
					[
						"phpcompan",
						"PHPCompanion:Find Use"
					],
					[
						"toggle ta",
						"View: Toggle Tabs"
					],
					[
						"getter",
						"PHP: Generate Getters"
					],
					[
						"Snippet: asse",
						"Snippet: assertEquals"
					],
					[
						"install",
						"Package Control: Install Package"
					],
					[
						"phpcompanion",
						"PHPCompanion:Expand Fully Qualified Class Name"
					],
					[
						"impo",
						"PHPCompanion:Import Namespace"
					],
					[
						"phpcomp",
						"PHPCompanion:Import Namespace"
					],
					[
						"compan",
						"PHPCompanion:Insert Constructor Property"
					],
					[
						"php",
						"PHPCompanion:Insert Constructor Property"
					],
					[
						"phpcom",
						"PHPCompanion:Insert Constructor Property"
					],
					[
						"const",
						"PHPCompanion:Insert Constructor Property"
					],
					[
						"packi",
						"Package Control: Install Package"
					],
					[
						"php com",
						"PHPCompanion:Expand Fully Qualified Class Name"
					],
					[
						"insta",
						"Package Control: Install Package"
					],
					[
						"toggle ",
						"View: Toggle Status Bar"
					],
					[
						"anf",
						"ANF: Rename File"
					],
					[
						"status",
						"View: Toggle Status Bar"
					],
					[
						"package re",
						"PackageResourceViewer: Extract Package"
					],
					[
						"package in",
						"Package Control: Install Package"
					],
					[
						"install ",
						"Colorsublime: Install Theme"
					],
					[
						"pcak",
						"Package Control: Install Package"
					],
					[
						"esign",
						"Snippet: Designate that the column allows NULL values"
					],
					[
						"Snippet: doc",
						"Snippet: Start Docblock"
					],
					[
						"packains",
						"Package Control: Install Package"
					],
					[
						"packin",
						"Package Control: Install Package"
					],
					[
						"syntaxjson",
						"Set Syntax: JSON"
					],
					[
						"Pacin",
						"Package Control: Install Package"
					],
					[
						"Package Control: inst",
						"Package Control: Install Package"
					],
					[
						"Package Control: in",
						"Package Control: Install Package"
					],
					[
						"inden",
						"Indentation: Reindent Lines"
					],
					[
						":w",
						":w - Save"
					]
				],
				"width": 962.0
			},
			"console":
			{
				"height": 375.0,
				"history":
				[
					"+context_name+",
					"clear",
					"Toggle ScopeAlways",
					"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) :Q",
					"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"expanded_folders":
			[
				"/home/jadavis/repos/bluemoon-production"
			],
			"file_history":
			[
				"/home/jadavis/repos/bluemoon-production/database/dev/db-new.ini.php",
				"/home/jadavis/repos/bluemoon-production/database/dev/transactions/db.ini.php",
				"/home/jadavis/repos/bluemoon-production/database/dev/office/db.ini.php",
				"/home/jadavis/repos/bluemoon-production/database/dev/sessions/db.ini.php",
				"/home/jadavis/repos/bluemoon-production/database/dev/admin/db.ini.php",
				"/home/jadavis/repos/bluemoon-production/lib/Db/class.ObjectDb.php",
				"/home/jadavis/repos/bluemoon-production/html/products/forms_online/print.file/esign.php",
				"/home/jadavis/repos/bluemoon-production/html/products/forms_online/lease_db/edit/index.php",
				"/home/jadavis/repos/bluemoon-production/database/dev-aws/db-new.ini.php",
				"/home/jadavis/repos/bluemoon-production/html/modules/controllers/class.Order.php",
				"/home/jadavis/repos/bluemoon-production/lib/Sql/class.SqlFormsOnlineUser.php",
				"/home/jadavis/repos/bluemoon-production-compare/cgi-bin/classes/lease.class.php",
				"/home/jadavis/repos/bluemoon-production/cgi-bin/classes/valence.class.php",
				"/home/jadavis/repos/bluemoon-production/html/products/forms_online/javascript/default.js",
				"/home/jadavis/repos/bluemoon-production/html/support/help/index.php",
				"/home/jadavis/repos/bluemoon-production/html/products/forms_online/print/index.php",
				"/home/jadavis/repos/bluemoon-production/cgi-bin/esign/confirmation.php",
				"/home/jadavis/repos/bluemoon-production/dev/api_log_switch/index.php",
				"/home/jadavis/repos/bluemoon-production/cgi-bin/classes/enterprise_services.class.php",
				"/home/jadavis/repos/bluemoon-production/lib/Utils/class.Login.php",
				"/home/jadavis/repos/bluemoon-production/lib/User/class.UserManager.php",
				"/home/jadavis/repos/bluemoon-production/cgi-bin/forms_online/esign_confirmation.php",
				"/home/jadavis/repos/bluemoon-production/html/products/forms_online/enterprise/help/print.php",
				"/home/jadavis/repos/bluemoon-production/html/products/forms_online/print/esign.php",
				"/home/jadavis/repos/bluemoon-production/html/products/forms_online/lease_db/esign/manager/index.php",
				"/home/jadavis/repos/bluemoon-production-compare/html/products/forms_online/lease_db/esign/manager/index.php",
				"/home/jadavis/repos/bluemoon-production/_private/forms_online/manage_esign_signer_resend_request.inc",
				"/home/jadavis/repos/bluemoon-production-compare/_private/forms_online/manage_esign_signer_resend_request.inc",
				"/home/jadavis/repos/bluemoon-production/cgi-bin/rentalapp/global.php",
				"/home/jadavis/repos/bluemoon-production/cgi-bin/classes/db.class.php",
				"/home/jadavis/repos/bluemoon-production/cgi-bin/classes/mysql.class.php",
				"/home/jadavis/repos/bluemoon-production/cgi-bin/classes/application.class.php",
				"/home/jadavis/repos/bluemoon-production/html/admin/soap_application_test.php",
				"/home/jadavis/repos/bluemoon-production/cgi-bin/classes/soap_license.class.php",
				"/home/jadavis/repos/bluemoon-production/cgi-bin/classes/lease.class.php",
				"/home/jadavis/repos/bluemoon-production/cgi-bin/classes/soap_web.class.php",
				"/home/jadavis/repos/bluemoon-production/cgi-bin/classes/soap_server.class.php",
				"/home/jadavis/repos/bluemoon-production/cgi-bin/classes/leaselocal.class.php",
				"/home/jadavis/repos/bluemoon-production/cgi-bin/products/forms_online/login.php",
				"/home/jadavis/repos/bluemoon-production/cgi-bin/configuration.php",
				"/home/jadavis/repos/bluemoon-production/cgi-bin/classes/esign_receipt.class.php",
				"/home/jadavis/repos/bluemoon-production/cgi-bin/classes/services_base.class.php",
				"/home/jadavis/repos/bluemoon-production/html/modules/controllers/class.Login.php",
				"/home/jadavis/repos/bluemoon-production/html/products/forms_online/enterprise/launch/index.php",
				"/home/jadavis/repos/bluemoon-production/html/modules/templates/Login/indexIE.phtml",
				"/home/jadavis/repos/bluemoon-production/html/products/forms_online/enterprise/config/index.php",
				"/home/jadavis/repos/bluemoon-production/cgi-bin/enterprise/config/license/ajax.php",
				"/home/jadavis/repos/bluemoon-production/cgi-bin/enterprise/config/license/segments/esign.inc.php",
				"/home/jadavis/repos/bluemoon-production/lib/Framework/class.ModuleController.php",
				"/home/jadavis/repos/bluemoon-production/html/modules/templates/Login/index.phtml",
				"/home/jadavis/repos/bluemoon-production/lib/Framework/class.AJAX.php",
				"/home/jadavis/repos/bluemoon-production/config/skip_bms_login.php",
				"/home/jadavis/repos/bluemoon-production/cgi-bin/classes/leasetrait.class.php",
				"/home/jadavis/repos/bluemoon-production-compare/cgi-bin/classes/leasetrait.class.php",
				"/home/jadavis/repos/bluemoon-production/dev/rental_app_launcher/index.php",
				"/home/jadavis/repos/bluemoon-production/html/admin/soap_esign_pdf_recover.php",
				"/home/jadavis/repos/bluemoon-production/html/index.php",
				"/home/jadavis/repos/bluemoon-production/html/rentalapp/index.php",
				"/home/jadavis/repos/bluemoon-production/html/products/forms_online/sys_config/manage_users/index.php",
				"/home/jadavis/repos/bluemoon-production/html/products/forms_online/sys_config/preferences/index.php",
				"/home/jadavis/repos/bluemoon-production/_private/forms_online/sub_menu_tabs.inc",
				"/home/jadavis/repos/bluemoon-production/cgi-bin/classes/transactions.class.php",
				"/home/jadavis/repos/bluemoon-production/html/modules/templates/OnlineRentalApplicationGenerator/index.phtml",
				"/home/jadavis/repos/bluemoon-production/html/products/forms_online/enterprise/export/export.php",
				"/home/jadavis/repos/bluemoon-production/lib/Framework/class.Page.php",
				"/home/jadavis/repos/bluemoon-production/html/modules/controllers/class.Home.php",
				"/home/jadavis/repos/bluemoon-production/lib/Utils/class.Data.php",
				"/home/jadavis/repos/bluemoon-production/lib/Sql/class.SqlBuilder.php",
				"/home/jadavis/repos/bluemoon-production/cgi-bin/classes/forms_online.class.php",
				"/home/jadavis/repos/bluemoon-production/cgi-bin/password.php",
				"/home/jadavis/repos/bluemoon-production/cgi-bin/classes/property.class.php",
				"/home/jadavis/repos/bluemoon-production/cgi-bin/forms_online/AANC/sys_config/property.php",
				"/home/jadavis/repos/bluemoon-production/html/products/forms_online/lease_db/editor/index.php",
				"/home/jadavis/repos/bluemoon-production/cgi-bin/forms_online/editor.php",
				"/home/jadavis/repos/bluemoon-production/cgi-bin/classes/enterprise.class.php",
				"/home/jadavis/repos/bluemoon-production/cgi-bin/classes/forms_online_base.class.php",
				"/home/jadavis/repos/bluemoon-production/lib/thirdparty/Guzzle/Service/Exception/InconsistentClientTransferException.php",
				"/home/jadavis/repos/bluemoon-production-compare/html/modules/templates/Login/index.phtml",
				"/home/jadavis/repos/bluemoon-production/cgi-bin/classes/esigntrait.class.php",
				"/home/jadavis/repos/bluemoon-production/dev/quick_rental_app_launcher.php",
				"/home/jadavis/repos/bluemoon-production/lib/Utils/class.BmString.php",
				"/home/jadavis/repos/bluemoon-production/lib/Forms/class.FormsManager.php",
				"/home/jadavis/repos/bluemoon-production/lib/Utils/class.Mail.php",
				"/home/jadavis/repos/bluemoon-production/lib/Sql/class.SqlPageConfiguration.php",
				"/home/jadavis/repos/bluemoon-production/lib/ReleaseNotes/class.ReleaseNotesManager.php",
				"/home/jadavis/repos/bluemoon-production/lib/Framework/class.ModuleFactory.php",
				"/home/jadavis/repos/bluemoon-production/cgi-bin/classes/dbo.class.php",
				"/home/jadavis/repos/bluemoon-production/_private/forms_online/results_lease_generated_seg.inc",
				"/home/jadavis/repos/bluemoon-production/database/dev-docker/db-new.ini.php",
				"/home/jadavis/repos/bluemoon-production/html/modules/controllers/class.APIRegistration.php",
				"/home/jadavis/repos/bluemoon-production/html/modules/templates/Home/index.phtml",
				"/home/jadavis/repos/bluemoon-production/lib/Utils/class.String.php",
				"/home/jadavis/repos/bms2-sandlot/config/auth.php",
				"/home/jadavis/repos/bms2-sandlot/app/Auth/Guard.php",
				"/home/jadavis/repos/bms2-sandlot/app/User.php",
				"/home/jadavis/repos/bms2-sandlot/vendor/laravel/framework/src/Illuminate/Auth/Guard.php",
				"/home/jadavis/repos/bms2-sandlot/app/Providers/UserProvider.php",
				"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/user/src/Repositories/DbUserRepository.php",
				"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/user/src/Models/ClientTypeEmail.php",
				"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/user/src/Models/Email.php",
				"/home/jadavis/repos/bms2-sandlot/tests/DbUserRepositoryTest.php",
				"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/user/tests/DbUserRepositoryTest.php",
				"/home/jadavis/repos/bms2-sandlot/tests/bluemoon/user/DbUserRepositoryTest.php",
				"/home/jadavis/repos/bms2-sandlot/tests/bluemoon/user/UserServiceTest.php",
				"/home/jadavis/repos/bms2-sandlot/app/Repositories/DbUserRepository.php",
				"/home/jadavis/repos/bms2-sandlot/app/Repositories/IRepository.php",
				"/home/jadavis/repos/bms2-sandlot/app/Repositories/DbPropertyRepository.php",
				"/home/jadavis/repos/bms2-sandlot/app/Repositories/DbRepository.php",
				"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/user/src/Services/UserService.php",
				"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/user/tests/UserServiceTest.php",
				"/home/jadavis/repos/bms2-sandlot/app/Http/Controllers/Auth/AuthController.php",
				"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/user/src/Models/User.php",
				"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/user/src/Models/UserLeaseFormsAccount.php",
				"/home/jadavis/repos/bms2-sandlot/config/mailgun.php",
				"/home/jadavis/repos/bms2-sandlot/app/Http/routes.php",
				"/home/jadavis/repos/bms2-sandlot/app/Http/Controllers/Auth/PasswordController.php",
				"/home/jadavis/repos/bms2-sandlot/vendor/laravel/framework/src/Illuminate/Auth/EloquentUserProvider.php",
				"/home/jadavis/repos/bms2-sandlot/mobile/esignApp/config.xml",
				"/home/jadavis/repos/bms2-sandlot/mobile/esignApp/www/welcome.html",
				"/home/jadavis/repos/bms2-sandlot/mobile/esignApp/www/shared/sidebar.html",
				"/home/jadavis/repos/bms2-sandlot/.env",
				"/home/jadavis/repos/bms2-sandlot/app/Services/ApiService.php",
				"/home/jadavis/repos/bms2-sandlot/app/Services/RentalApplicationApiService.php",
				"/home/jadavis/repos/bms2-sandlot/app/Models/User.php",
				"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite/src/Models/OfficeUser.php",
				"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/user/src/Http/Controllers/UserController.php",
				"/home/jadavis/repos/bms2-sandlot/config/database.php",
				"/home/jadavis/repos/bms2-sandlot/packages/leaseprogram/rentalapp/src/Services/RentalApplicationService.php"
			],
			"find":
			{
				"height": 39.0
			},
			"find_in_files":
			{
				"height": 158.0,
				"where_history":
				[
					"/home/jadavis/repos/bluemoon-production",
					"/home/jadavis/repos/bluemoon-production/cgi-bin/classes",
					"/home/jadavis/repos/bluemoon-production/database/dev",
					"/home/jadavis/repos/bluemoon-production/database",
					"/home/jadavis/repos/bluemoon-production/html/modules/controllers",
					"/home/jadavis/repos/bluemoon-production/html/modules/templates",
					"/home/jadavis/repos/bluemoon-production/html/modules/controllers",
					"/home/jadavis/repos/bluemoon-production/html/modules",
					"/home/jadavis/repos/bluemoon-production/lib",
					"/home/jadavis/repos/bluemoon-production",
					"/home/jadavis/repos/bluemoon-production/lib",
					"/home/jadavis/repos/bluemoon-production-compare",
					"/home/jadavis/repos/bluemoon-production-compare/cgi-bin/classes",
					"/home/jadavis/repos/bluemoon-production/cgi-bin/classes",
					"/home/jadavis/repos/bluemoon-production",
					"/home/jadavis/repos/bluemoon-production/cgi-bin/classes",
					"/home/jadavis/repos/bluemoon-production",
					"/home/jadavis/repos/bluemoon-production/html",
					"/home/jadavis/repos/bluemoon-production",
					"/home/jadavis/repos/bluemoon-production/html/products",
					"/home/jadavis/repos/bluemoon-production/_private",
					"/home/jadavis/repos/bluemoon-production/cgi-bin",
					"/home/jadavis/repos/bluemoon-production/cgi-bin/esign",
					"/home/jadavis/repos/bluemoon-production/html/products/forms_online/print",
					"/home/jadavis/repos/bluemoon-production/cgi-bin/classes",
					"/home/jadavis/repos/bluemoon-production",
					"/home/jadavis/repos/bluemoon-production/cgi-bin/classes",
					"/home/jadavis/repos/bluemoon-production/cgi-bin",
					"/home/jadavis/repos/bluemoon-production/cgi-bin/classes",
					"/home/jadavis/repos/bluemoon-production/html",
					"/home/jadavis/repos/bluemoon-production/cgi-bin",
					"/home/jadavis/repos/bluemoon-production/cgi-bin/classes",
					"/home/jadavis/repos/bluemoon-production",
					"/home/jadavis/repos/bluemoon-production/cgi-bin/classes",
					"/home/jadavis/repos/bluemoon-production",
					"/home/jadavis/repos/bluemoon-production/_private/enterprise",
					"/home/jadavis/repos/bluemoon-production/html/products/forms_online/enterprise",
					"/home/jadavis/repos/bluemoon-production/cgi-bin/enterprise",
					"/home/jadavis/repos/bluemoon-production",
					"/home/jadavis/repos/bluemoon-production/lib",
					"/home/jadavis/repos/bluemoon-production/_private/forms_online",
					"/home/jadavis/repos/bluemoon-production/lib",
					"/home/jadavis/repos/bluemoon-production",
					"/home/jadavis/repos/bluemoon-production/html",
					"/home/jadavis/repos/bluemoon-production/lib",
					"/home/jadavis/repos/bluemoon-production,-*.json,-*.js,-*.pdf",
					"/home/jadavis/repos/bluemoon-production,-*.json,-*.js",
					"/home/jadavis/repos/bluemoon-production",
					"/home/jadavis/repos/bluemoon-production/html/modules",
					"/home/jadavis/repos/bluemoon-production/lib",
					"/home/jadavis/repos/bluemoon-production",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app/Providers",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/user",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot,-*.log,,-*.js,-*.json",
					"/home/jadavis/repos/bms2-sandlot,-*.log,,-*.js",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/webapp",
					"/home/jadavis/repos/bms2-sandlot/webapp/myApp/www",
					"/home/jadavis/repos/bms2-sandlot/packages/leaseprogram",
					"/home/jadavis/repos/bms2-sandlot/packages/leaseprogram/rentalapp",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/packages/leaseprogram/rentalapp/resources/views",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/tools",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot-compare/packages/leaseprogram",
					"/home/jadavis/repos/bms2-sandlot/packages/leaseprogram/integrations/resources",
					"/home/jadavis/repos/bms2-sandlot-compare",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot,-*.js,-*.log",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot,-*.log",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite,-*.css",
					"/home/jadavis/repos/bms2-sandlot/packages,-*.css",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot,-*.log",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot,-*.json",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite",
					"/home/jadavis/repos/bms2-sandlot,-*.json",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/app/Services",
					"/home/jadavis/repos/bms2-sandlot/app/Repositories",
					"/home/jadavis/repos/bms2-sandlot/packages/leaseprogram",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot/app/Providers",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite/src/Http/Controllers",
					"/home/jadavis/repos/bms2-sandlot/packages/myibase",
					"/home/jadavis/repos/bms2-sandlot/packages/mydbdriver",
					"/home/jadavis/repos/bms2-sandlot,-*.json",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon",
					"/home/jadavis/repos/bms2-sandlot/packages,-*.js",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite",
					"/home/jadavis/repos/bms2-sandlot/config",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/vendor",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/app/Services",
					"/home/jadavis/repos/bms2-sandlot/app/Repositories"
				]
			},
			"find_state":
			{
				"case_sensitive": true,
				"find_history":
				[
					"db.mysql-admin.ini.php",
					"cgi-bin/database/admin",
					"class product",
					"huitL@c0ch3",
					"dockerhost:13306",
					"3Fkrjyy3sJyM",
					"_dev",
					"bluemoon_dev1",
					"HTTP_HOST",
					"passwordReset",
					"PASSWORDRESET",
					"authenticateUser",
					"password.php",
					"first_resident",
					"StoreEsignatureSignerHistory",
					"getStoreEsignatureDocumentURL",
					"STORE_ESIGN_DOCUMENT_URL",
					"store_esignature_doc",
					"Sam Smith",
					"working_with_lease_documents",
					"esignTrait",
					"CHECK",
					"E_CHECK",
					"RECORD_RENTAL_APP_TO_LOG",
					"eSign Settings",
					"get_application_title",
					"manageEsign",
					"laravelEsign",
					"END PRINT CONTAINER",
					"print-header",
					"in Package",
					"Forms in Package",
					"GAA",
					"LOCAL_VENDOR_PDF_PUSH",
					"set_companies_to_log",
					"log.ini",
					"services_base",
					"record_to_log",
					"save_guarantor_data",
					"GUARANTOR",
					"get_guarantor_data",
					"GUARANTOR",
					"BEGLEASE",
					"lease_locked",
					"locked",
					"md5",
					"COUNT-CURRENT-MONTH-IN-LEASE-LENGTH",
					"SETTINGSGROUPMENU",
					"cgi-bin/enterprise",
					"\"Choose Settings Group\"",
					"enterpriseLogin",
					"The combination of User Email and Passwords entered does not match our records.",
					"’",
					"‘",
					"”",
					"“",
					"’",
					"‘",
					" OADDRESS",
					"OADDRESS",
					"which begins on",
					"class String",
					"Utils\\String",
					"new String",
					"Lease Generated?",
					"error_log",
					" HERE",
					"BMS_HOST_NAME",
					"new String",
					"String",
					"Utils\\String",
					"BMString",
					"String",
					"\"All signatures must\"",
					"DATE_ORDER",
					"cacheKeyName",
					"PasswordBroker",
					"UserProvider",
					"client_type",
					"custom",
					"password.auth",
					"serialNumber",
					"UserLeaseformAccount",
					"Leaseform",
					"leaseforms",
					"getObjectRep",
					"Db::transaction",
					"\"leaseprogram\"",
					"'leaseprogram'",
					"leaseprogram",
					"Auth::attempt",
					"Auth::atempt",
					"postLogin",
					"attempt",
					"retrieveByCredentials",
					"hasValidCredentials",
					"validateCredentials",
					"custommodels",
					"uthentic",
					"CustomGuard",
					"applicationId",
					"jad_remove",
					"logo.png",
					"logo",
					"Your application was submitted",
					"function accept",
					".lastName",
					"tLastName",
					".lastName",
					".firstName",
					"=> $",
					"=>$",
					"\\)$",
					")",
					"array,",
					"\"array\"",
					"=> (\\w+)",
					"\\$service",
					"SoapClient",
					"ApplicationApi",
					"ApplicationApplication",
					"ApiService",
					"'WEBTAA'",
					"\\)\\n",
					"$",
					"=> null$",
					"=> \"$",
					"maskedSsnAndNavigate"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
					"pH03niX",
					"db-dev.bluemoonformsdev.com",
					"huitL@c0ch3",
					"",
					"'",
					"\"",
					"'",
					"Utils\\BmString",
					"new BmString",
					"BmString",
					"Utils\\BmString",
					"BmString",
					"UserLeaseFormsAccount",
					"getRep",
					"'legacy'",
					"applicantId",
					".applicantLastName",
					".applicantFirstName",
					".applicant",
					".applicantFirstName",
					"=> null,",
					"),",
					"array",
					"=> \"$1\",",
					"=> \"$1\"",
					"$this->service",
					"RentalApplicationApi",
					"Application",
					"ApplicationApiService",
					"$this->accountId",
					"),\\n",
					"\",",
					",",
					"=> null,",
					"=> null",
					"defaultEmptyField",
					"previousEmployment",
					"phoneType",
					"integrations",
					"Integrations",
					"Library",
					"UserName",
					"userName",
					"noManageEsign",
					"selectedUserPri",
					"getPrivs",
					"serName",
					"userName",
					"UserName",
					"userName",
					"confirmPassword",
					"password",
					"lastName",
					"firstName",
					"email",
					"status",
					"strict",
					"noManageCustomForms",
					"noManagePrinting",
					"noManageRequired",
					"noManageEditor",
					"noSetPrefs",
					"noDefaultLease",
					"noOrder",
					"noChangePassword",
					"nManageEsign",
					"noDelete",
					"privilege",
					"createUserServiceRepository",
					",",
					"VendorRequestedPush",
					"TechnoteCategory",
					"lcfirst",
					"technote",
					"Technote",
					"$this->defaultTokenType",
					"tokenType",
					"TokenType",
					"token",
					"Token",
					");",
					"cache.duration",
					"$cacheKeyName",
					"private $",
					"private ",
					"$connection",
					"permissionsTable",
					"Permission",
					"permission",
					"Permission",
					"savePermissionForm",
					"save-permission-form",
					"Service",
					"service",
					"Service",
					"service",
					"App\\Http\\Controllers",
					"App\\Controller",
					"clickReportService",
					"ClickReport",
					"clickOrder",
					"ClickOrder",
					"Billing",
					"report",
					"Report",
					"user",
					"User",
					"user",
					"Jad <jad@bluemoonforms.com>",
					"public function",
					"bluemoon_lite",
					"Billing",
					"Settings",
					"dummy",
					"",
					"dboffice3",
					"Reports",
					"reports",
					"Reports",
					"reports",
					"Reports",
					"billing",
					"save",
					"get",
					"unitSurveyRepos",
					"DbUnitSurveyRepository",
					"unitSurveyProperty",
					"UnitSurveyProperty"
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"groups":
			[
				{
					"selected": 27,
					"sheets":
					[
						{
							"buffer": 0,
							"file": "bluemoon-production/database/dev/office/db.ini.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 221,
								"regions":
								{
								},
								"selection":
								[
									[
										146,
										146
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_visual",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 27,
							"type": "text"
						},
						{
							"buffer": 1,
							"file": "bluemoon-production/html/products/forms_online/import_xml.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 28190,
								"regions":
								{
								},
								"selection":
								[
									[
										1937,
										1937
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												4427,
												4428
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												1938,
												1939
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 32
									}
								},
								"translation.x": 0.0,
								"translation.y": 862.0,
								"zoom_level": 1.0
							},
							"stack_index": 26,
							"type": "text"
						},
						{
							"buffer": 2,
							"file": "bluemoon-production/lib/User/class.FormsOnlineUser.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 12575,
								"regions":
								{
								},
								"selection":
								[
									[
										358,
										358
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												364,
												365
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/single_quote.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												345,
												346
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 20
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 25,
							"type": "text"
						},
						{
							"buffer": 3,
							"file": "bluemoon-production/lib/Sql/class.SqlFormsOnlineUser.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 4143,
								"regions":
								{
								},
								"selection":
								[
									[
										3456,
										3456
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												3683,
												3684
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												3238,
												3239
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 36
									}
								},
								"translation.x": 0.0,
								"translation.y": 1801.0,
								"zoom_level": 1.0
							},
							"stack_index": 24,
							"type": "text"
						},
						{
							"buffer": 4,
							"file": "bluemoon-production/cgi-bin/classes/soap_product.class.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 40678,
								"regions":
								{
								},
								"selection":
								[
									[
										158,
										158
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"highlight_line": false,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"_vintageous_glue_until_normal_mode": false,
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"normal_insert_count": "1",
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 26
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 21,
							"type": "text"
						},
						{
							"buffer": 5,
							"file": "bluemoon-production/cgi-bin/classes/soap_web.class.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 9654,
								"regions":
								{
								},
								"selection":
								[
									[
										80,
										80
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"_vintageous_glue_until_normal_mode": false,
										"_vintageous_non_interactive": false,
										"_vintageous_processing_notation": false,
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"normal_insert_count": "1",
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 20,
							"type": "text"
						},
						{
							"buffer": 6,
							"file": "bluemoon-production/cgi-bin/classes/forms_online.class.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 143744,
								"regions":
								{
								},
								"selection":
								[
									[
										838,
										838
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												844,
												845
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/round_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												826,
												827
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"_vintageous_glue_until_normal_mode": false,
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"normal_insert_count": "1",
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 2
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 3,
							"type": "text"
						},
						{
							"buffer": 7,
							"file": "bluemoon-production/database/dev/admin/db.ini.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 309,
								"regions":
								{
								},
								"selection":
								[
									[
										52,
										52
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 6
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 7,
							"type": "text"
						},
						{
							"buffer": 8,
							"file": "bluemoon-production/cgi-bin/global.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 9584,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 8,
							"type": "text"
						},
						{
							"buffer": 9,
							"file": "bluemoon-production/database/dev-aws/sessions/db.ini.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 210,
								"regions":
								{
								},
								"selection":
								[
									[
										141,
										141
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 34
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 19,
							"type": "text"
						},
						{
							"buffer": 10,
							"file": "bluemoon-production/dev/create_enterprise_test_logins.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1286,
								"regions":
								{
								},
								"selection":
								[
									[
										261,
										261
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												267,
												268
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/round_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												213,
												214
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 41
									}
								},
								"translation.x": 0.0,
								"translation.y": 127.0,
								"zoom_level": 1.0
							},
							"stack_index": 18,
							"type": "text"
						},
						{
							"buffer": 11,
							"file": "bluemoon-production/cgi-bin/classes/admin_enterprise.class.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1881,
								"regions":
								{
								},
								"selection":
								[
									[
										1549,
										1549
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												1550,
												1551
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/double_quote.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												1478,
												1479
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_visual",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 719.0,
								"zoom_level": 1.0
							},
							"stack_index": 17,
							"type": "text"
						},
						{
							"buffer": 12,
							"file": "bluemoon-production/html/admin/migration/update_data.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 2613,
								"regions":
								{
								},
								"selection":
								[
									[
										278,
										278
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												375,
												376
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												182,
												183
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 3
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 15,
							"type": "text"
						},
						{
							"buffer": 13,
							"file": "bluemoon-production/cgi-bin/admin/migration/global.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 17023,
								"regions":
								{
								},
								"selection":
								[
									[
										15615,
										15615
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												15616,
												15617
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/double_quote.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												15576,
												15577
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_visual",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 38
									}
								},
								"translation.x": 0.0,
								"translation.y": 14630.0,
								"zoom_level": 1.0
							},
							"stack_index": 14,
							"type": "text"
						},
						{
							"buffer": 14,
							"file": "bluemoon-production/cgi-bin/classes/migrate.class.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 234875,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 16,
							"type": "text"
						},
						{
							"buffer": 15,
							"file": "bluemoon-production/cgi-bin/classes/product.class.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 216944,
								"regions":
								{
								},
								"selection":
								[
									[
										138,
										138
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
											"1":
											[
												129,
												130
											]
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"_vintageous_glue_until_normal_mode": true,
										"action": null,
										"action_count": "",
										"mode": "mode_insert",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"normal_insert_count": "1",
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 39
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 22,
							"type": "text"
						},
						{
							"buffer": 16,
							"file": "bluemoon-production/cgi-bin/classes/soap_server.class.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 4457,
								"regions":
								{
								},
								"selection":
								[
									[
										57,
										57
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 23,
							"type": "text"
						},
						{
							"buffer": 17,
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1133,
								"regions":
								{
									"match":
									{
										"flags": 112,
										"regions":
										[
											[
												373,
												395
											],
											[
												655,
												677
											],
											[
												981,
												1003
											]
										],
										"scope": ""
									}
								},
								"selection":
								[
									[
										148,
										148
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
											"1":
											[
												300,
												301
											]
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"detect_indentation": false,
									"line_numbers": false,
									"output_tag": 3,
									"result_base_dir": "",
									"result_file_regex": "^([^ \t].*):$",
									"result_line_regex": "^ +([0-9]+):",
									"scroll_past_end": true,
									"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
									"translate_tabs_to_spaces": false,
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 138.0,
								"zoom_level": 1.0
							},
							"stack_index": 13,
							"type": "text"
						},
						{
							"buffer": 18,
							"file": "bluemoon-production/cgi-bin/configuration.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 18942,
								"regions":
								{
								},
								"selection":
								[
									[
										11279,
										11279
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 25
									}
								},
								"translation.x": 0.0,
								"translation.y": 793.0,
								"zoom_level": 1.0
							},
							"stack_index": 12,
							"type": "text"
						},
						{
							"buffer": 19,
							"file": "bluemoon-production/lib/thirdparty/Guzzle/Batch/composer.json",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 815,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												813,
												814
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												0,
												1
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/JavaScript/JSON.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 11,
							"type": "text"
						},
						{
							"buffer": 20,
							"file": "bluemoon-production/html/test.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 3027,
								"regions":
								{
								},
								"selection":
								[
									[
										1152,
										1152
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												1240,
												1241
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												649,
												650
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 34
									}
								},
								"translation.x": 0.0,
								"translation.y": 598.0,
								"zoom_level": 1.0
							},
							"stack_index": 10,
							"type": "text"
						},
						{
							"buffer": 21,
							"file": "bluemoon-production/cgi-bin/classes/session.class.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 9670,
								"regions":
								{
								},
								"selection":
								[
									[
										2449,
										2449
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												2449,
												2450
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/round_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												2440,
												2441
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 32
									}
								},
								"translation.x": 0.0,
								"translation.y": 1103.0,
								"zoom_level": 1.0
							},
							"stack_index": 5,
							"type": "text"
						},
						{
							"buffer": 22,
							"file": "bluemoon-production/html/admin/test.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 2485,
								"regions":
								{
								},
								"selection":
								[
									[
										16,
										16
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 4,
							"type": "text"
						},
						{
							"buffer": 23,
							"file": "bluemoon-production/cgi-bin/classes/lease.class.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 216942,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 9,
							"type": "text"
						},
						{
							"buffer": 24,
							"file": "bluemoon-production/cgi-bin/classes/soap_license.class.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 40678,
								"regions":
								{
								},
								"selection":
								[
									[
										39297,
										39297
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												39588,
												39589
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												38999,
												39000
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 14
									}
								},
								"translation.x": 0.0,
								"translation.y": 1127.0,
								"zoom_level": 1.0
							},
							"stack_index": 6,
							"type": "text"
						},
						{
							"buffer": 25,
							"file": "bluemoon-production/cgi-bin/classes/admin.class.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 41329,
								"regions":
								{
								},
								"selection":
								[
									[
										36026,
										36026
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												37058,
												37059
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												35706,
												35707
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"highlight_line": false,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"_vintageous_glue_until_normal_mode": false,
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"normal_insert_count": "1",
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 33
									}
								},
								"translation.x": 0.0,
								"translation.y": 27071.0,
								"zoom_level": 1.0
							},
							"stack_index": 2,
							"type": "text"
						},
						{
							"buffer": 26,
							"file": "bluemoon-production/dev/set_config.php",
							"semi_transient": true,
							"settings":
							{
								"buffer_size": 1247,
								"regions":
								{
								},
								"selection":
								[
									[
										480,
										480
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												480,
												481
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												454,
												455
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 1,
							"type": "text"
						},
						{
							"buffer": 27,
							"file": "bluemoon-production/dev/send_invoices.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 2788,
								"regions":
								{
								},
								"selection":
								[
									[
										356,
										356
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 39.0
			},
			"input":
			{
				"height": 39.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					]
				],
				"cols":
				[
					0.0,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.exec":
			{
				"height": 168.0
			},
			"output.find_results":
			{
				"height": 0.0
			},
			"pinned_build_system": "Packages/User/builds/psr2.sublime-build",
			"position": "0,0,0,0,0,47,48,687,528,1366,768",
			"project": "bm1.sublime-project",
			"replace":
			{
				"height": 72.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"send_",
						"dev/send_invoices.php"
					],
					[
						"",
						"cgi-bin/classes/admin.class.php"
					],
					[
						"htmladmintest.php",
						"html/admin/test.php"
					],
					[
						"admin",
						"cgi-bin/classes/admin.class.php"
					],
					[
						"globa",
						"cgi-bin/global.php"
					],
					[
						"forms_online",
						"cgi-bin/classes/forms_online.class.php"
					],
					[
						"admin.l",
						"cgi-bin/classes/admin.class.php"
					],
					[
						"admin.class.php",
						"cgi-bin/classes/admin.class.php"
					],
					[
						"soal",
						"cgi-bin/classes/soap_license.class.php"
					],
					[
						"lease",
						"cgi-bin/classes/lease.class.php"
					],
					[
						"test.php",
						"html/test.php"
					],
					[
						"composer.",
						"lib/thirdparty/Guzzle/Batch/composer.json"
					],
					[
						"config",
						"cgi-bin/configuration.php"
					],
					[
						"migglo",
						"cgi-bin/admin/migration/global.php"
					],
					[
						"adminmigrupd",
						"html/admin/migration/update_data.php"
					],
					[
						"devcreate",
						"dev/create_enterprise_test_logins.php"
					],
					[
						"database/dev-awssess",
						"database/dev-aws/sessions/db.ini.php"
					],
					[
						"forms_on",
						"cgi-bin/classes/forms_online.class.php"
					],
					[
						"prod",
						"cgi-bin/classes/product.class.php"
					],
					[
						"import_xml",
						"html/products/forms_online/import_xml.php"
					],
					[
						"forms",
						"cgi-bin/classes/forms_online.class.php"
					],
					[
						"templlogininde",
						"html/modules/templates/Login/index.phtml"
					],
					[
						"receipt.php",
						"cgi-bin/classes/esign_receipt.class.php"
					],
					[
						"modulecon",
						"lib/Framework/class.ModuleController.php"
					],
					[
						"liblogin",
						"lib/Utils/class.Login.php"
					],
					[
						"pass",
						"cgi-bin/password.php"
					],
					[
						"password",
						"cgi-bin/password.php"
					],
					[
						"html/produc/forms_onlinenterlaun",
						"html/products/forms_online/enterprise/launch/index.php"
					],
					[
						"htmlmodconclass.lo",
						"html/modules/controllers/class.Login.php"
					],
					[
						"class.",
						"lib/Utils/class.Login.php"
					],
					[
						"htmltempllogin",
						"html/modules/templates/Login/index.phtml"
					],
					[
						"htmlmodlogin",
						"bluemoon-production-compare/html/modules/templates/Login/index.phtml"
					],
					[
						"modulestempllogin",
						"html/modules/templates/Login/index.phtml"
					],
					[
						"cgiclasesign",
						"cgi-bin/classes/esign_receipt.class.php"
					],
					[
						"esign_receip",
						"cgi-bin/classes/esign_receipt.class.php"
					],
					[
						"con",
						"cgi-bin/configuration.php"
					],
					[
						"templateloginindex",
						"html/modules/templates/Login/index.phtml"
					],
					[
						"lease.c",
						"cgi-bin/classes/lease.class.php"
					],
					[
						"htmlmodtemplogin",
						"html/modules/templates/Login/index.phtml"
					],
					[
						"htmlmodulelogin",
						"html/modules/controllers/class.Login.php"
					],
					[
						"esigntrait",
						"bluemoon-production/cgi-bin/classes/esigntrait.class.php"
					],
					[
						"esigntra",
						"bluemoon-production/cgi-bin/classes/esigntrait.class.php"
					],
					[
						"lease.class.php",
						"bluemoon-production/cgi-bin/classes/lease.class.php"
					],
					[
						"supporthelpindex",
						"bluemoon-production/html/support/help/index.php"
					],
					[
						"manageesisignerrese",
						"bluemoon-production-compare/_private/forms_online/manage_esign_signer_resend_request.inc"
					],
					[
						"manageesignsinerresen",
						"bluemoon-production/_private/forms_online/manage_esign_signer_resend_request.inc"
					],
					[
						"leasesignmanaindex",
						"bluemoon-production-compare/html/products/forms_online/lease_db/esign/manager/index.php"
					],
					[
						"leasdbesigmanaindex",
						"html/products/forms_online/lease_db/esign/manager/index.php"
					],
					[
						"sys_config/prefere/inde",
						"html/products/forms_online/sys_config/preferences/index.php"
					],
					[
						"modulelogin",
						"html/modules/templates/Login/index.phtml"
					],
					[
						"manage_users/index",
						"html/products/forms_online/sys_config/manage_users/index.php"
					],
					[
						"rentalindex",
						"html/rentalapp/index.php"
					],
					[
						"application",
						"cgi-bin/classes/application.class.php"
					],
					[
						"sub_menu",
						"_private/forms_online/sub_menu_tabs.inc"
					],
					[
						"sys_config/prefere",
						"html/products/forms_online/sys_config/preferences/index.php"
					],
					[
						"leasedbesignindex",
						"html/products/forms_online/lease_db/esign/manager/index.php"
					],
					[
						"proforprintindex",
						"html/products/forms_online/print/index.php"
					],
					[
						"htmlmodullogin",
						"html/modules/templates/Login/index.phtml"
					],
					[
						"html/modules/login",
						"html/modules/controllers/class.Login.php"
					],
					[
						"rental_app_lau",
						"dev/rental_app_launcher/index.php"
					],
					[
						"sys_config/property",
						"cgi-bin/forms_online/AANC/sys_config/property.php"
					],
					[
						"cgi-binforms_on",
						"cgi-bin/classes/forms_online.class.php"
					],
					[
						"devrentalapplau",
						"dev/rental_app_launcher/index.php"
					],
					[
						"read_l",
						"dev/read_log.php"
					],
					[
						"rental_app_launcher",
						"dev/rental_app_launcher/index.php"
					],
					[
						"configu",
						"cgi-bin/configuration.php"
					],
					[
						"soap_application_test",
						"html/admin/soap_application_test.php"
					],
					[
						"application.class",
						"cgi-bin/classes/application.class.php"
					],
					[
						"rentalapp/ind",
						"html/rentalapp/index.php"
					],
					[
						"leaselocal",
						"cgi-bin/classes/leaselocal.class.php"
					],
					[
						"leasetrai",
						"cgi-bin/classes/leasetrait.class.php"
					],
					[
						"leas",
						"cgi-bin/classes/leasetrait.class.php"
					],
					[
						"leasetra",
						"cgi-bin/classes/leasetrait.class.php"
					],
					[
						"htmlmodtemplogindex",
						"html/modules/templates/Login/index.phtml"
					],
					[
						"index",
						"html/index.php"
					],
					[
						"htmlmodulestempllongindex",
						"html/modules/templates/Login/indexIE.phtml"
					],
					[
						"htmlmodconclass.login",
						"html/modules/controllers/class.Login.php"
					],
					[
						"class.login",
						"lib/Utils/class.Login.php"
					],
					[
						"modultemplogin",
						"html/modules/templates/Login/index.phtml"
					],
					[
						"login.",
						"cgi-bin/products/forms_online/login.php"
					],
					[
						"forenterconfig",
						"html/products/forms_online/enterprise/config/index.php"
					],
					[
						"soap_esign_pdf",
						"html/admin/soap_esign_pdf_recover.php"
					],
					[
						"mysq",
						"cgi-bin/classes/mysql.class.php"
					],
					[
						"objectdb.pp",
						"lib/Db/class.ObjectDb.php"
					],
					[
						"mysql",
						"cgi-bin/classes/mysql.class.php"
					],
					[
						"onsite",
						"lib/thirdparty/Guzzle/Service/Exception/InconsistentClientTransferException.php"
					],
					[
						"lease.class",
						"cgi-bin/classes/lease.class.php"
					],
					[
						"appliction.",
						"cgi-bin/classes/application.class.php"
					],
					[
						"lease_dbeditorine",
						"html/products/forms_online/lease_db/editor/index.php"
					],
					[
						"formonenterexport",
						"html/products/forms_online/enterprise/export/export.php"
					],
					[
						"html/inde",
						"html/index.php"
					],
					[
						"esign.php",
						"html/products/forms_online/print/esign.php"
					],
					[
						"printesign.",
						"html/products/forms_online/print/esign.php"
					],
					[
						"prodprint.fileesign",
						"html/products/forms_online/print.file/esign.php"
					],
					[
						"fraclasspage",
						"lib/Framework/class.Page.php"
					],
					[
						"mysql.class.php",
						"cgi-bin/classes/mysql.class.php"
					],
					[
						"db.class",
						"cgi-bin/classes/db.class.php"
					],
					[
						"print/esign",
						"html/products/forms_online/print/esign.php"
					],
					[
						"htmlpfoprint",
						"html/products/forms_online/enterprise/help/print.php"
					],
					[
						"foldbeindex",
						"html/products/forms_online/lease_db/edit/index.php"
					],
					[
						"classobject",
						"lib/Db/class.ObjectDb.php"
					],
					[
						"class.login.php",
						"lib/Utils/class.Login.php"
					],
					[
						"resultsleasegen",
						"_private/forms_online/results_lease_generated_seg.inc"
					],
					[
						"formleaseeditindex",
						"html/products/forms_online/lease_db/edit/index.php"
					],
					[
						"classpage",
						"lib/Framework/class.Page.php"
					],
					[
						"classmoduel",
						"lib/Framework/class.ModuleFactory.php"
					],
					[
						"confi",
						"cgi-bin/configuration.php"
					],
					[
						"class.page.php",
						"lib/Framework/class.Page.php"
					],
					[
						"class",
						"lib/Framework/class.Page.php"
					],
					[
						"class.objec",
						"lib/Db/class.ObjectDb.php"
					],
					[
						"class.p",
						"lib/Framework/class.Page.php"
					],
					[
						"printesign",
						"html/products/forms_online/print/esign.php"
					],
					[
						"trans_sta",
						"dev/trans_stats.php"
					],
					[
						"applicationtra",
						"cgi-bin/classes/applicationtrait.class.php"
					],
					[
						"applicaiton",
						"cgi-bin/classes/application.class.php"
					],
					[
						"formsonlineclass",
						"cgi-bin/classes/forms_online.class.php"
					],
					[
						"applicationtr",
						"cgi-bin/classes/applicationtrait.class.php"
					],
					[
						"userservi",
						"packages/bluemoon/user/src/Services/UserService.php"
					],
					[
						"dbrepo",
						"app/Repositories/DbRepository.php"
					],
					[
						"portfo",
						"app/Services/PortfolioService.php"
					],
					[
						"passwor",
						"app/Auth/PasswordBroker.php"
					],
					[
						"passwordreset",
						"vendor/laravel/framework/src/Illuminate/Auth/Passwords/PasswordResetServiceProvider.php"
					],
					[
						"passwordresetser",
						"vendor/laravel/framework/src/Illuminate/Auth/Passwords/PasswordResetServiceProvider.php"
					],
					[
						"passwordbrker",
						"vendor/laravel/framework/src/Illuminate/Auth/Passwords/PasswordBroker.php"
					],
					[
						"appser",
						"app/Providers/AppServiceProvider.php"
					],
					[
						"appservi",
						"app/Providers/AppServiceProvider.php"
					],
					[
						"vendor/laravel/framework/src/illuminate/foundation/application.ph",
						"vendor/laravel/framework/src/Illuminate/Foundation/Application.php"
					],
					[
						"user",
						"app/Providers/UserProvider.php"
					]
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 500.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 380.0
			},
			"select_symbol":
			{
				"height": 102.0,
				"last_filter": "set_form_page",
				"selected_items":
				[
					[
						"set_form_page",
						"set_form_page_counts"
					],
					[
						"setmodifi",
						"setModified"
					],
					[
						"test_ot",
						"test_on_the_spot"
					],
					[
						"getapplicationtitle",
						"get_application_title"
					],
					[
						"get_all_re",
						"get_all_rental_app_records"
					],
					[
						"get_all_lease_records",
						"get_all_lease_records"
					],
					[
						"get_all_lease_reco",
						"get_all_lease_records"
					],
					[
						"getrestr",
						"GetRestrictedPDF"
					],
					[
						"getrestricte",
						"GetRestrictedPDF"
					],
					[
						"amendr",
						"AmendRoommates"
					],
					[
						"parseprint",
						"ParsePrintTransaction"
					],
					[
						"get_valid",
						"get_valid_application_forms"
					],
					[
						"generatepdf",
						"GeneratePDF"
					],
					[
						"fetchPDF",
						"FetchPDF"
					],
					[
						"generatees",
						"GenerateEsignaturePDF"
					],
					[
						"fetches",
						"FetchEsignaturePDF"
					],
					[
						"FetchEsignaturePDF",
						"FetchEsignaturePDF"
					],
					[
						"postreset",
						"postReset"
					],
					[
						"password",
						"passwordResetRequest"
					],
					[
						"passwordResetRequest",
						"passwordResetRequest"
					],
					[
						"getbyclienttype",
						"getByClientTypeEmail"
					],
					[
						"getrepo",
						"getRepository"
					],
					[
						"getrepository",
						"getRepository"
					],
					[
						"attempt",
						"attempt"
					],
					[
						"create",
						"create"
					],
					[
						"testdbuserrepo",
						"testDbUserRepositoryCreation"
					],
					[
						"testrental",
						"testRentalApplicationApiServiceCreation"
					],
					[
						"getpdfes",
						"getPdfByEsignId"
					],
					[
						"getpdfesign",
						"getPdfByEsignId"
					],
					[
						"testSubmit",
						"testSubmit"
					],
					[
						"testSubmi",
						"testSubmit"
					],
					[
						"testinitiate",
						"testInitiateEsignature"
					],
					[
						"testsubmit",
						"testSubmit"
					],
					[
						"translatetoxml",
						"translateToXml"
					],
					[
						"testgetvail",
						"testGetValidFields"
					],
					[
						"testgetsessionid",
						"testGetSessionId"
					],
					[
						"rentalapplic",
						"RentalApplicationService"
					],
					[
						"getboolea",
						"getBooleanFields"
					],
					[
						"testgetlegacy",
						"testGetLegacy"
					],
					[
						"testgetleg",
						"testGetLegacy"
					],
					[
						"transactionsave",
						"transactionSave"
					],
					[
						"superviso",
						"SupervisorService"
					],
					[
						"createTech",
						"createTechnote"
					],
					[
						"tomodel",
						"toModel"
					],
					[
						"getibasemodel",
						"getIbaseModelById"
					],
					[
						"transactions",
						"transactionSave"
					],
					[
						"newtechnote",
						"newTechnote"
					],
					[
						"tobu",
						"toBusinessObjects"
					],
					[
						"canresetpass",
						"CanResetPasswordContract"
					],
					[
						"testsave",
						"testSave"
					],
					[
						"getbypor",
						"getByPortfolio"
					],
					[
						"PerformIn",
						"performInsert"
					],
					[
						"syncmodel",
						"syncModelPks"
					],
					[
						"finishSave",
						"finishSave"
					],
					[
						"getAttr",
						"getAttributes"
					],
					[
						"setAttributes",
						"setAttributes"
					],
					[
						"newBaseQuery",
						"newBaseQueryBuilder"
					],
					[
						"performinsert",
						"performInsert"
					],
					[
						"increment",
						"incrementGeneratorId"
					],
					[
						"insertgetid",
						"insertGetId"
					],
					[
						"insertand",
						"insertAndSetId"
					],
					[
						"insertGetId",
						"insertGetId"
					],
					[
						"statement",
						"statement"
					],
					[
						"compileinsert",
						"compileInsert"
					],
					[
						"compileinsertgetid",
						"compileInsertGetId"
					],
					[
						"insertandsetid",
						"insertAndSetId"
					],
					[
						"createPortfolio",
						"createPortfolio"
					],
					[
						"getPermissions",
						"getPermissions"
					],
					[
						"getModelType",
						"getModelType"
					],
					[
						"getdatabydate",
						"getDataByDateRange"
					],
					[
						"getDataBy",
						"getDataByDateRange"
					],
					[
						"generateclick",
						"generateClickOrderReport"
					],
					[
						"testgetibase",
						"testGetIbaseById"
					],
					[
						"testUnitgetby",
						"testUnitGetById"
					],
					[
						"testGenerateClic",
						"testGenerateClickOrderReport"
					],
					[
						"testSearch",
						"testSearch"
					],
					[
						"search",
						"search"
					],
					[
						"testgetibasebyID",
						"testGetIbaseById"
					],
					[
						"testsearcoun",
						"testSearchCount"
					],
					[
						"translatesearcht",
						"translateSearchTags"
					],
					[
						"testgetibasebyid",
						"testGetIbaseById"
					],
					[
						"getibasebyid",
						"getIbaseById"
					],
					[
						"getById",
						"getById"
					],
					[
						"dbaccountrepotes",
						"DbAccountRepositoryTests"
					],
					[
						"testgetbymonth",
						"testGetByMonth"
					],
					[
						"dbunitrepos",
						"testDbUnitSurveyRepositoryCreation"
					],
					[
						"dbprop",
						"DbPropertyRepositoryTests"
					],
					[
						"getibase",
						"getIbaseById"
					],
					[
						"testgetassi",
						"testGetAssociations"
					],
					[
						"testgetass",
						"testGetAssociations"
					],
					[
						"configurehand",
						"configureHandlers"
					],
					[
						"welcom",
						"WelcomeController"
					],
					[
						"billingcon",
						"BillingController"
					],
					[
						"getaccount",
						"getAccount"
					],
					[
						"testPor",
						"testPortfolioCreation"
					],
					[
						"testGetProperty",
						"testGetProperty"
					],
					[
						"PortfolioServiceTest",
						"PortfolioServiceTest"
					],
					[
						"saveProperty",
						"saveProperty"
					],
					[
						"getmodelbyid",
						"getModelById"
					],
					[
						"ibaseaffiliate",
						"IbaseAffiliate"
					],
					[
						"Iaccount",
						"IAccountRepository"
					],
					[
						"IAccount",
						"IAccountRepository"
					],
					[
						"testaccoutnmem",
						"testAccountMember"
					],
					[
						"newBas",
						"newBaseQueryBuilder"
					],
					[
						"saves",
						"saveSignatureInitials"
					],
					[
						"save",
						"SaveOwnerSignature"
					],
					[
						"savesig",
						"saveSignatureInitials"
					],
					[
						"savesiini",
						"saveSignatureInitials"
					],
					[
						"createdocumentimages",
						"CreateDocumentImages"
					],
					[
						"gettenant",
						"getLeaseTenants"
					],
					[
						"emailexe",
						"EmailExecutedNotice"
					],
					[
						"testgetemail",
						"testGetEmailDictionaryResident"
					],
					[
						"mailsertest",
						"MailServiceTest"
					],
					[
						"testGetEmail",
						"testGetEmailDictionaryResident"
					],
					[
						"sendex",
						"sendExecutedEmail"
					],
					[
						"docwasex",
						"DocumentWasExecuted"
					],
					[
						"savesi",
						"saveSignatureInitials"
					],
					[
						"docuwase",
						"DocumentWasExecuted"
					],
					[
						"doecwasex",
						"DocumentWasExecuted"
					],
					[
						"configurel",
						"ConfigureLogging"
					],
					[
						"saveowne",
						"SaveOwnerSignature"
					],
					[
						"saveo",
						"SaveOwnerSignature"
					],
					[
						"emailsig",
						"EmailSignatureNotice"
					],
					[
						"sendsig",
						"sendSignatureEmail"
					],
					[
						"documentwasSi",
						"DocumentWasSigned"
					],
					[
						"useDailyFiles",
						"useDailyFiles"
					],
					[
						"sendSign",
						"sendSignatureEmail"
					],
					[
						"edocumentob",
						"EDocumentObserver"
					]
				],
				"width": 728.0
			},
			"selected_group": 0,
			"settings":
			{
				"_vintageous_last_buffer_search": "dbh",
				"_vintageous_last_buffer_search_command": "vi_slash",
				"_vintageous_last_char_search_command": "vi_f",
				"_vintageous_last_character_search": "j",
				"_vintageous_reset_during_init": true,
				"vintage":
				{
					"_cmdline_cd": "/home/jadavis/repos/bluemoon-production/cgi-bin/classes"
				}
			},
			"show_minimap": false,
			"show_open_files": false,
			"show_tabs": false,
			"side_bar_visible": true,
			"side_bar_width": 323.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 329,
			"workspace_name": "/home/jadavis/repos/bm1.sublime-workspace"
		},
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"sign",
						"signatureImage"
					],
					[
						"es",
						"eSignatureService"
					],
					[
						"getPro",
						"getProductModelsByAssociation"
					],
					[
						"activat",
						"activateOtsProduct"
					],
					[
						"produ",
						"productService"
					],
					[
						"product_set",
						"product_settings_use\t(ESignatureService.php)"
					],
					[
						"product",
						"productSettingUse"
					],
					[
						"productSet",
						"productSettingName"
					],
					[
						"getO",
						"getOffSiteSigners"
					],
					[
						"esi",
						"eSignService"
					],
					[
						"sendUnsentS",
						"sendUnsentSignatureRequestsByAccount\t(MailService.php)"
					],
					[
						"getP",
						"getPendingDocumentsByAccountId\t(ESignatureService.php)"
					],
					[
						"eSi",
						"eSignService"
					],
					[
						"sendUn",
						"sendUnsentSignatureRequestsByProduct"
					],
					[
						"doc",
						"document"
					],
					[
						"getDocument",
						"getOpenDocumentsByAccount\t(ESignatureService.php)"
					],
					[
						"DATE",
						"DATESIGNED"
					],
					[
						"ed",
						"eDocumentRepos"
					],
					[
						"eDc",
						"eDocumentModel"
					],
					[
						"signers",
						"signersData"
					],
					[
						"aja",
						"ajaxData"
					],
					[
						"forms",
						"formsData"
					],
					[
						"eD",
						"eDocumentObj"
					],
					[
						"Do",
						"DocumentWasSigned"
					],
					[
						"OWN",
						"OWNER_ESIGN_USE_ID"
					],
					[
						"eS",
						"eSignService"
					],
					[
						"proper",
						"propertyName"
					],
					[
						"ES",
						"ESignatureService"
					],
					[
						"ESi",
						"ESignatureService\t(WorkflowController.php)"
					],
					[
						"first",
						"firstSigner"
					],
					[
						"legacy",
						"legacyAppNodeUrl\t(bluemoon.php)"
					],
					[
						"sendSig",
						"sendSignatureRequests\t(MailService.php)"
					],
					[
						"Create",
						"CreateDocumentImages\t(CreateDocumentImages.php)"
					],
					[
						"R",
						"Report"
					],
					[
						"Offic",
						"OfficeService"
					],
					[
						"Offi",
						"OfficeSuite"
					],
					[
						"Techno",
						"TechnoteSource\t(AppServiceProvider.php)"
					],
					[
						"orig",
						"origAttributes"
					],
					[
						"num",
						"numberOfUnits"
					],
					[
						"prop",
						"property_exists"
					],
					[
						"syncProperty",
						"syncPropertyNumberOfUnits\t(PortfolioService.php)"
					],
					[
						"sy",
						"syncArray"
					],
					[
						"number",
						"numberOfUnits\t(DbPropertyRepository.php)"
					],
					[
						"privi",
						"privilegeLabels"
					],
					[
						"array_",
						"array_key_exists\t(CustomUserProvider.php)"
					],
					[
						"por",
						"portfolioDataForAssociation"
					],
					[
						"comp",
						"comparePropertyAttributes"
					],
					[
						"portfo",
						"portfolioService"
					],
					[
						"sync",
						"syncPropertyAttributes\t(DbPropertyRepository.php)"
					],
					[
						"getA",
						"getAttributeMap"
					],
					[
						"getUsers",
						"getUsersByAccount\t(UserSettingsController.php)"
					],
					[
						"Por",
						"PortfolioService"
					],
					[
						"formsOn",
						"formsOnlineUserRepos"
					],
					[
						"add",
						"addTechnoteAttachment\t(OfficeService.php)"
					],
					[
						"technote",
						"technoteRepos"
					],
					[
						"modelTyp",
						"modelTypeAttribute"
					],
					[
						"getMod",
						"getModelByRealId"
					],
					[
						"technoteAtta",
						"TechnoteAttachment"
					],
					[
						"Bu",
						"BusinessObject"
					],
					[
						"tech",
						"technoteCategory\t(DbTechnoteRepository.php)"
					],
					[
						"getAtt",
						"getAttributes\t(PropertyService.php)"
					],
					[
						"techno",
						"technoteSource"
					],
					[
						"cat",
						"categoryId"
					],
					[
						"getCate",
						"getCategoryByLabel"
					],
					[
						"to",
						"toBusinessObject"
					],
					[
						"getCat",
						"getCategoryModelByLabel"
					],
					[
						"note",
						"noteCategory"
					],
					[
						"Commu",
						"CommunicationsController"
					],
					[
						"place",
						"placeholder\tAttr"
					],
					[
						"getTe",
						"getTechnotesBySerialNumber\t(OfficeService.php)"
					],
					[
						"toB",
						"toBusinessObject($this"
					],
					[
						"array_key",
						"array_key_exists"
					],
					[
						"buiness",
						"businessObject"
					],
					[
						"bui",
						"businessObject"
					],
					[
						"business",
						"businessObject"
					],
					[
						"cre",
						"creationTime"
					],
					[
						"ibaseTech",
						"ibaseTechnoteClass"
					],
					[
						"clien",
						"clientTypeEmailId"
					],
					[
						"clientT",
						"clientTypeEmailId"
					],
					[
						"arra",
						"array_key_exists\t(DbAccountRepository.php)"
					],
					[
						"getModel",
						"getModelBySerialNumber"
					],
					[
						"getI",
						"getIbaseModelBySerialNumber($serialNumber"
					],
					[
						"fun",
						"fun\tfunction …"
					],
					[
						"client",
						"clientTypeId"
					],
					[
						"is",
						"is_array\t(DbPermissionRepositoryTest.php)"
					],
					[
						"Bluemoon",
						"Bluemoon\\User\\Models\\Token\t(TokenType.php)"
					],
					[
						"userMdoel",
						"userModelbyToken"
					],
					[
						"assne",
						"assertGreaterThan\t(DbAccountRepositoryTest.php)"
					],
					[
						"user",
						"user_id"
					],
					[
						"asser",
						"assertInstanceOf"
					],
					[
						"User",
						"UserController"
					],
					[
						"Con",
						"Controller\t(BaseUserController.php)"
					],
					[
						"Base",
						"BaseUserController\t(BaseUserController.php)"
					],
					[
						"access",
						"accessTokenOrModule"
					],
					[
						"fina",
						"finalAttributes2"
					],
					[
						"final",
						"finalAttributes1"
					],
					[
						"port",
						"portfolioService"
					],
					[
						"property",
						"property_exists"
					],
					[
						"mapped",
						"mappedAttribute"
					],
					[
						"ass",
						"assem\tassertEmpty"
					],
					[
						"ASS",
						"ASSOCIATION\t(Account.php)"
					],
					[
						"modeTyp",
						"modelTypeAttribute"
					],
					[
						"str",
						"strtolower"
					],
					[
						"bu",
						"businessObject"
					],
					[
						"prim",
						"primaryKey\t(Model.php)"
					],
					[
						"imo",
						"imodelArray"
					],
					[
						"ibaseMo",
						"ibaseModelCollection"
					],
					[
						"new",
						"newPortfolio"
					],
					[
						"getAttr",
						"getAttributeMap"
					],
					[
						"increment",
						"incrementGeneratorId($generator"
					],
					[
						"incre",
						"incrementGeneratorId"
					],
					[
						"permi",
						"permissionRespos"
					],
					[
						"getPerm",
						"getPermissions"
					],
					[
						"ae",
						"assertEquals"
					],
					[
						"du",
						"dummyPermission"
					],
					[
						"Perm",
						"PermissionObserver"
					],
					[
						"Bas",
						"BaseObserver"
					],
					[
						"Of",
						"OfficeService\t(BaseOfficeSuiteController.php)"
					],
					[
						"manage",
						"managePermissionModal"
					],
					[
						"debug_",
						"debug_print_backtrace"
					],
					[
						"Ser",
						"Service\t(ServiceReportServiceTest.php)"
					],
					[
						"CLICK",
						"CLICKS_PURCHASED"
					],
					[
						"COMPANY",
						"COMPANY_NUMBER"
					],
					[
						"COMP",
						"COMPANY_NAME\t(ReportService.php)"
					],
					[
						"SERIA",
						"SERIAL_NUMBER"
					],
					[
						"SER",
						"SERIAL_NUMBER"
					],
					[
						"Ob",
						"ObserverServiceProvider\t(ObserverServiceProvider.php)"
					],
					[
						"getAt",
						"getAttributes"
					]
				]
			},
			"buffers":
			[
				{
					"file": "bms-esign/app/Http/Controllers/WorkflowController.php",
					"settings":
					{
						"buffer_size": 76744,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms-esign/app/Services/ESignatureService.php",
					"settings":
					{
						"buffer_size": 22420,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "Searching 137 files for \"ng-click=\"save()\"\" (case sensitive)\n\n/home/jadavis/repos/bms-esign/resources/views/mobile/setup.blade.php:\n   11              <!-- centralize -->\n   12              <a class=\"link\"></a>\n   13:             <a ng-click=\"save()\" class=\"btn\" ng-disabled=\"ajaxInProgress\">Save &amp; Continue <i class=\"fa fa-chevron-right arrow-right\"></i></a>\n   14              <a class=\"link\"></a>\n   15          </div>\n\n/home/jadavis/repos/bms-esign/resources/views/portal/setup.blade.php:\n    7          <div class=\"esignature-buttons\" ng-controller=\"setupNavCtrl\">\n    8              <div class=\"pull-right\">\n    9:                 <a ng-click=\"save()\" ng-disabled=\"ajaxInProgress\" class=\"btn btn-primary btn-block\">Save &amp; Continue <i class=\"fa fa-chevron-right\"></i></a>\n   10              </div>\n   11              <div class=\"clearfix\"></div>\n\n2 matches across 2 files\n",
					"settings":
					{
						"buffer_size": 885,
						"line_ending": "Unix",
						"name": "Find Results",
						"scratch": true
					}
				},
				{
					"file": "bms-esign/resources/views/mobile/setup.blade.php",
					"settings":
					{
						"buffer_size": 540,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms-esign/public/js/app/setup.js",
					"settings":
					{
						"buffer_size": 4191,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				}
			],
			"build_system": "Packages/User/builds/psr2.sublime-build",
			"build_system_choices":
			[
				[
					[
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							""
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (All)"
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (This File Only)"
						],
						[
							"Packages/User/builds/psr2.sublime-build",
							""
						]
					],
					[
						"Packages/User/builds/psr2.sublime-build",
						""
					]
				]
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 60.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"pack",
						"Package Control: List Packages"
					],
					[
						"Package Control: ",
						"Package Control: List Packages"
					],
					[
						"Snippet: ",
						"Snippet: COOKIE['…']"
					],
					[
						"Package Control: install",
						"Package Control: Install Package"
					],
					[
						"Snippet: ld",
						"Snippet: LogDebug"
					],
					[
						"Paconrepa",
						"Package Control: Remove Package"
					],
					[
						"inp",
						"Package Control: Install Package"
					],
					[
						"instal",
						"Package Control: Install Package"
					],
					[
						"pa",
						"Package Control: Install Package"
					],
					[
						"paconad",
						"Package Control: Add Repository"
					],
					[
						"sniff",
						"PHP Code Sniffer: Sniff this file"
					],
					[
						"phpunit",
						"PHPUnit: Run"
					],
					[
						"phpun",
						"PHPUnit: Run"
					],
					[
						"tenant",
						"GitGutter: Show Comparing Against"
					],
					[
						"getset",
						"Generate Getter and Setter for ..."
					],
					[
						"togglet",
						"View: Toggle Tabs"
					],
					[
						"get set",
						"PHP: Generate Getters and Setters"
					],
					[
						"toggle tab",
						"View: Toggle Tabs"
					],
					[
						"View:toggl",
						"View: Toggle Tabs"
					],
					[
						"sublimelinter",
						"Preferences: SublimeLinter Key Bindings – Default"
					],
					[
						"packagecon",
						"Package Control: List Packages"
					],
					[
						"in",
						"Package Control: Install Package"
					],
					[
						"inst",
						"Package Control: Install Package"
					],
					[
						"sublim",
						"SublimeLinter: Show All Errors"
					],
					[
						"ins",
						"Package Control: Install Package"
					],
					[
						"generate",
						"Generate Getter and Setter for ..."
					],
					[
						"phprefa",
						"PHPSimpleRefactor: extract current lines to method"
					],
					[
						"pca",
						"Package Control: Install Package"
					],
					[
						"phpcompan",
						"PHPCompanion:Find Use"
					],
					[
						"toggle ta",
						"View: Toggle Tabs"
					],
					[
						"getter",
						"PHP: Generate Getters"
					],
					[
						"Snippet: asse",
						"Snippet: assertEquals"
					],
					[
						"install",
						"Package Control: Install Package"
					],
					[
						"phpcompanion",
						"PHPCompanion:Expand Fully Qualified Class Name"
					],
					[
						"impo",
						"PHPCompanion:Import Namespace"
					],
					[
						"phpcomp",
						"PHPCompanion:Import Namespace"
					],
					[
						"compan",
						"PHPCompanion:Insert Constructor Property"
					],
					[
						"php",
						"PHPCompanion:Insert Constructor Property"
					],
					[
						"phpcom",
						"PHPCompanion:Insert Constructor Property"
					],
					[
						"const",
						"PHPCompanion:Insert Constructor Property"
					],
					[
						"packi",
						"Package Control: Install Package"
					],
					[
						"php com",
						"PHPCompanion:Expand Fully Qualified Class Name"
					],
					[
						"insta",
						"Package Control: Install Package"
					],
					[
						"toggle ",
						"View: Toggle Status Bar"
					],
					[
						"anf",
						"ANF: Rename File"
					],
					[
						"status",
						"View: Toggle Status Bar"
					],
					[
						"package re",
						"PackageResourceViewer: Extract Package"
					],
					[
						"package in",
						"Package Control: Install Package"
					],
					[
						"install ",
						"Colorsublime: Install Theme"
					],
					[
						"pcak",
						"Package Control: Install Package"
					],
					[
						"esign",
						"Snippet: Designate that the column allows NULL values"
					],
					[
						"Snippet: doc",
						"Snippet: Start Docblock"
					],
					[
						"packains",
						"Package Control: Install Package"
					],
					[
						"packin",
						"Package Control: Install Package"
					],
					[
						"syntaxjson",
						"Set Syntax: JSON"
					],
					[
						"Pacin",
						"Package Control: Install Package"
					],
					[
						"Package Control: inst",
						"Package Control: Install Package"
					],
					[
						"Package Control: in",
						"Package Control: Install Package"
					],
					[
						"inden",
						"Indentation: Reindent Lines"
					],
					[
						":w",
						":w - Save"
					]
				],
				"width": 962.0
			},
			"console":
			{
				"height": 375.0,
				"history":
				[
					"+context_name+",
					"clear",
					"Toggle ScopeAlways",
					"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) :Q",
					"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"expanded_folders":
			[
				"/home/jadavis/repos/bms-esign",
				"/home/jadavis/repos/bms-esign/public",
				"/home/jadavis/repos/bms-esign/public/js",
				"/home/jadavis/repos/bms-esign/public/js/app",
				"/home/jadavis/repos/bms-esign/resources",
				"/home/jadavis/repos/bms-esign/resources/views",
				"/home/jadavis/repos/bms-esign/resources/views/portal"
			],
			"file_history":
			[
				"/home/jadavis/repos/bms-esign/app/Models/Association.php",
				"/home/jadavis/repos/bms-esign/app/Services/ESignatureService.php",
				"/home/jadavis/repos/bms-esign/app/Http/Controllers/WorkflowController.php",
				"/home/jadavis/repos/bms-esign/bootstrap/autoload.php",
				"/home/jadavis/repos/bms-esign/app/Models/Product.php",
				"/home/jadavis/repos/bms-esign/app/Services/MailService.php",
				"/home/jadavis/repos/bms-esign/app/Providers/EventServiceProvider.php",
				"/home/jadavis/repos/bms-esign/app/Listeners/Events/EmailExecutedNotice.php",
				"/home/jadavis/repos/bms-esign/public/js/app/forms.js",
				"/home/jadavis/repos/bms-esign/app/Http/Controllers/EventController.php",
				"/home/jadavis/repos/bms-esign/app/Http/routes.php",
				"/home/jadavis/repos/bms-esign/app/Listeners/Events/EmailInitialNotice.php",
				"/home/jadavis/repos/bms-esign/app/Listeners/Events/EmailSignatureNotice.php",
				"/home/jadavis/repos/bms-esign/app/Models/EDocument.php",
				"/home/jadavis/repos/bms-esign/tests/bluemoon/esignature/services/MailServiceTest.php",
				"/home/jadavis/repos/bms-esign/app/Listeners/Events/CheckReadyToExecute.php",
				"/home/jadavis/repos/bms-esign/.env",
				"/home/jadavis/repos/bms-esign/app/Models/ProductSettingsUse.php",
				"/home/jadavis/repos/bms-esign/app/Models/ProductSettings.php",
				"/home/jadavis/repos/bms-esign/app/Libraries/Repositories/DbEDocumentRepository.php",
				"/home/jadavis/repos/bms-esign/tests/bluemoon/esignature/services/ESignatureServiceTest.php",
				"/home/jadavis/repos/bms-esign/app/Services/ProductService.php",
				"/home/jadavis/repos/bms-esign/tests/bluemoon/esignature/services/DbEDocumentRespositoryTest.php",
				"/home/jadavis/repos/bms-esign/config/database.php",
				"/home/jadavis/repos/bms-esign/tests/bluemoon/esignature/services/ProductServiceTest.php",
				"/home/jadavis/repos/bms-esign/app/Services/FormService.php",
				"/home/jadavis/repos/bms-esign/vendor/laravel/framework/src/Illuminate/Contracts/Debug/ExceptionHandler.php",
				"/home/jadavis/repos/bms-esign/vendor/laravel/framework/src/Illuminate/Foundation/Exceptions/Handler.php",
				"/home/jadavis/repos/bms-esign/vendor/symfony/debug/Symfony/Component/Debug/Exception/FatalErrorException.php",
				"/home/jadavis/repos/bms-esign/app/Http/Controllers/EDocumentController.php",
				"/home/jadavis/repos/bms-esign/resources/views/mobile/complete.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/mobile/payment.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/master/portal.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/portal/lease-summary-panel.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/portal/mobile-panel.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/master/mobile.blade.php",
				"/home/jadavis/repos/bms-esign/vendor/laravel/framework/src/Illuminate/Foundation/Application.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/master.blade.php",
				"/home/jadavis/repos/bms-esign/vendor/laravel/framework/src/Illuminate/Foundation/Support/Providers/EventServiceProvider.php",
				"/home/jadavis/repos/bms-esign/app/Libraries/Repositories/DbESignerRepository.php",
				"/home/jadavis/repos/bms-esign/app/Events/DocumentWasCreated.php",
				"/home/jadavis/repos/bms-esign/app/Exceptions/Handler.php",
				"/home/jadavis/repos/bms-esign/app/Exceptions/HttpException.php",
				"/home/jadavis/repos/bms-esign/app/Exceptions/BmsException.php",
				"/home/jadavis/repos/bms-esign/vendor/symfony/debug/Symfony/Component/Debug/ExceptionHandler.php",
				"/home/jadavis/repos/bms-esign/app/Commands/CreateDocumentImages.php",
				"/home/jadavis/repos/bms-esign/app/Events/DocumentWasExecuted.php",
				"/home/jadavis/repos/bms-esign/config/cache.php",
				"/home/jadavis/repos/bms-esign/composer.json",
				"/home/jadavis/repos/bms-esign/public/js/app/disclosure.js",
				"/home/jadavis/repos/bms-esign/resources/views/index.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/gaaReadyToExecute.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/gaaSign.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/initiated.blade.php",
				"/home/jadavis/repos/bms-esign-compare/app/Providers/EventServiceProvider.php",
				"/home/jadavis/repos/bms-esign-compare/app/Services/MailService.php",
				"/home/jadavis/repos/bms-esign/app/Models/Property.php",
				"/home/jadavis/repos/bms-esign/app/Bms/Support/AddressBuilder.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/notification.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/otherRentalApp.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/sign.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/submitted.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/resComplete.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/ownerComplete.blade.php",
				"/home/jadavis/repos/bms-esign/app/Libraries/Repositories/IEDocumentRepository.php",
				"/home/jadavis/repos/bms-esign/app/Models/ESigner.php",
				"/home/jadavis/repos/bms-esign/app/Libraries/Constants.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/readyToExecute.blade.php",
				"/home/jadavis/repos/bms-esign/public/js/app/complete.js",
				"/home/jadavis/repos/bms-esign/app/Console/Kernel.php",
				"/home/jadavis/repos/bms-esign/app/Http/Kernel.php",
				"/home/jadavis/repos/bms-esign/app/Providers/ObserverServiceProvider.php",
				"/home/jadavis/repos/bms-esign/app/Observers/ESignerObserver.php",
				"/home/jadavis/repos/bms-esign/app/Events/DocumentWasSigned.php",
				"/home/jadavis/repos/bms-esign/config/esignature.php",
				"/home/jadavis/repos/bms-esign/app/Listeners/Events/SaveOwnerSignature.php",
				"/home/jadavis/repos/bms-esign/resources/views/disclosure.blade.php",
				"/home/jadavis/repos/bms-esign/config/session.php",
				"/home/jadavis/repos/bms-esign/public/js/app/jSignature-inline/jSignature-core.js",
				"/home/jadavis/repos/bms-esign/resources/views/steps/setup.blade.php",
				"/home/jadavis/repos/bms-esign/public/js/ngMask.js",
				"/home/jadavis/repos/bms-esign/resources/views/steps/forms.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/shared/signed-field.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/executed.blade.php",
				"/home/jadavis/repos/bms-esign/config/app.php",
				"/home/jadavis/repos/bms-esign/app/Providers/AppServiceProvider.php",
				"/home/jadavis/repos/bms-esign/app/Services/PDFConversionService.php",
				"/home/jadavis/repos/bms-esign/app/Models/ESignerHistory.php",
				"/home/jadavis/repos/bms-esign/app/Models/Model.php",
				"/home/jadavis/repos/bms-esign/app/Models/Portolio.php",
				"/home/jadavis/repos/bms-esign/public/js/app/setup.js",
				"/home/jadavis/repos/bms-esign/tests/CustomerTest.php",
				"/home/jadavis/repos/bms-esign/tests/bluemoon/esignature/models/EDocumentTest.php",
				"/home/jadavis/repos/bms-esign/tests/bluemoon/esignature/models/ESignerTest.php",
				"/home/jadavis/repos/bms-esign/app/Models/Customer.php",
				"/home/jadavis/repos/bms-esign/vendor/composer/autoload_classmap.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/signature.blade.php",
				"/home/jadavis/repos/bms-esign/app/Events/CheckReadyToExecute.php",
				"/home/jadavis/repos/bms-esign/app/Listeners/Events/EmailOwnerInitialNotice.php",
				"/home/jadavis/repos/bms-esign/resources/views/emails/master.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/emails/password.blade.php",
				"/home/jadavis/repos/bms-esign/app/Providers/ResponseMacroServiceProvider.php",
				"/home/jadavis/repos/bms-esign/resources/views/formthumbnail.blade.php",
				"/home/jadavis/repos/bms-esign/app/Http/Controllers/MobileController.php",
				"/home/jadavis/repos/bms-esign/public/index.php",
				"/home/jadavis/repos/bms-esign/public/.htaccess",
				"/home/jadavis/repos/bms-esign-compare/app/Http/Controllers/WorkflowController.php",
				"/home/jadavis/repos/bms-esign/config/bluemoon.php",
				"/home/jadavis/repos/bms-esign/app/Observers/EDocumentObserver.php",
				"/home/jadavis/repos/bms-esign/storage/framework/views/131fae90a7b1f53a6c227640c49ededd",
				"/home/jadavis/repos/bms-esign-compare/app/Services/ESignatureService.php",
				"/home/jadavis/repos/bms-esign/public/js/angular-pdfjs.js",
				"/home/jadavis/repos/bms-esign/public/js/pdf.js",
				"/home/jadavis/repos/bms-esign/resources/views/complete.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/themes/Default/head.blade.php",
				"/home/jadavis/repos/bms2-sandlot/mobile/esignApp/www/master.html",
				"/home/jadavis/repos/bms-esign/app/Bms/Support/EsigncacheStore.php",
				"/home/jadavis/repos/bms-esign/config/queue.php",
				"/home/jadavis/repos/bms-esign/vendor/laravel/framework/src/Illuminate/Queue/InteractsWithQueue.php",
				"/home/jadavis/repos/bms-esign/vendor/laravel/framework/src/Illuminate/Queue/Listener.php",
				"/home/jadavis/repos/bms-esign/vendor/laravel/framework/src/Illuminate/Events/EventServiceProvider.php",
				"/home/jadavis/repos/bms-esign/resources/views/esigner/index.blade.php",
				"/home/jadavis/repos/bms-esign/vendor/laravel/framework/src/Illuminate/Events/Dispatcher.php",
				"/home/jadavis/repos/bms-esign/vendor/laravel/framework/src/Illuminate/Support/ServiceProvider.php",
				"/home/jadavis/repos/bms-esign/vendor/laravel/framework/src/Illuminate/Contracts/Queue/ShouldBeQueued.php",
				"/home/jadavis/repos/bms-esign/app/Listeners/Events/CreateDocumentImages.php",
				"/home/jadavis/repos/github-prod-keys/bms_env_files/env.qual.txt",
				"/home/jadavis/repos/github-prod-keys/bms_env_files/env.prod.txt"
			],
			"find":
			{
				"height": 39.0
			},
			"find_in_files":
			{
				"height": 158.0,
				"where_history":
				[
					"/home/jadavis/repos/bms-esign/resources",
					"/home/jadavis/repos/bms-esign/app/Services",
					"/home/jadavis/repos/bms-esign/config",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/resources",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/app",
					"/home/jadavis/repos/bms-esign/app/Listeners/Events",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/app",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/app",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/resources",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/resources",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/resources",
					"/home/jadavis/repos/bms-esign/public",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/resources",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/resources",
					"/home/jadavis/repos/bms-esign/public/js/app",
					"/home/jadavis/repos/bms-esign/public",
					"/home/jadavis/repos/bms-esign,-*.js,,-*.log",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/resources/views/portal",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/resources",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/resources",
					"/home/jadavis/repos/bms-esign/public/js",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/resources/views/email",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/resources/views/email",
					"/home/jadavis/repos/bms-esign/resources/views",
					"/home/jadavis/repos/bms-esign/vendor",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/app",
					"/home/jadavis/repos/bms-esign/app/Services",
					"/home/jadavis/repos/bms-esign/app",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/config",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign,-*.log",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign-compare",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign-compare",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/app/Http/Controllers",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/resources",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/app",
					"/home/jadavis/repos/bms-esign,-*.log",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite,-*.css",
					"/home/jadavis/repos/bms2-sandlot/packages,-*.css",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot,-*.log",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot,-*.json",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite",
					"/home/jadavis/repos/bms2-sandlot,-*.json",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/app/Services",
					"/home/jadavis/repos/bms2-sandlot/app/Repositories",
					"/home/jadavis/repos/bms2-sandlot/packages/leaseprogram",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot/app/Providers",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite/src/Http/Controllers",
					"/home/jadavis/repos/bms2-sandlot/packages/myibase",
					"/home/jadavis/repos/bms2-sandlot/packages/mydbdriver",
					"/home/jadavis/repos/bms2-sandlot,-*.json",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon",
					"/home/jadavis/repos/bms2-sandlot/packages,-*.js",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite",
					"/home/jadavis/repos/bms2-sandlot/config",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/vendor",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/app/Services",
					"/home/jadavis/repos/bms2-sandlot/app/Repositories",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon,-*.js",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot-compare/packages",
					"/home/jadavis/repos/bms2-sandlot-compare/app",
					"/home/jadavis/repos/bms2-sandlot/packages/myibase",
					"/home/jadavis/repos/bms2-sandlot/packages/mydbdriver",
					"/home/jadavis/repos/bms2-sandlot/packages,-*.js",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/,-*.js",
					"/home/jadavis/repos/bms2-sandlot/-*.js",
					"/home/jadavis/repos/bms2-sandlot/packages,-*.js",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot/packages/myibase",
					"/home/jadavis/repos/bms2-sandlot/",
					"/home/jadavis/repos/bms2-sandlot/packages/mydbdriver"
				]
			},
			"find_state":
			{
				"case_sensitive": true,
				"find_history":
				[
					"ng-click=\"save()\"",
					"EDocument'",
					"db-dev.bluemoonforms.com",
					"_dev1",
					"eSignerInfo.NAME",
					"->associa",
					"Not all fields",
					"                        ",
					"DocumentWasExecuted",
					"usesOnTheSpot",
					"usesOnTheSport",
					"PDFConversionService",
					"getPendingDocumentsByAccountId",
					"eSignatureService",
					"ESignatureService",
					"ONSITE",
					"esignserv",
					"EDocumentRepository",
					"ESignatureService",
					"productSettings",
					"ProductSettings",
					"sendNextSignatureEmail",
					"formatValidationErrors",
					"::fire",
					"START",
					"isMutex",
					"sign-here",
					"mutexfieldname",
					"E_CHECK",
					"put/signature",
					"signField",
					"HERE",
					"signature",
					"signature-undo",
					"undo",
					"src",
					"usesESign2",
					"GAA",
					"indicatorLabel",
					"CHECK ONE",
					"\"CHECK ONE\"",
					"v=",
					"put/signature",
					"ng-click",
					"function sign",
					"DocumentWasExecuted",
					"DocumentWasSigned",
					"sendSignatureRequests",
					"GAA",
					"generateDocument",
					"generateDocume nt",
					"class=\"btn\"",
					"signature",
					"sendExecutedEmail",
					"Congratulations.  The {{ $productDocuments }} received final approval and have been executed.  The starting date of your lease @if ($renewal) renewal @endif is {{ $leaseStartDate }}.",
					"sales",
					"execute",
					"Execute",
					"img",
					"src",
					"style",
					"PHP-parser",
					"\\Log::debug(__METHOD__ . \":\"",
					"\\Log",
					"DB_PASSWORD_DEV",
					"DB_USERNAME_DEV",
					"DB_DATABASE_DEV",
					"DB_HOST_DEV",
					"memory_limit",
					"saveSignatureInitials",
					"throw",
					"No PDF Found for",
					"md5",
					"saveSignatureInitials",
					"cacheKeys",
					"mysql_dev_bm2",
					"DocumentImagesWereCreated",
					"may only be viewed",
					"The executed Lease Contract Documents",
					"saveSignatureInitials",
					"geteSign",
					"signField",
					"checkUnsignedFields",
					"saveFieldInHistory",
					"signField",
					"saveFieldInHistory",
					"formthumbnail",
					"drawPDF",
					"PDFbuffer",
					"SoapClient",
					"Fetching",
					"pdfViewer",
					"angular-pdfjs",
					"PDFJS",
					"PDF.js",
					"pdf.js",
					"dictionary",
					"esign/index.php",
					"EsigncacheStore",
					"forgetExpired",
					"CreateDocumentImages",
					"CreateDocumentImagesListener",
					"EmailInitialNotice",
					"Event::fire",
					"ESignerHistoryObserver",
					"s3",
					"technote",
					"app->bind",
					"combineAttributes",
					"blumoonformsdev",
					"spinner",
					"privilegeStatus",
					"aptUnits",
					"Product",
					"You have reached an area",
					"PWDRESET",
					"here we is",
					"\\App\\Models\\User",
					"leaseprogram",
					"bcrypt",
					"getValidationFactory",
					"function validate",
					"officedev",
					"PWDRESET",
					"NoteCategory",
					"START Zend",
					"PWDRESET",
					"HEAD"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
					"db-dev.bluemoonformsdev.com",
					"",
					"getPendingDocumentModelsByAccountId",
					"productService",
					"ProductService",
					"repos",
					"DbEDocumentRepository",
					"EDocumentRepository",
					"productSetting",
					"ProductSetting",
					"complete",
					"Complete",
					"DB_MYSQL_APP_PASSWORD",
					"DB_MYSQL_APP_USERNAME",
					"DB_MYSQL_DEV_DATABASE",
					"DB_MYSQL_DEV_HOST",
					"TechnoteCategory",
					"lcfirst",
					"technote",
					"Technote",
					"$this->defaultTokenType",
					"tokenType",
					"TokenType",
					"token",
					"Token",
					");",
					"cache.duration",
					"$cacheKeyName",
					"private $",
					"private ",
					"$connection",
					"permissionsTable",
					"Permission",
					"permission",
					"Permission",
					"savePermissionForm",
					"save-permission-form",
					"Service",
					"service",
					"Service",
					"service",
					"App\\Http\\Controllers",
					"App\\Controller",
					"clickReportService",
					"ClickReport",
					"clickOrder",
					"ClickOrder",
					"Billing",
					"report",
					"Report",
					"user",
					"User",
					"user",
					"Jad <jad@bluemoonforms.com>",
					"public function",
					"bluemoon_lite",
					"Billing",
					"Settings",
					"dummy",
					"",
					"dboffice3",
					"Reports",
					"reports",
					"Reports",
					"reports",
					"Reports",
					"billing",
					"save",
					"get",
					"unitSurveyRepos",
					"DbUnitSurveyRepository",
					"unitSurveyProperty",
					"UnitSurveyProperty",
					"officeService",
					"OfficeService",
					"lookupId",
					"ffiliate",
					"Affiliate",
					"affiliate",
					"Affiliate",
					"Portfolio",
					"El Paso",
					"lookupName",
					"affiliate",
					"Affiliate",
					"portfolio",
					"Portfolio",
					"portfolio",
					"Portfolio",
					"ortfolio",
					"ortfolioForm",
					"PortfolioField",
					"portfolioField",
					"portfolioId",
					"portfolio",
					"Portfolio",
					"PortfolioForm",
					"portfolioForm",
					"portfolioField",
					"PortfolioField",
					"formName",
					"PortfolioForm",
					"PortfolioField",
					"portfolio",
					"Portfolio",
					"PortfolioForm",
					"remember",
					"portfolio",
					"Portfolio",
					"portfolio",
					"Portfolio",
					"member",
					"Member",
					"Account",
					"account",
					"Account",
					"propertyNumber",
					"App",
					"tenant",
					"Tenant",
					"jobKey",
					"",
					",",
					"eSignServiceMock",
					",\\n",
					"\\n",
					"Pending",
					"status"
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"groups":
			[
				{
					"selected": 4,
					"sheets":
					[
						{
							"buffer": 0,
							"file": "bms-esign/app/Http/Controllers/WorkflowController.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 76744,
								"regions":
								{
								},
								"selection":
								[
									[
										34818,
										34818
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												35337,
												35338
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												32860,
												32861
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"_vintageous_glue_until_normal_mode": false,
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"normal_insert_count": "1",
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 65
									}
								},
								"translation.x": 0.0,
								"translation.y": 19365.0,
								"zoom_level": 1.0
							},
							"stack_index": 1,
							"type": "text"
						},
						{
							"buffer": 1,
							"file": "bms-esign/app/Services/ESignatureService.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 22420,
								"regions":
								{
								},
								"selection":
								[
									[
										15827,
										15827
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												15827,
												15828
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												14969,
												14970
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 4
									}
								},
								"translation.x": 0.0,
								"translation.y": 8877.0,
								"zoom_level": 1.0
							},
							"stack_index": 2,
							"type": "text"
						},
						{
							"buffer": 2,
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 885,
								"regions":
								{
									"match":
									{
										"flags": 112,
										"regions":
										[
											[
												233,
												250
											],
											[
												644,
												661
											]
										],
										"scope": ""
									}
								},
								"selection":
								[
									[
										245,
										245
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"detect_indentation": false,
									"line_numbers": false,
									"output_tag": 1,
									"result_base_dir": "",
									"result_file_regex": "^([^ \t].*):$",
									"result_line_regex": "^ +([0-9]+):",
									"scroll_past_end": true,
									"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
									"translate_tabs_to_spaces": false,
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_visual",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 33
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 4,
							"type": "text"
						},
						{
							"buffer": 3,
							"file": "bms-esign/resources/views/mobile/setup.blade.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 540,
								"regions":
								{
								},
								"selection":
								[
									[
										322,
										322
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"git_gutter_is_enabled": true,
									"syntax": "Packages/Laravel Blade Highlighter/blade.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 3,
							"type": "text"
						},
						{
							"buffer": 4,
							"file": "bms-esign/public/js/app/setup.js",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 4191,
								"regions":
								{
								},
								"selection":
								[
									[
										2356,
										2356
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												2357,
												2358
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												1332,
												1333
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"git_gutter_is_enabled": true,
									"highlight_line": false,
									"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
									"vintage":
									{
										"_vintageous_glue_until_normal_mode": false,
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"normal_insert_count": "1",
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 11
									}
								},
								"translation.x": 0.0,
								"translation.y": 1599.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 39.0
			},
			"input":
			{
				"height": 39.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					]
				],
				"cols":
				[
					0.0,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.exec":
			{
				"height": 168.0
			},
			"output.find_results":
			{
				"height": 0.0
			},
			"pinned_build_system": "Packages/User/builds/psr2.sublime-build",
			"position": "0,0,0,0,0,70,72,710,552,1366,768",
			"project": "esign.sublime-project",
			"replace":
			{
				"height": 72.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"",
						"public/js/app/setup.js"
					],
					[
						"work",
						"app/Http/Controllers/WorkflowController.php"
					],
					[
						"edocument",
						"app/Libraries/Repositories/DbEDocumentRepository.php"
					],
					[
						"edocum",
						"app/Models/EDocument.php"
					],
					[
						".env",
						".env"
					],
					[
						"mailser",
						"app/Services/MailService.php"
					],
					[
						"esignser",
						"app/Services/ESignatureService.php"
					],
					[
						"productservi",
						"app/Services/ProductService.php"
					],
					[
						"produservtest",
						"tests/bluemoon/esignature/services/ProductServiceTest.php"
					],
					[
						"asso",
						"app/Models/Association.php"
					],
					[
						"edocume",
						"app/Models/EDocument.php"
					],
					[
						"rou",
						"app/Http/routes.php"
					],
					[
						"routes",
						"app/Http/routes.php"
					],
					[
						"eventcontroller",
						"app/Http/Controllers/EventController.php"
					],
					[
						"eventcontr",
						"app/Http/Controllers/EventController.php"
					],
					[
						"eventser",
						"app/Providers/EventServiceProvider.php"
					],
					[
						"event",
						"app/Http/Controllers/EventController.php"
					],
					[
						"dbedo",
						"app/Libraries/Repositories/DbEDocumentRepository.php"
					],
					[
						"eve",
						"app/Providers/EventServiceProvider.php"
					],
					[
						"prodser",
						"app/Services/ProductService.php"
					],
					[
						"prosertes",
						"tests/bluemoon/esignature/services/ProductServiceTest.php"
					],
					[
						"dbedocre",
						"tests/bluemoon/esignature/services/DbEDocumentRespositoryTest.php"
					],
					[
						"esiserte",
						"tests/bluemoon/esignature/services/ESignatureServiceTest.php"
					],
					[
						"esignatureserv",
						"app/Services/ESignatureService.php"
					],
					[
						"mailserv",
						"app/Services/MailService.php"
					],
					[
						"dbedocretest",
						"tests/bluemoon/esignature/services/DbEDocumentRespositoryTest.php"
					],
					[
						"dbed",
						"app/Libraries/Repositories/DbEDocumentRepository.php"
					],
					[
						"mail",
						"app/Services/MailService.php"
					],
					[
						"produservitest",
						"tests/bluemoon/esignature/services/ProductServiceTest.php"
					],
					[
						"prodsertest",
						"tests/bluemoon/esignature/services/ProductServiceTest.php"
					],
					[
						"associaito",
						"app/Models/Association.php"
					],
					[
						"esiserv",
						"app/Services/ESignatureService.php"
					],
					[
						"esignesrtest",
						"tests/bluemoon/esignature/services/ESignatureServiceTest.php"
					],
					[
						"wor",
						"app/Http/Controllers/WorkflowController.php"
					],
					[
						"modelproduc",
						"app/Models/Product.php"
					],
					[
						"edocu",
						"app/Models/EDocument.php"
					],
					[
						"esignsertest",
						"tests/bluemoon/esignature/services/ESignatureServiceTest.php"
					],
					[
						"dbe",
						"app/Libraries/Repositories/DbEDocumentRepository.php"
					],
					[
						"edocumrepo",
						"app/Libraries/Repositories/DbEDocumentRepository.php"
					],
					[
						"checkre",
						"app/Listeners/Events/CheckReadyToExecute.php"
					],
					[
						"edocrepo",
						"app/Libraries/Repositories/DbEDocumentRepository.php"
					],
					[
						"prodsettinuse",
						"app/Models/ProductSettingsUse.php"
					],
					[
						"producsett",
						"app/Models/ProductSettings.php"
					],
					[
						"esigser",
						"app/Services/ESignatureService.php"
					],
					[
						"esignsertes",
						"tests/bluemoon/esignature/services/ESignatureServiceTest.php"
					],
					[
						"esign",
						"app/Services/ESignatureService.php"
					],
					[
						"mailservice",
						"app/Services/MailService.php"
					],
					[
						"productsettingsuse",
						"app/Models/ProductSettingsUse.php"
					],
					[
						"prodsetuse",
						"app/Models/ProductSettingsUse.php"
					],
					[
						"productsettings",
						"app/Models/ProductSettings.php"
					],
					[
						"appmodelprod",
						"app/Models/Product.php"
					],
					[
						"dbedco",
						"app/Libraries/Repositories/DbEDocumentRepository.php"
					],
					[
						"dbesigner",
						"app/Libraries/Repositories/DbESignerRepository.php"
					],
					[
						"configapp",
						"config/app.php"
					],
					[
						"bootstrapaut",
						"bootstrap/autoload.php"
					],
					[
						"eventserprovi",
						"app/Providers/EventServiceProvider.php"
					],
					[
						"signed-field",
						"resources/views/shared/signed-field.blade.php"
					],
					[
						"workflowcontroll",
						"app/Http/Controllers/WorkflowController.php"
					],
					[
						"composer.json",
						"composer.json"
					],
					[
						"emailini",
						"app/Listeners/Events/EmailInitialNotice.php"
					],
					[
						"product",
						"app/Models/Product.php"
					],
					[
						"/",
						"app/Listeners/Events/EmailInitialNotice.php"
					],
					[
						"eventserpor",
						"app/Providers/EventServiceProvider.php"
					],
					[
						"dbesign",
						"app/Libraries/Repositories/DbESignerRepository.php"
					],
					[
						"e",
						"app/Services/ESignatureService.php"
					],
					[
						"customer",
						"app/Models/Customer.php"
					],
					[
						"mailservic",
						"app/Services/MailService.php"
					],
					[
						"edocumentre",
						"app/Libraries/Repositories/DbEDocumentRepository.php"
					],
					[
						"rout",
						"app/Http/routes.php"
					],
					[
						"disclosure.js",
						"public/js/app/disclosure.js"
					],
					[
						"documentrepo",
						"app/Libraries/Repositories/DbEDocumentRepository.php"
					],
					[
						"esigner.php",
						"app/Models/ESigner.php"
					],
					[
						"esi",
						"app/Services/ESignatureService.php"
					],
					[
						"eventserpro",
						"app/Providers/EventServiceProvider.php"
					],
					[
						"approutes",
						"app/Http/routes.php"
					],
					[
						"emailexe",
						"bms-esign/app/Listeners/Events/EmailExecutedNotice.php"
					],
					[
						"check",
						"bms-esign/app/Listeners/Events/CheckReadyToExecute.php"
					],
					[
						"mai",
						"bms-esign/app/Services/MailService.php"
					],
					[
						"config/database",
						"bms-esign/config/database.php"
					],
					[
						"obserserprovi",
						"bms-esign/app/Providers/ObserverServiceProvider.php"
					],
					[
						"eventcon",
						"bms-esign/app/Http/Controllers/EventController.php"
					],
					[
						"property",
						"bms-esign/app/Models/Property.php"
					],
					[
						"emailsignot",
						"bms-esign/app/Listeners/Events/EmailSignatureNotice.php"
					],
					[
						"eveserpr",
						"bms-esign/app/Providers/EventServiceProvider.php"
					],
					[
						"eventserverpro",
						"vendor/laravel/framework/src/Illuminate/Foundation/Support/Providers/EventServiceProvider.php"
					],
					[
						"mas",
						"resources/views/email/master.blade.php"
					],
					[
						"configdatab",
						"config/database.php"
					],
					[
						"illumifoundatapplication",
						"vendor/laravel/framework/src/Illuminate/Foundation/Application.php"
					],
					[
						"sign",
						"resources/views/email/sign.blade.php"
					],
					[
						"emailsign",
						"app/Listeners/Events/EmailSignatureNotice.php"
					],
					[
						"mailtest",
						"tests/bluemoon/esignature/services/MailServiceTest.php"
					],
					[
						"mailservi",
						"app/Services/MailService.php"
					],
					[
						"master",
						"resources/views/email/master.blade.php"
					],
					[
						"mailsertest",
						"tests/bluemoon/esignature/services/MailServiceTest.php"
					],
					[
						"owner",
						"resources/views/email/ownerComplete.blade.php"
					],
					[
						"execu",
						"resources/views/email/executed.blade.php"
					],
					[
						"mails",
						"app/Services/MailService.php"
					],
					[
						"mailsertes",
						"tests/bluemoon/esignature/services/MailServiceTest.php"
					],
					[
						"emasignblad",
						"resources/views/email/signature.blade.php"
					],
					[
						"even",
						"app/Providers/EventServiceProvider.php"
					],
					[
						"readto",
						"resources/views/email/readyToExecute.blade.php"
					],
					[
						"observer",
						"app/Providers/ObserverServiceProvider.php"
					],
					[
						"workflo",
						"app/Http/Controllers/WorkflowController.php"
					],
					[
						"eventserporvi",
						"app/Providers/EventServiceProvider.php"
					],
					[
						"d",
						"config/database.php"
					],
					[
						"debugexceptiohand",
						"vendor/symfony/debug/Symfony/Component/Debug/ExceptionHandler.php"
					],
					[
						"handler",
						"app/Exceptions/Handler.php"
					],
					[
						"response",
						"app/Providers/ResponseMacroServiceProvider.php"
					],
					[
						"composer",
						"composer.json"
					],
					[
						"config/app",
						"config/app.php"
					],
					[
						"servieprove",
						"app/Providers/AppServiceProvider.php"
					],
					[
						"emailsino",
						"app/Listeners/Events/EmailSignatureNotice.php"
					],
					[
						"dbes",
						"app/Libraries/Repositories/DbESignerRepository.php"
					],
					[
						"configdatabase",
						"config/database.php"
					],
					[
						"symfony/component/debug/exception/fatalerrorexception",
						"vendor/symfony/debug/Symfony/Component/Debug/Exception/FatalErrorException.php"
					],
					[
						"workf",
						"app/Http/Controllers/WorkflowController.php"
					],
					[
						"createdo",
						"bms-esign/app/Commands/CreateDocumentImages.php"
					],
					[
						"emailsi",
						"bms-esign-compare/app/Listeners/Events/EmailSignatureNotice.php"
					],
					[
						"emailsignno",
						"bms-esign/app/Listeners/Events/EmailSignatureNotice.php"
					],
					[
						"eventserv",
						"bms-esign-compare/app/Providers/EventServiceProvider.php"
					],
					[
						"configdatabas",
						"config/database.php"
					],
					[
						"disclosure.blad.php",
						"resources/views/disclosure.blade.php"
					],
					[
						"apphttkern",
						"app/Http/Kernel.php"
					],
					[
						"kernel",
						"app/Console/Kernel.php"
					],
					[
						"complete.js",
						"public/js/app/complete.js"
					],
					[
						"route",
						"app/Http/routes.php"
					],
					[
						"eventcr",
						"app/Http/Controllers/EventController.php"
					],
					[
						"esignservice",
						"app/Services/ESignatureService.php"
					]
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 500.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 380.0
			},
			"select_symbol":
			{
				"height": 392.0,
				"last_filter": "sendun",
				"selected_items":
				[
					[
						"sendun",
						"sendUnsentSignatureRequestsByAccount"
					],
					[
						"testesignatuser",
						"testESignatureServiceCreation"
					],
					[
						"isowner",
						"isOwner"
					],
					[
						"emailinit",
						"EmailInitialNotice"
					],
					[
						"testgetsignerstoem",
						"testGetSignersToEmail"
					],
					[
						"testsethistory",
						"testSetHistory"
					],
					[
						"testgetdocument",
						"testGetDocument"
					],
					[
						"testisexe",
						"testIsExecutableDocument"
					],
					[
						"tested",
						"testEDocumentCreation"
					],
					[
						"checkready",
						"CheckReadyToExecute"
					],
					[
						"documentwassi",
						"DocumentWasSigned"
					],
					[
						"report",
						"report"
					],
					[
						"savesin",
						"saveSignatureInitials"
					],
					[
						"getNextSigner",
						"testGetNextSigner"
					],
					[
						"ajax",
						"ajax"
					],
					[
						"savesi",
						"saveSignatureInitials"
					],
					[
						"savesignat",
						"saveSignatureInitials"
					],
					[
						"getdocu",
						"getDocument"
					],
					[
						"getdo",
						"getDocument"
					],
					[
						"testgetnex",
						"testGetNextSigner"
					],
					[
						"testgetnextsigner",
						"testGetNextSigner"
					],
					[
						"testsaveedoc",
						"testSaveEdocument"
					],
					[
						"testBuildformlayou",
						"testBuildFormLayoutForResident"
					],
					[
						"testsaveesign",
						"testSaveEsigner"
					],
					[
						"testsaveedo",
						"testSaveEdocument"
					],
					[
						"testgetforml",
						"testGetFormLayout"
					],
					[
						"getsignermodel",
						"testGetSignerModelById"
					],
					[
						"isexecuat",
						"testIsExecutableDocument"
					],
					[
						"esignercreat",
						"testESignerCreation"
					],
					[
						"testcustomercre",
						"testCustomerCreation"
					],
					[
						"setFormAtt",
						"setFormAttributes"
					],
					[
						"createTech",
						"createTechnote"
					],
					[
						"tomodel",
						"toModel"
					],
					[
						"getibasemodel",
						"getIbaseModelById"
					],
					[
						"transactions",
						"transactionSave"
					],
					[
						"newtechnote",
						"newTechnote"
					],
					[
						"tobu",
						"toBusinessObjects"
					],
					[
						"canresetpass",
						"CanResetPasswordContract"
					],
					[
						"testsave",
						"testSave"
					],
					[
						"getbypor",
						"getByPortfolio"
					],
					[
						"PerformIn",
						"performInsert"
					],
					[
						"syncmodel",
						"syncModelPks"
					],
					[
						"finishSave",
						"finishSave"
					],
					[
						"create",
						"create"
					],
					[
						"getAttr",
						"getAttributes"
					],
					[
						"setAttributes",
						"setAttributes"
					],
					[
						"newBaseQuery",
						"newBaseQueryBuilder"
					],
					[
						"performinsert",
						"performInsert"
					],
					[
						"increment",
						"incrementGeneratorId"
					],
					[
						"insertgetid",
						"insertGetId"
					],
					[
						"insertand",
						"insertAndSetId"
					],
					[
						"insertGetId",
						"insertGetId"
					],
					[
						"statement",
						"statement"
					],
					[
						"compileinsert",
						"compileInsert"
					],
					[
						"compileinsertgetid",
						"compileInsertGetId"
					],
					[
						"insertandsetid",
						"insertAndSetId"
					],
					[
						"createPortfolio",
						"createPortfolio"
					],
					[
						"getPermissions",
						"getPermissions"
					],
					[
						"getModelType",
						"getModelType"
					],
					[
						"getdatabydate",
						"getDataByDateRange"
					],
					[
						"getDataBy",
						"getDataByDateRange"
					],
					[
						"generateclick",
						"generateClickOrderReport"
					],
					[
						"testgetibase",
						"testGetIbaseById"
					],
					[
						"testUnitgetby",
						"testUnitGetById"
					],
					[
						"testGenerateClic",
						"testGenerateClickOrderReport"
					],
					[
						"testSearch",
						"testSearch"
					],
					[
						"search",
						"search"
					],
					[
						"testgetibasebyID",
						"testGetIbaseById"
					],
					[
						"testsearcoun",
						"testSearchCount"
					],
					[
						"translatesearcht",
						"translateSearchTags"
					],
					[
						"testgetibasebyid",
						"testGetIbaseById"
					],
					[
						"getibasebyid",
						"getIbaseById"
					],
					[
						"getById",
						"getById"
					],
					[
						"dbaccountrepotes",
						"DbAccountRepositoryTests"
					],
					[
						"testgetbymonth",
						"testGetByMonth"
					],
					[
						"dbunitrepos",
						"testDbUnitSurveyRepositoryCreation"
					],
					[
						"dbprop",
						"DbPropertyRepositoryTests"
					],
					[
						"getibase",
						"getIbaseById"
					],
					[
						"testgetassi",
						"testGetAssociations"
					],
					[
						"testgetass",
						"testGetAssociations"
					],
					[
						"configurehand",
						"configureHandlers"
					],
					[
						"welcom",
						"WelcomeController"
					],
					[
						"billingcon",
						"BillingController"
					],
					[
						"getaccount",
						"getAccount"
					],
					[
						"testPor",
						"testPortfolioCreation"
					],
					[
						"testGetProperty",
						"testGetProperty"
					],
					[
						"PortfolioServiceTest",
						"PortfolioServiceTest"
					],
					[
						"saveProperty",
						"saveProperty"
					],
					[
						"getmodelbyid",
						"getModelById"
					],
					[
						"ibaseaffiliate",
						"IbaseAffiliate"
					],
					[
						"Iaccount",
						"IAccountRepository"
					],
					[
						"IAccount",
						"IAccountRepository"
					],
					[
						"testaccoutnmem",
						"testAccountMember"
					],
					[
						"newBas",
						"newBaseQueryBuilder"
					],
					[
						"saves",
						"saveSignatureInitials"
					],
					[
						"save",
						"SaveOwnerSignature"
					],
					[
						"savesig",
						"saveSignatureInitials"
					],
					[
						"savesiini",
						"saveSignatureInitials"
					],
					[
						"createdocumentimages",
						"CreateDocumentImages"
					],
					[
						"gettenant",
						"getLeaseTenants"
					],
					[
						"emailexe",
						"EmailExecutedNotice"
					],
					[
						"testgetemail",
						"testGetEmailDictionaryResident"
					],
					[
						"mailsertest",
						"MailServiceTest"
					],
					[
						"testGetEmail",
						"testGetEmailDictionaryResident"
					],
					[
						"sendex",
						"sendExecutedEmail"
					],
					[
						"docwasex",
						"DocumentWasExecuted"
					],
					[
						"docuwase",
						"DocumentWasExecuted"
					],
					[
						"doecwasex",
						"DocumentWasExecuted"
					],
					[
						"configurel",
						"ConfigureLogging"
					],
					[
						"saveowne",
						"SaveOwnerSignature"
					],
					[
						"saveo",
						"SaveOwnerSignature"
					],
					[
						"emailsig",
						"EmailSignatureNotice"
					],
					[
						"sendsig",
						"sendSignatureEmail"
					],
					[
						"documentwasSi",
						"DocumentWasSigned"
					],
					[
						"useDailyFiles",
						"useDailyFiles"
					],
					[
						"sendSign",
						"sendSignatureEmail"
					],
					[
						"edocumentob",
						"EDocumentObserver"
					],
					[
						"testgetsignermod",
						"testGetSignerModelByObject"
					],
					[
						"getDocument",
						"getDocument"
					],
					[
						"isexecu",
						"isExecutable"
					],
					[
						"getemail",
						"getEmailDictionary"
					],
					[
						"createDocumentMock",
						"createDocumentMock"
					],
					[
						"testgetsigtoemai",
						"testGetSignersToEmail"
					],
					[
						"createdocmomock",
						"createDocumentModelMock"
					],
					[
						"getemaild",
						"getEmailDictionary"
					],
					[
						"getemdicre",
						"testGetEmailDictionaryResident"
					],
					[
						"testGetEamil",
						"testGetEmailDictionaryResident"
					],
					[
						"getEmail",
						"getEmailDictionary"
					]
				],
				"width": 1265.0
			},
			"selected_group": 0,
			"settings":
			{
				"_vintageous_last_buffer_search": "function save",
				"_vintageous_last_buffer_search_command": "vi_slash",
				"_vintageous_last_char_search_command": "vi_f",
				"_vintageous_last_character_search": "/",
				"_vintageous_reset_during_init": true,
				"last_automatic_layout":
				[
					[
						0,
						0,
						1,
						1
					]
				],
				"vintage":
				{
					"_cmdline_cd": "/home/jadavis/repos/bms-esign/app/Http/Controllers"
				}
			},
			"show_minimap": false,
			"show_open_files": false,
			"show_tabs": false,
			"side_bar_visible": true,
			"side_bar_width": 328.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 330,
			"workspace_name": "/home/jadavis/repos/esign.sublime-workspace"
		},
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"assi",
						"assignAsset"
					],
					[
						"assignAsset",
						"assignAssetToUser"
					],
					[
						"assio",
						"assio\tassertInstanceOf"
					],
					[
						"testU",
						"testUserPassword"
					],
					[
						"o",
						"organization"
					],
					[
						"or",
						"organization_id"
					],
					[
						"pack",
						"packageDefaults\t(dms.php)"
					],
					[
						"getRo",
						"getRolePrefix\t(DocumentService.php)"
					],
					[
						"P",
						"Package"
					],
					[
						"org",
						"organization"
					],
					[
						"Un",
						"UnitTestPackageDescription"
					],
					[
						"orga",
						"organizationRepository"
					],
					[
						"get",
						"getMaxOrgUser\t(DocumentServiceUnitTest.php)"
					],
					[
						"fold",
						"folderRepository"
					],
					[
						"uni",
						"UnitTestVersionName"
					],
					[
						"Ass",
						"AssetableRepositoryEloquent\t(AssetableRepositoryEloquent.php)"
					],
					[
						"asset",
						"assetableObject"
					],
					[
						"Ex",
						"Exception"
					],
					[
						"user",
						"userAttrs"
					],
					[
						"document",
						"documentService"
					],
					[
						"A",
						"Asset\t(DocumentsSeeder.php)"
					],
					[
						"fol",
						"folderRepository"
					],
					[
						"Datab",
						"DatabaseTransactions"
					],
					[
						"isA",
						"is_array"
					],
					[
						"User",
						"UserRepositoryEloquent"
					],
					[
						"cre",
						"createRepository"
					],
					[
						"re",
						"repository"
					],
					[
						"repo",
						"repositories"
					],
					[
						"Doc",
						"DocumentRepository\t(RepositoryServiceProvider.php)"
					],
					[
						"Rep",
						"RepositoryServiceProvider\t(RepositoryServiceProvider.php)"
					],
					[
						"Re",
						"Repository\t(Document.php)"
					],
					[
						"Elo",
						"EloquentFactory"
					],
					[
						"Lea",
						"LeaseFormsProvider\t(LeaseFormsProvider.php)"
					],
					[
						"Lease",
						"LeaseForms\t(LeaseFormsProvider.php)"
					],
					[
						"Dms",
						"DmsServiceProvider\t(DmsServiceProvider.php)"
					],
					[
						"Do",
						"DocumentWasSigned"
					],
					[
						"OWN",
						"OWNER_ESIGN_USE_ID"
					],
					[
						"eS",
						"eSignService"
					],
					[
						"proper",
						"propertyName"
					],
					[
						"DATE",
						"DATEINITIATED"
					],
					[
						"ES",
						"ESignatureService"
					],
					[
						"ESi",
						"ESignatureService\t(WorkflowController.php)"
					],
					[
						"first",
						"firstSigner"
					],
					[
						"legacy",
						"legacyAppNodeUrl\t(bluemoon.php)"
					],
					[
						"sendSig",
						"sendSignatureRequests\t(MailService.php)"
					],
					[
						"Create",
						"CreateDocumentImages\t(CreateDocumentImages.php)"
					],
					[
						"R",
						"Report"
					],
					[
						"Offic",
						"OfficeService"
					],
					[
						"Offi",
						"OfficeSuite"
					],
					[
						"Techno",
						"TechnoteSource\t(AppServiceProvider.php)"
					],
					[
						"orig",
						"origAttributes"
					],
					[
						"num",
						"numberOfUnits"
					],
					[
						"prop",
						"property_exists"
					],
					[
						"syncProperty",
						"syncPropertyNumberOfUnits\t(PortfolioService.php)"
					],
					[
						"sy",
						"syncArray"
					],
					[
						"number",
						"numberOfUnits\t(DbPropertyRepository.php)"
					],
					[
						"privi",
						"privilegeLabels"
					],
					[
						"array_",
						"array_key_exists\t(CustomUserProvider.php)"
					],
					[
						"por",
						"portfolioDataForAssociation"
					],
					[
						"comp",
						"comparePropertyAttributes"
					],
					[
						"portfo",
						"portfolioService"
					],
					[
						"sync",
						"syncPropertyAttributes\t(DbPropertyRepository.php)"
					],
					[
						"getA",
						"getAttributeMap"
					],
					[
						"getUsers",
						"getUsersByAccount\t(UserSettingsController.php)"
					],
					[
						"Por",
						"PortfolioService"
					],
					[
						"formsOn",
						"formsOnlineUserRepos"
					],
					[
						"add",
						"addTechnoteAttachment\t(OfficeService.php)"
					],
					[
						"technote",
						"technoteRepos"
					],
					[
						"modelTyp",
						"modelTypeAttribute"
					],
					[
						"getMod",
						"getModelByRealId"
					],
					[
						"technoteAtta",
						"TechnoteAttachment"
					],
					[
						"Bu",
						"BusinessObject"
					],
					[
						"tech",
						"technoteCategory\t(DbTechnoteRepository.php)"
					],
					[
						"getAtt",
						"getAttributes\t(PropertyService.php)"
					],
					[
						"techno",
						"technoteSource"
					],
					[
						"cat",
						"categoryId"
					],
					[
						"getCate",
						"getCategoryByLabel"
					],
					[
						"to",
						"toBusinessObject"
					],
					[
						"getCat",
						"getCategoryModelByLabel"
					],
					[
						"note",
						"noteCategory"
					],
					[
						"Commu",
						"CommunicationsController"
					],
					[
						"place",
						"placeholder\tAttr"
					],
					[
						"getTe",
						"getTechnotesBySerialNumber\t(OfficeService.php)"
					],
					[
						"toB",
						"toBusinessObject($this"
					],
					[
						"array_key",
						"array_key_exists"
					],
					[
						"buiness",
						"businessObject"
					],
					[
						"bui",
						"businessObject"
					],
					[
						"business",
						"businessObject"
					],
					[
						"ibaseTech",
						"ibaseTechnoteClass"
					],
					[
						"clien",
						"clientTypeEmailId"
					],
					[
						"clientT",
						"clientTypeEmailId"
					],
					[
						"arra",
						"array_key_exists\t(DbAccountRepository.php)"
					],
					[
						"getModel",
						"getModelBySerialNumber"
					],
					[
						"getI",
						"getIbaseModelBySerialNumber($serialNumber"
					],
					[
						"fun",
						"fun\tfunction …"
					],
					[
						"client",
						"clientTypeId"
					],
					[
						"is",
						"is_array\t(DbPermissionRepositoryTest.php)"
					],
					[
						"Bluemoon",
						"Bluemoon\\User\\Models\\Token\t(TokenType.php)"
					],
					[
						"userMdoel",
						"userModelbyToken"
					],
					[
						"assne",
						"assertGreaterThan\t(DbAccountRepositoryTest.php)"
					],
					[
						"asser",
						"assertInstanceOf"
					],
					[
						"Con",
						"Controller\t(BaseUserController.php)"
					],
					[
						"Base",
						"BaseUserController\t(BaseUserController.php)"
					],
					[
						"access",
						"accessTokenOrModule"
					],
					[
						"fina",
						"finalAttributes2"
					],
					[
						"final",
						"finalAttributes1"
					],
					[
						"port",
						"portfolioService"
					],
					[
						"property",
						"property_exists"
					],
					[
						"mapped",
						"mappedAttribute"
					],
					[
						"ass",
						"assem\tassertEmpty"
					],
					[
						"ASS",
						"ASSOCIATION\t(Account.php)"
					],
					[
						"modeTyp",
						"modelTypeAttribute"
					],
					[
						"str",
						"strtolower"
					],
					[
						"bu",
						"businessObject"
					],
					[
						"prim",
						"primaryKey\t(Model.php)"
					],
					[
						"imo",
						"imodelArray"
					],
					[
						"ibaseMo",
						"ibaseModelCollection"
					],
					[
						"new",
						"newPortfolio"
					],
					[
						"getAttr",
						"getAttributeMap"
					],
					[
						"increment",
						"incrementGeneratorId($generator"
					],
					[
						"incre",
						"incrementGeneratorId"
					],
					[
						"permi",
						"permissionRespos"
					],
					[
						"getPerm",
						"getPermissions"
					],
					[
						"ae",
						"assertEquals"
					],
					[
						"du",
						"dummyPermission"
					],
					[
						"Perm",
						"PermissionObserver"
					],
					[
						"Bas",
						"BaseObserver"
					],
					[
						"Of",
						"OfficeService\t(BaseOfficeSuiteController.php)"
					]
				]
			},
			"buffers":
			[
				{
					"file": "dms/packages/dms-core/tests/Unit/DocumentServiceUnitTest.php",
					"settings":
					{
						"buffer_size": 7701,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "dms/packages/dms-core/tests/TestCase.php",
					"settings":
					{
						"buffer_size": 1813,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"contents": "<?php\n\nuse Bluemoon\\Dms\\Models\\Role;\n\n#use Ultraware\\Roles\\Models\\Role;\n\n/**\n * @var \\Illuminate\\Database\\Eloquent\\Factory $factory\n */\n$factory->define(Role::class, function (Faker\\Generator $faker) {\n    $jobTitle = $faker->unique()->jobTitle;\n\n    return [\n        'name' => $jobTitle,\n        'slug' => str_slug($jobTitle, config('roles.separator')),\n        'description' => $faker->optional()->sentence(),\n        'level' => $faker->randomDigitNotNull\n    ];\n});\n",
					"file": "dms/packages/dms-core/database/factories/RoleFactory.php",
					"file_size": 469,
					"file_write_time": 131460290916828450,
					"settings":
					{
						"buffer_size": 469,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "<?php\n\nnamespace Bluemoon\\Dms\\Services;\n\n// Models/repos for typehint only\nuse Bluemoon\\Dms\\Contracts\\Repositories\\DocumentRepository;\nuse Bluemoon\\Dms\\Contracts\\Repositories\\FolderRepository;\nuse Bluemoon\\Dms\\Contracts\\Repositories\\OrganizationRepository;\nuse Bluemoon\\Dms\\Contracts\\Repositories\\RoleRepository;\nuse Bluemoon\\Dms\\Contracts\\Repositories\\UserRepository;\nuse Bluemoon\\Dms\\Contracts\\Repositories\\VersionRepository;\nuse Bluemoon\\Dms\\Models\\Asset;\nuse Bluemoon\\Dms\\Models\\Document;\nuse Bluemoon\\Dms\\Models\\Folder;\nuse Bluemoon\\Dms\\Models\\Organization;\nuse Bluemoon\\Dms\\Models\\Package;\nuse Bluemoon\\Dms\\Models\\Role;\nuse Bluemoon\\Dms\\Models\\User;\n\nclass DocumentService\n{\n    private $documentRepository;\n    private $folderRepository;\n    private $versionRepository;\n    private $organizationRepository;\n    private $userRepository;\n    private $roleRepository;\n\n    public function __construct(\n        DocumentRepository $documentRepository,\n        FolderRepository $folderRepository,\n        VersionRepository $versionRepository,\n        OrganizationRepository $organizationRepository,\n        UserRepository $userRepository,\n        RoleRepository $roleRepository\n    ) {\n        $this->documentRepository = $documentRepository;\n        $this->folderRepository = $folderRepository;\n        $this->versionRepository = $versionRepository;\n        $this->organizationRepository = $organizationRepository;\n        $this->userRepository = $userRepository;\n        $this->roleRepository = $roleRepository;\n    }\n\n    public function assignAsset(Asset $asset, $target)\n    {\n        return $target->assets()->save($asset);\n        /*\n        switch (get_class($target)) {\n            case User::class:\n                return $this->assignAssetToUser($asset, $target);\n                break;\n            case Role::class:\n                return $this->assignAssetToRole($asset, $target);\n                break;\n        }\n        */\n    }\n\n    public function assignAssetToRole(Asset $asset, Role $role)\n    {\n        return $role->assets()->save($asset);\n    }\n\n    public function assignAssetToUser(Asset $asset, User $user)\n    {\n        return $user->assets()->save($asset);\n    }\n\n    public function createDocument(\n        User $user,\n        Folder $folder = null,\n        String $description = null,\n        Document $parent = null,\n        String $versionName= null\n    ) {\n        # check user perms on folder?\n         \n        $parentId = $parent ? $parent->id : null;\n        $folderId = $folder ? $folder->id : null;\n        $documentAttrs = array (\n            'description' => $description,\n            'parent_id' => $parentId,\n            'folder_id' => $folderId\n        );\n\n        $newDocument = $this->documentRepository->create($documentAttrs);\n        # Package/org set default for initial version name?\n        $versionName = $versionName ? : $description ? : 'Initial Version';\n        $this->createVersion($newDocument, $user, $versionName);\n        $this->assignAsset($newDocument->asset, $user);\n\n        return $newDocument;\n    }\n\n    public function createFolder(User $user, $name, Folder $parent = null)\n    {\n        # check user perm on $parent?\n        $folderAttrs = array (\n            'organization_id' => $user->organization_id,\n            'name' => $name,\n        );\n        $newFolder = $this->folderRepository->create($folderAttrs);\n\n        if (isset($parent)) {\n            $parent->appendNode($newFolder);\n        }\n\n        $this->assignAsset($newFolder->asset, $user);\n\n        return $newFolder;\n    }\n\n    public function createOrganization(\n        Package $package,\n        String $name,\n        String $description,\n        String $email = null,\n        String $password = null,\n        String $userName = null\n    ) {\n        $organizationAttrs = array(\n            'package_id' => $package->id,\n            'name' => $name,\n            'description' => $description,\n        );\n        $organization = $this->organizationRepository->create($organizationAttrs);\n        /*\n        $rolePrefix = $this->getRolePrefix($package);\n        $roleName = $rolePrefix . config('roles.separator') . config('dms.packageDefaults.masterRole');\n        $masterRole = $this->roleRepository->findByField('name', $roleName);\n        */\n        if ($email && $password) {\n            $masterUser = $this->createUser($organization, $email, $password, $userName);\n        }\n        return $organization;\n    }\n\n    public function createUser(Organization $organization, String $email, String $password, String $name = null)\n    {\n        $name = $name ? : $organization->name . \" \" . config('dms.packageDefaults.masterUser');\n        $userAttrs = array (\n            'organization_id' => $organization->id,\n            'name' => $name,\n            'email' => $email,\n            'password' => $password,\n        );\n        $user = $this->userRepository->create($userAttrs);\n        return $user;\n    }\n\n    public function createVersion(Document $document, User $user, $name, $major = null, $minor = null, $subminor = null)\n    {\n        # Probably something package/org driven to determine defaults.  This is placeholder\n        $major = $major ?: 1;\n        $minor = $minor ?: 0;\n        $subminor = $subminor ?: 0;\n\n        $versionAttrs = array (\n            'document_id' => $document->id,\n            'major' => $major,\n            'minor' => $minor,\n            'subminor' => $subminor,\n            'name' => $name,\n            'user_id' => $user->id\n        );\n        $newVersion = $this->versionRepository->create($versionAttrs);\n\n        return $newVersion;\n    }\n\n    public function getFolder(Array $keyVals, $columns = ['*'])\n    {\n        ## For now, this is a find by id.  Not sure how to expand \"gets\" right now.\n        if (sizeof($keyVals) == 1) {\n            $key = key($keyVals);\n            if ($key == Folder::keyName()) {\n                $folder = $this->folderRepository->find($keyVals[$key], $columns);\n            } else {\n                $folder = $this->folderRepository->findBy($key, $keyVals[$key], $columns);\n            }\n            return $folder;\n        }\n        ## if > 1 keyvals, we'll use the where method (future work)\n    }\n\n    public function getRole(Array $keyVals, Array $columns = ['*'])\n    {\n         ## For now, this is a find by id.  Not sure how to expand \"gets\" right now.\n        if (sizeof($keyVals) == 1) {\n            $key = key($keyVals);\n            if ($key == Role::keyName()) {\n                $role = $this->roleRepository->find($keyVals[$key], $columns);\n            } else {\n                $role = $this->roleRepository->findBy($key, $keyVals[$key], $columns);\n            }\n            return $role;\n        }\n        ## if > 1 keyvals, we'll use the where method (future work)\n    }\n\n    public function getMaxUser(Organization $org)\n    {\n        $user = $this->userRepository\n            ->findByField('organization_id', $org->id)\n            ->orderBy()\n    }\n\n    public function getRolePrefix(Package $package)\n    {\n        // Current means of formatting the role prefix:\n        $segments = explode('_', snake_case($package->name));\n        $rolePrefix = join('', $segments);\n        return $rolePrefix;\n    }\n}\n",
					"file": "dms/packages/dms-core/src/Services/DocumentService.php",
					"file_size": 7022,
					"file_write_time": 131463651907524267,
					"settings":
					{
						"buffer_size": 7230,
						"line_ending": "Unix"
					}
				},
				{
					"file": "dms/packages/dms-core/src/Models/Asset.php",
					"settings":
					{
						"buffer_size": 902,
						"line_ending": "Unix"
					}
				},
				{
					"file": "dms/packages/dms-core/src/Repositories/Eloquent/FolderRepositoryEloquent.php",
					"settings":
					{
						"buffer_size": 909,
						"line_ending": "Unix"
					}
				},
				{
					"file": "dms/packages/dms-core/src/Repositories/Eloquent/AssetableRepositoryEloquent.php",
					"settings":
					{
						"buffer_size": 805,
						"line_ending": "Unix"
					}
				},
				{
					"file": "dms/composer.json",
					"settings":
					{
						"buffer_size": 1635,
						"line_ending": "Unix"
					}
				},
				{
					"file": "dms/packages/dms-core/database/seeds/OrganizationsTableSeeder.php",
					"settings":
					{
						"buffer_size": 519,
						"line_ending": "Unix"
					}
				},
				{
					"file": "dms/packages/dms-core/config/dms.php",
					"settings":
					{
						"buffer_size": 1311,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "dms/packages/dms-core/database/seeds/RolesTableSeeder.php",
					"settings":
					{
						"buffer_size": 1139,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "dms/packages/dms-core/database/seeds/DocumentsSeeder.php",
					"settings":
					{
						"buffer_size": 5019,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "dms/packages/dms-core/src/Validators/RolesValidator.php",
					"settings":
					{
						"buffer_size": 313,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "dms/packages/dms-core/src/Http/Controllers/RoleController.php",
					"settings":
					{
						"buffer_size": 4652,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "dms/packages/dms-core/src/Http/Controllers/OrganizationController.php",
					"settings":
					{
						"buffer_size": 4892,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "dms/packages/dms-core/src/Contracts/Repositories/RoleRepository.php",
					"settings":
					{
						"buffer_size": 269,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "dms/packages/dms-core/src/Providers/RepositoryServiceProvider.php",
					"settings":
					{
						"buffer_size": 863,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "<?php\n\nnamespace Bluemoon\\Dms\\Models;\n\nuse Bluemoon\\Dms\\Libraries\\Database\\Eloquent\\Model;\n\nclass Organization extends Model\n{\n    protected $fillable = [\n        'package_id',\n        'name',\n        'description'\n    ];\n\n    public\n\n    protected $table = 'organizations';\n\n    /**\n     * Get the package associated with the organization.\n     */\n    public function package()\n    {\n        return $this->belongsTo(Package::class);\n    }\n\n    /**\n     * Get the users associated with the organization.\n     */\n    public function users()\n    {\n        return $this->hasMany(User::class);\n    }\n\n    /**\n     * Get the folders in the organization.\n     */\n    public function folders()\n    {\n        return $this->hasMany(Folder::class);\n    }\n\n    /**\n     * Get all of the documents for the organization.\n     */\n    public function documents()\n    {\n        return $this->hasManyThrough(Document::class, Folder::class);\n    }\n}\n",
					"file": "dms/packages/dms-core/src/Models/Organization.php",
					"file_size": 920,
					"file_write_time": 131460224901703843,
					"settings":
					{
						"buffer_size": 932,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "Searching 14 files for \"Ultraware\" (case sensitive)\n\n/home/jadavis/repos/dms/packages/dms-core/src/Models/Role.php:\n    3  namespace Bluemoon\\Dms\\Models;\n    4  \n    5: use Ultraware\\Roles\\Models\\Role as BaseRole;\n    6  \n    7  class Role extends BaseRole\n\n/home/jadavis/repos/dms/packages/dms-core/src/Models/User.php:\n    4  \n    5  use App\\User as BaseUser;\n    6: use Ultraware\\Roles\\Contracts\\HasRoleAndPermission as HasRoleAndPermissionContract;\n    7: use Ultraware\\Roles\\Traits\\HasRoleAndPermission;\n    8  \n    9  class User extends BaseUser implements HasRoleAndPermissionContract\n\n3 matches across 2 files\n",
					"settings":
					{
						"buffer_size": 618,
						"line_ending": "Unix",
						"name": "Find Results",
						"scratch": true
					}
				},
				{
					"file": "dms/packages/dms-core/src/Libraries/Database/Eloquent/Model.php",
					"settings":
					{
						"buffer_size": 1077,
						"line_ending": "Unix"
					}
				},
				{
					"file": "dms/packages/dms-core/src/Models/Role.php",
					"settings":
					{
						"buffer_size": 370,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "dms/packages/dms-core/src/Repositories/Eloquent/RoleRepositoryEloquent.php",
					"settings":
					{
						"buffer_size": 928,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "dms/packages/dms-core/src/Presenters/RolePresenter.php",
					"settings":
					{
						"buffer_size": 452,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "dms/packages/dms-core/src/Transformers/RoleTransformer.php",
					"settings":
					{
						"buffer_size": 641,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				}
			],
			"build_system": "Packages/User/builds/psr2.sublime-build",
			"build_system_choices":
			[
				[
					[
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							""
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (All)"
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (This File Only)"
						],
						[
							"Packages/User/builds/psr2.sublime-build",
							""
						]
					],
					[
						"Packages/User/builds/psr2.sublime-build",
						""
					]
				]
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 392.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"pack",
						"Package Control: List Unmanaged Packages"
					],
					[
						"Package Control: ",
						"Package Control: List Packages"
					],
					[
						"Snippet: ",
						"Snippet: COOKIE['…']"
					],
					[
						"Package Control: install",
						"Package Control: Install Package"
					],
					[
						"Snippet: ld",
						"Snippet: LogDebug"
					],
					[
						"Paconrepa",
						"Package Control: Remove Package"
					],
					[
						"inp",
						"Package Control: Install Package"
					],
					[
						"instal",
						"Package Control: Install Package"
					],
					[
						"pa",
						"Package Control: Install Package"
					],
					[
						"paconad",
						"Package Control: Add Repository"
					],
					[
						"sniff",
						"PHP Code Sniffer: Sniff this file"
					],
					[
						"phpunit",
						"PHPUnit: Run"
					],
					[
						"phpun",
						"PHPUnit: Run"
					],
					[
						"tenant",
						"GitGutter: Show Comparing Against"
					],
					[
						"getset",
						"Generate Getter and Setter for ..."
					],
					[
						"togglet",
						"View: Toggle Tabs"
					],
					[
						"get set",
						"PHP: Generate Getters and Setters"
					],
					[
						"toggle tab",
						"View: Toggle Tabs"
					],
					[
						"View:toggl",
						"View: Toggle Tabs"
					],
					[
						"sublimelinter",
						"Preferences: SublimeLinter Key Bindings – Default"
					],
					[
						"packagecon",
						"Package Control: List Packages"
					],
					[
						"in",
						"Package Control: Install Package"
					],
					[
						"inst",
						"Package Control: Install Package"
					],
					[
						"sublim",
						"SublimeLinter: Show All Errors"
					],
					[
						"ins",
						"Package Control: Install Package"
					],
					[
						"generate",
						"Generate Getter and Setter for ..."
					],
					[
						"phprefa",
						"PHPSimpleRefactor: extract current lines to method"
					],
					[
						"pca",
						"Package Control: Install Package"
					],
					[
						"phpcompan",
						"PHPCompanion:Find Use"
					],
					[
						"toggle ta",
						"View: Toggle Tabs"
					],
					[
						"getter",
						"PHP: Generate Getters"
					],
					[
						"Snippet: asse",
						"Snippet: assertEquals"
					],
					[
						"install",
						"Package Control: Install Package"
					],
					[
						"phpcompanion",
						"PHPCompanion:Expand Fully Qualified Class Name"
					],
					[
						"impo",
						"PHPCompanion:Import Namespace"
					],
					[
						"phpcomp",
						"PHPCompanion:Import Namespace"
					],
					[
						"compan",
						"PHPCompanion:Insert Constructor Property"
					],
					[
						"php",
						"PHPCompanion:Insert Constructor Property"
					],
					[
						"phpcom",
						"PHPCompanion:Insert Constructor Property"
					],
					[
						"const",
						"PHPCompanion:Insert Constructor Property"
					],
					[
						"packi",
						"Package Control: Install Package"
					],
					[
						"php com",
						"PHPCompanion:Expand Fully Qualified Class Name"
					],
					[
						"insta",
						"Package Control: Install Package"
					],
					[
						"toggle ",
						"View: Toggle Status Bar"
					],
					[
						"anf",
						"ANF: Rename File"
					],
					[
						"status",
						"View: Toggle Status Bar"
					],
					[
						"package re",
						"PackageResourceViewer: Extract Package"
					],
					[
						"package in",
						"Package Control: Install Package"
					],
					[
						"install ",
						"Colorsublime: Install Theme"
					],
					[
						"pcak",
						"Package Control: Install Package"
					],
					[
						"esign",
						"Snippet: Designate that the column allows NULL values"
					],
					[
						"Snippet: doc",
						"Snippet: Start Docblock"
					],
					[
						"packains",
						"Package Control: Install Package"
					],
					[
						"packin",
						"Package Control: Install Package"
					],
					[
						"syntaxjson",
						"Set Syntax: JSON"
					],
					[
						"Pacin",
						"Package Control: Install Package"
					],
					[
						"Package Control: inst",
						"Package Control: Install Package"
					],
					[
						"Package Control: in",
						"Package Control: Install Package"
					],
					[
						"inden",
						"Indentation: Reindent Lines"
					],
					[
						":w",
						":w - Save"
					]
				],
				"width": 805.0
			},
			"console":
			{
				"height": 375.0,
				"history":
				[
					"+context_name+",
					"clear",
					"Toggle ScopeAlways",
					"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) :Q",
					"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"expanded_folders":
			[
				"/home/jadavis/repos/dms",
				"/home/jadavis/repos/dms/packages",
				"/home/jadavis/repos/dms/packages/dms-core",
				"/home/jadavis/repos/dms/packages/dms-core/src",
				"/home/jadavis/repos/dms/packages/dms-core/src/Contracts",
				"/home/jadavis/repos/dms/packages/dms-core/src/Contracts/Repositories",
				"/home/jadavis/repos/dms/packages/dms-core/src/Http",
				"/home/jadavis/repos/dms/packages/dms-core/src/Http/Controllers",
				"/home/jadavis/repos/dms/packages/dms-core/src/Libraries",
				"/home/jadavis/repos/dms/packages/dms-core/src/Libraries/Database",
				"/home/jadavis/repos/dms/packages/dms-core/src/Libraries/Database/Eloquent",
				"/home/jadavis/repos/dms/packages/dms-core/src/Libraries/Database/Eloquent/Relations",
				"/home/jadavis/repos/dms/packages/dms-core/src/Libraries/Nestedset",
				"/home/jadavis/repos/dms/packages/dms-core/src/Libraries/Uuid",
				"/home/jadavis/repos/dms/packages/dms-core/src/Models",
				"/home/jadavis/repos/dms/packages/dms-core/src/Models/Traits",
				"/home/jadavis/repos/dms/packages/dms-core/src/Presenters",
				"/home/jadavis/repos/dms/packages/dms-core/src/Providers",
				"/home/jadavis/repos/dms/packages/dms-core/src/Repositories",
				"/home/jadavis/repos/dms/packages/dms-core/src/Repositories/Eloquent",
				"/home/jadavis/repos/dms/packages/dms-core/src/Transformers"
			],
			"file_history":
			[
				"/home/jadavis/repos/dms/packages/dms-core/src/Models/Model.php",
				"/home/jadavis/repos/dms/packages/dms-core/src/Models/Version.php",
				"/home/jadavis/repos/dms/packages/dms-core/tests/Unit/DocumentServiceUnitTest.php",
				"/home/jadavis/repos/dms/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Model.php",
				"/home/jadavis/repos/dms/vendor/symfony/var-dumper/Tests/Caster/PdoCasterTest.php",
				"/home/jadavis/repos/dms/packages/dms-core/src/Models/Asset.php",
				"/home/jadavis/repos/dms/packages/dms-core/tests/Feature/ExampleTest.php",
				"/home/jadavis/repos/dms/packages/dms-core/tests/TestCase.php",
				"/home/jadavis/repos/dms/packages/dms-core/src/Services/DocumentService.php",
				"/home/jadavis/repos/dms/packages/dms-core/src/Models/Folder.php",
				"/home/jadavis/repos/dms/packages/dms-core/src/Models/MimeType.php",
				"/home/jadavis/repos/dms/packages/dms-core/src/Models/MorphableType.php",
				"/home/jadavis/repos/dms/packages/dms-core/src/Models/Organization.php",
				"/home/jadavis/repos/dms/packages/dms-core/src/Models/Package.php",
				"/home/jadavis/repos/dms/packages/dms-core/src/Models/Storage.php",
				"/home/jadavis/repos/dms/vendor/symfony/http-foundation/Session/Storage/Handler/PdoSessionHandler.php",
				"/home/jadavis/repos/dms/packages/dms-core/database/factories/FileFactory.php",
				"/home/jadavis/repos/dms/app/Http/Controllers/VersionController.php",
				"/home/jadavis/repos/dms/packages/dms-core/database/factories/VersionFactory.php",
				"/home/jadavis/repos/dms/packages/dms-core/database/factories/OrganizationFactory.php",
				"/home/jadavis/repos/dms/packages/dms-core/database/migrations/2017_06_09_100000_create_test_version_procedure.php",
				"/home/jadavis/repos/dms/bootstrap/app.php",
				"/home/jadavis/repos/dms/app/Providers/EventServiceProvider.php",
				"/home/jadavis/repos/dms/packages/dms-core/src/Providers/DmsServiceProvider.php",
				"/home/jadavis/repos/dms/packages/dms-core/src/Libraries/Uuid/Uuid.php",
				"/home/jadavis/repos/dms/packages/dms-core/database/seeds/DocumentsSeeder.php",
				"/home/jadavis/repos/dms/packages/dms-core/src/Models/Document.php",
				"/home/jadavis/repos/dms/packages/dms-core/src/Models/File.php",
				"/home/jadavis/repos/dms/vendor/bluemoonforms/dms-core/src/Services/DocumentService.php",
				"/home/jadavis/repos/dms/config/repository.php",
				"/home/jadavis/repos/dms/packages/dms-core/src/Presenters/VersionPresenter.php",
				"/home/jadavis/repos/dms/packages/dms-core/src/Transformers/VersionTransformer.php",
				"/home/jadavis/repos/dms/packages/dms-core/src/Validators/VersionValidator.php",
				"/home/jadavis/repos/dms/packages/dms-core/src/Contracts/Repositories/VersionRepository.php",
				"/home/jadavis/repos/dms/packages/dms-core/src/Repositories/Eloquent/VersionRepositoryEloquent.php",
				"/home/jadavis/repos/dms/packages/dms-core/src/Providers/RepositoryServiceProvider.php",
				"/home/jadavis/repos/dms/vendor/swiftmailer/swiftmailer/tests/_samples/charsets/iso-8859-1/one.txt",
				"/home/jadavis/repos/dms/packages/dms-core/tests/Unit/DocumentRepositoryUnitTest.php",
				"/home/jadavis/repos/dms/packages/dms-core/src/Contracts/Repositories/DocumentRepository.php",
				"/home/jadavis/repos/dms/packages/dms-core/src/Repositories/Eloquent/DocumentRepositoryEloquent.php",
				"/home/jadavis/repos/dms/packages/dms-core/src/Contracts/Repositories/FolderRepository.php",
				"/home/jadavis/repos/dms/packages/dms-core/src/Repositories/Eloquent/AssetableRepositoryEloquent.php",
				"/home/jadavis/repos/dms/vendor/laravel/framework/src/Illuminate/Database/Seeder.php",
				"/home/jadavis/repos/dms/vendor/prettus/l5-repository/src/Prettus/Repository/Eloquent/BaseRepository.php",
				"/home/jadavis/repos/dms/composer.json",
				"/home/jadavis/repos/dms/packages/dms-core/src/Repositories/Eloquent/FolderRepositoryEloquent.php",
				"/home/jadavis/repos/dms/packages/dms-core/tests/Unit/FolderRepositoryUnitTest.php",
				"/home/jadavis/repos/dms/packages/dms-core/src/Libraries/Database/Eloquent/Model.php",
				"/home/jadavis/repos/dms/packages/dms-core/src/Http/Controllers/AssetController.php",
				"/home/jadavis/repos/dms/packages/dms-core/database/factories/FolderFactory.php",
				"/home/jadavis/repos/dms/packages/dms-core/database/factories/UserFactory.php",
				"/home/jadavis/repos/dms/tests/Feature/ExampleTest.php",
				"/home/jadavis/repos/dms/phpunit.xml",
				"/home/jadavis/repos/dms/packages/dms-core/composer.json",
				"/home/jadavis/repos/dms/packages/dms-core/tests/Unit/UserRepositoryUnitTest.php",
				"/home/jadavis/repos/dms/packages/dms-core/database/seeds/DatabaseSeeder.php",
				"/home/jadavis/repos/dms/vendor/kalnoy/nestedset/src/NodeTrait.php",
				"/home/jadavis/repos/dms/packages/dms-core/config/dms.php",
				"/home/jadavis/repos/dms/vendor/prettus/l5-repository/src/Prettus/Repository/Contracts/RepositoryInterface.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/database/seeds/DocumentsSeeder.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/tests/Unit/FolderRepositoryUnitTest.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/Http/Controllers/FolderController.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/Http/Controllers/UserController.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/composer.json",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/tests/DocumentTest.php",
				"/home/jadavis/repos/dms/tests/TestCase.php",
				"/home/jadavis/repos/dms/vendor/ultraware/roles/src/Models/Permission.php",
				"/home/jadavis/repos/dms/vendor/ultraware/roles/src/Contracts/PermissionHasRelations.php",
				"/home/jadavis/repos/dms/vendor/ultraware/roles/src/Traits/HasRoleAndPermission.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/leaseforms/composer.json",
				"/home/jadavis/repos/dms/tests/bluemoon/dms/TestCase.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/tests/Unit/DocumentServiceUnitTest.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/tests/Unit/UserRepositoryUnitTest.php",
				"/home/jadavis/repos/dms/config/dms.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/config/dms.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/Providers/DmsServiceProvider.php",
				"/home/jadavis/repos/dms/tests/bluemoon/dms/Unit/DocumentServiceUnitTest.php",
				"/home/jadavis/repos/dms/packages/dms/config/dms.php",
				"/home/jadavis/repos/dms/packages/dms/src/Providers/DmsServiceProvider.php",
				"/home/jadavis/repos/dms/packages/dms/src/Providers/RepositoryServiceProvider.php",
				"/home/jadavis/repos/dms/packages/dms/tests/Unit/UserRepositoryUnitTest.php",
				"/home/jadavis/repos/dms/packages/dms/src/Contracts/Repositories/UserRepository.php",
				"/home/jadavis/repos/dms/packages/dms/src/Repositories/Eloquent/UserRepositoryEloquent.php",
				"/home/jadavis/repos/dms/tests/bluemoon/dms/Unit/ExampleTest.php",
				"/home/jadavis/repos/dms/tests/bluemoon/dms/Feature/ExampleTest.php",
				"/home/jadavis/repos/dms/packages/dms/src/Http/Controllers/UsersController.php",
				"/home/jadavis/repos/dms/.phpstorm.meta.php",
				"/home/jadavis/repos/dms/config/roles.php",
				"/home/jadavis/repos/dms/vendor/phpunit/php-code-coverage/tests/_files/Report/XML/CoverageForBankAccount/BankAccount.php.xml",
				"/home/jadavis/repos/dms/packages/dms/composer.json",
				"/home/jadavis/repos/dms/vendor/laravel/framework/src/Illuminate/Foundation/Application.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/database/seeds/FoldersTableSeeder.php",
				"/home/jadavis/repos/dms/database/migrations/2017_07_19_162743_create_documents_table.php",
				"/home/jadavis/repos/dms/database/migrations/2017_07_19_162757_create_documents_table.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/Providers/RepositoryServiceProvider.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/Services/DocumentService.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/Contracts/Repositories/DocumentRepository.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/Http/Controllers/AssetController.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/Http/Controllers/DocumentController.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/Repositories/Eloquent/DocumentRepositoryEloquent.php",
				"/home/jadavis/repos/dms/config/app.php",
				"/home/jadavis/repos/dms/app/Http/Requests/DocumentCreateRequest.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/Config/namespaces.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/Config/paths.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/Transformers/FolderTransformer.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/Models/Folder.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/Presenters/FolderPresenter.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/Transformers/UserTransformer.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/Presenters/UserPresenter.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/Http/Controllers/DocumentsController.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/Repositories/Eloquent/UserRepositoryEloquent.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/Transformers/DocumentTransformer.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/Presenters/DocumentPresenter.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/Services/UserService.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/Models/Document.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/tests/Feature/ExampleTest.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/Models/Role.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/Models/User.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/database/seeds/UsersTableSeeder.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/tests/TestCase.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/tests/Unit/DocumentRepositoryUnitTest.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/Models/Traits/OrderedUuidKey.php",
				"/home/jadavis/repos/dms/config/dms/namespaces.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/Config/dms/paths.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/Validators/DocumentValidator.php",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/Config/dms.php",
				"/home/jadavis/repos/dms/tests/bluemoon/.gitignore",
				"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/Repositories/Document.php"
			],
			"find":
			{
				"height": 39.0
			},
			"find_in_files":
			{
				"height": 158.0,
				"where_history":
				[
					"/home/jadavis/repos/dms/packages/dms-core/src/Models",
					"/home/jadavis/repos/dms/packages/dms-core",
					"/home/jadavis/repos/dms/packages/dms-core/database",
					"/home/jadavis/repos/dms/packages/dms-core/database/migrations",
					"/home/jadavis/repos/dms/packages/dms-core",
					"/home/jadavis/repos/dms/packages",
					"/home/jadavis/repos/dms/packages/dms-core",
					"/home/jadavis/repos/dms/packages/bluemoonforms/dms",
					"/home/jadavis/repos/dms/packages",
					"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src",
					"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/database",
					"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/database/seeds",
					"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/database/migrations",
					"/home/jadavis/repos/dms/packages/bluemoonforms/dms",
					"/home/jadavis/repos/dms/database/seeds",
					"/home/jadavis/repos/dms/database/factories",
					"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/Models",
					"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/database/seeds",
					"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/database/migrations",
					"/home/jadavis/repos/dms/database/migrations",
					"/home/jadavis/repos/dms/database/seeds",
					"/home/jadavis/repos/dms/packages/bluemoonforms/dms/src/database/factories",
					"/home/jadavis/repos/dms/database/migrations",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/resources/views/email",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/resources/views/email",
					"/home/jadavis/repos/bms-esign/resources/views",
					"/home/jadavis/repos/bms-esign/vendor",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/app",
					"/home/jadavis/repos/bms-esign/app/Services",
					"/home/jadavis/repos/bms-esign/app",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/config",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign,-*.log",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign-compare",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign-compare",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/app/Http/Controllers",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/resources",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/app",
					"/home/jadavis/repos/bms-esign,-*.log",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite,-*.css",
					"/home/jadavis/repos/bms2-sandlot/packages,-*.css",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot,-*.log",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot,-*.json",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite",
					"/home/jadavis/repos/bms2-sandlot,-*.json",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/app/Services",
					"/home/jadavis/repos/bms2-sandlot/app/Repositories",
					"/home/jadavis/repos/bms2-sandlot/packages/leaseprogram",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot/app/Providers",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite/src/Http/Controllers",
					"/home/jadavis/repos/bms2-sandlot/packages/myibase",
					"/home/jadavis/repos/bms2-sandlot/packages/mydbdriver",
					"/home/jadavis/repos/bms2-sandlot,-*.json",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon",
					"/home/jadavis/repos/bms2-sandlot/packages,-*.js",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite",
					"/home/jadavis/repos/bms2-sandlot/config",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/vendor",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/app/Services",
					"/home/jadavis/repos/bms2-sandlot/app/Repositories",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon,-*.js",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot-compare/packages",
					"/home/jadavis/repos/bms2-sandlot-compare/app",
					"/home/jadavis/repos/bms2-sandlot/packages/myibase",
					"/home/jadavis/repos/bms2-sandlot/packages/mydbdriver",
					"/home/jadavis/repos/bms2-sandlot/packages,-*.js",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/,-*.js",
					"/home/jadavis/repos/bms2-sandlot/-*.js",
					"/home/jadavis/repos/bms2-sandlot/packages,-*.js",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot/packages/myibase",
					"/home/jadavis/repos/bms2-sandlot/",
					"/home/jadavis/repos/bms2-sandlot/packages/mydbdriver",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot/vendor/laravel/framework/src/Illuminate/Database",
					"/home/jadavis/repos/bms2-sandlot/packages,-*.js",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot/packages/mydbdriver",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot/packages/myibase",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite/resources"
				]
			},
			"find_state":
			{
				"case_sensitive": true,
				"find_history":
				[
					"Ultraware",
					"userCreated",
					"Roles",
					"roles",
					"Roles",
					"roles",
					"role",
					"Roles",
					"use Bluemoon\\Dms\\Libraries\\Database\\Eloquent\\Model;",
					"use Bluemoon\\Dms\\Libraries\\Database\\Eloquent\\Model;\\n",
					"use Bluemoon\\Dms\\Libraries\\Database\\Eloquent\\Model;",
					"test_version",
					"does not",
					"DmsModel",
					"DmsCont",
					"dmscontr",
					"Log",
					"\\Bluemoon\\Dms\\Models\\",
					"\\Bluemoon\\Dms\\Models\\Folder",
					", $states",
					"= null",
					"DatabaseSeeder",
					" $",
					"Dms\\Repositories\\DocumentRepository",
					"Repositories\\DocumentRepository",
					"DocumentRepository",
					"UserRepository",
					"User",
					"user",
					"User",
					"Foundation",
					"document",
					"Document",
					"packageRoot",
					"BluemoonDms",
					"Bluemoon\\\\Dms\\w+",
					"Bluemoon\\\\Dms(\\w+)",
					"class",
					"Bluemoon\\\\Dms\\(\\w+\\)",
					"Bluemoon\\\\Dms\\w+",
					"Bluemoon\\Dms\\w+",
					"App\\",
					"Bluemoon\\User",
					"Bluemoon\\Models",
					"<\\?php .*",
					"<\\?php",
					"<?php",
					"<\\?php .*",
					"<?<?",
					"<?php.*",
					"<\\?php .*",
					"<?php .*",
					"Bluemoon\\Libraries",
					"App\\",
					"App\\Models",
					"App\\Libraries",
					"App\\Models",
					"<?php",
					"<?php namespace Bluemoon\\Dms\\Seeders",
					";\n",
					"<?php",
					"App\\Models",
					"ordered_uuid",
					"],",
					"DocumentWasExecuted",
					"DocumentWasSigned",
					"sendSignatureRequests",
					"GAA",
					"generateDocument",
					"generateDocume nt",
					"class=\"btn\"",
					"signature",
					"sendExecutedEmail",
					"Congratulations.  The {{ $productDocuments }} received final approval and have been executed.  The starting date of your lease @if ($renewal) renewal @endif is {{ $leaseStartDate }}.",
					"sales",
					"execute",
					"Execute",
					"img",
					"src",
					"style",
					"PHP-parser",
					"\\Log::debug(__METHOD__ . \":\"",
					"\\Log",
					"DB_PASSWORD_DEV",
					"DB_USERNAME_DEV",
					"DB_DATABASE_DEV",
					"DB_HOST_DEV",
					"memory_limit",
					"saveSignatureInitials",
					"throw",
					"No PDF Found for",
					"md5",
					"saveSignatureInitials",
					"cacheKeys",
					"mysql_dev_bm2",
					"DocumentImagesWereCreated",
					"may only be viewed",
					"The executed Lease Contract Documents",
					"saveSignatureInitials",
					"geteSign",
					"signField",
					"checkUnsignedFields",
					"saveFieldInHistory",
					"signField",
					"saveFieldInHistory",
					"formthumbnail",
					"drawPDF",
					"PDFbuffer",
					"SoapClient",
					"Fetching",
					"pdfViewer",
					"angular-pdfjs",
					"PDFJS",
					"PDF.js",
					"pdf.js",
					"dictionary",
					"esign/index.php",
					"EsigncacheStore",
					"forgetExpired",
					"CreateDocumentImages",
					"CreateDocumentImagesListener",
					"EmailInitialNotice",
					"Event::fire",
					"ESignerHistoryObserver",
					"s3",
					"technote",
					"app->bind",
					"combineAttributes"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
					"modelCreated",
					"Role",
					"role",
					"Role",
					"role",
					"Role",
					"role",
					"",
					"Dms\\Model",
					"",
					"Folder",
					", $attrs, $states",
					"$attrs, $states",
					"= []",
					"Dms\\Contracts\\Repositories\\DocumentRepository",
					"Folder",
					"folder",
					"Folder",
					"user",
					"User",
					"baseNamespace",
					"Bluemoon\\Dms\\\\1",
					"Bluemoon\\Dms\\",
					"App\\User",
					"Bluemoon\\Dms\\Models",
					"<?php",
					"<?",
					"<?php",
					"Bluemoon\\Dms\\Libraries",
					"Bluemoon\\",
					"Bluemoon\\Dms\\Models",
					"Bluemoon\\Dms\\Libraries",
					"Bluemoon\\Dms\\Models",
					"<?php namespace Bluemoon\\Dms\\Seeds;",
					"<?php namespace Bluemoon\\Dms\\Migrations;",
					"<?php namespace Bluemoon\\Dms\\Seeders;",
					"<?php namespace Bluemoon\\Dms\\Seeders",
					"Bluemoon\\Dms\\Models",
					"complete",
					"Complete",
					"DB_MYSQL_APP_PASSWORD",
					"DB_MYSQL_APP_USERNAME",
					"DB_MYSQL_DEV_DATABASE",
					"DB_MYSQL_DEV_HOST",
					"TechnoteCategory",
					"lcfirst",
					"technote",
					"Technote",
					"$this->defaultTokenType",
					"tokenType",
					"TokenType",
					"token",
					"Token",
					");",
					"cache.duration",
					"$cacheKeyName",
					"private $",
					"private ",
					"$connection",
					"permissionsTable",
					"Permission",
					"permission",
					"Permission",
					"savePermissionForm",
					"save-permission-form",
					"Service",
					"service",
					"Service",
					"service",
					"App\\Http\\Controllers",
					"App\\Controller",
					"clickReportService",
					"ClickReport",
					"clickOrder",
					"ClickOrder",
					"Billing",
					"report",
					"Report",
					"user",
					"User",
					"user",
					"Jad <jad@bluemoonforms.com>",
					"public function",
					"bluemoon_lite",
					"Billing",
					"Settings",
					"dummy",
					"",
					"dboffice3",
					"Reports",
					"reports",
					"Reports",
					"reports",
					"Reports",
					"billing",
					"save",
					"get",
					"unitSurveyRepos",
					"DbUnitSurveyRepository",
					"unitSurveyProperty",
					"UnitSurveyProperty",
					"officeService",
					"OfficeService",
					"lookupId",
					"ffiliate",
					"Affiliate",
					"affiliate",
					"Affiliate",
					"Portfolio",
					"El Paso",
					"lookupName",
					"affiliate",
					"Affiliate",
					"portfolio",
					"Portfolio",
					"portfolio",
					"Portfolio",
					"ortfolio",
					"ortfolioForm",
					"PortfolioField",
					"portfolioField",
					"portfolioId",
					"portfolio",
					"Portfolio",
					"PortfolioForm",
					"portfolioForm",
					"portfolioField",
					"PortfolioField"
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"groups":
			[
				{
					"selected": 3,
					"sheets":
					[
						{
							"buffer": 0,
							"file": "dms/packages/dms-core/tests/Unit/DocumentServiceUnitTest.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 7701,
								"regions":
								{
								},
								"selection":
								[
									[
										1648,
										1648
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
											"1":
											[
												538,
												539
											]
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"git_gutter_is_enabled": true,
									"highlight_line": false,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"_vintageous_glue_until_normal_mode": false,
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"normal_insert_count": "1",
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 137.0,
								"zoom_level": 1.0
							},
							"stack_index": 2,
							"type": "text"
						},
						{
							"buffer": 1,
							"file": "dms/packages/dms-core/tests/TestCase.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1813,
								"regions":
								{
								},
								"selection":
								[
									[
										1220,
										1220
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												1254,
												1255
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/round_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												1217,
												1218
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"_vintageous_glue_until_normal_mode": false,
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"normal_insert_count": "1",
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 40
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 6,
							"type": "text"
						},
						{
							"buffer": 2,
							"file": "dms/packages/dms-core/database/factories/RoleFactory.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 469,
								"regions":
								{
								},
								"selection":
								[
									[
										353,
										353
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												352,
												353
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/round_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												315,
												316
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content"
									],
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"_vintageous_glue_until_normal_mode": false,
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"normal_insert_count": "1",
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 64
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 15,
							"type": "text"
						},
						{
							"buffer": 3,
							"file": "dms/packages/dms-core/src/Services/DocumentService.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 7230,
								"regions":
								{
								},
								"selection":
								[
									[
										6955,
										6955
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												6972,
												6973
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												6849,
												6850
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"git_gutter_is_enabled": true,
									"highlight_line": false,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"_vintageous_glue_until_normal_mode": false,
										"_vintageous_non_interactive": false,
										"_vintageous_processing_notation": false,
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"normal_insert_count": "1",
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 11
									}
								},
								"translation.x": 0.0,
								"translation.y": 3932.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						},
						{
							"buffer": 4,
							"file": "dms/packages/dms-core/src/Models/Asset.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 902,
								"regions":
								{
								},
								"selection":
								[
									[
										902,
										902
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 137.0,
								"zoom_level": 1.0
							},
							"stack_index": 3,
							"type": "text"
						},
						{
							"buffer": 5,
							"file": "dms/packages/dms-core/src/Repositories/Eloquent/FolderRepositoryEloquent.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 909,
								"regions":
								{
								},
								"selection":
								[
									[
										391,
										391
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 5,
							"type": "text"
						},
						{
							"buffer": 6,
							"file": "dms/packages/dms-core/src/Repositories/Eloquent/AssetableRepositoryEloquent.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 805,
								"regions":
								{
								},
								"selection":
								[
									[
										586,
										586
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												803,
												804
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												354,
												355
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 4,
							"type": "text"
						},
						{
							"buffer": 7,
							"file": "dms/composer.json",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1635,
								"regions":
								{
								},
								"selection":
								[
									[
										1635,
										1635
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"git_gutter_is_enabled": true,
									"syntax": "Packages/JavaScript/JSON.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 360.0,
								"zoom_level": 1.0
							},
							"stack_index": 8,
							"type": "text"
						},
						{
							"buffer": 8,
							"file": "dms/packages/dms-core/database/seeds/OrganizationsTableSeeder.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 519,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 12,
							"type": "text"
						},
						{
							"buffer": 9,
							"file": "dms/packages/dms-core/config/dms.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1311,
								"regions":
								{
								},
								"selection":
								[
									[
										1214,
										1214
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												1222,
												1223
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/single_quote.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												1206,
												1207
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"_vintageous_glue_until_normal_mode": false,
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"normal_insert_count": "1",
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 12
									}
								},
								"translation.x": 0.0,
								"translation.y": 114.0,
								"zoom_level": 1.0
							},
							"stack_index": 10,
							"type": "text"
						},
						{
							"buffer": 10,
							"file": "dms/packages/dms-core/database/seeds/RolesTableSeeder.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1139,
								"regions":
								{
								},
								"selection":
								[
									[
										146,
										146
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												1137,
												1138
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												144,
												145
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"_vintageous_glue_until_normal_mode": false,
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"normal_insert_count": "1",
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 9,
							"type": "text"
						},
						{
							"buffer": 11,
							"file": "dms/packages/dms-core/database/seeds/DocumentsSeeder.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 5019,
								"regions":
								{
								},
								"selection":
								[
									[
										73,
										73
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"_vintageous_glue_until_normal_mode": false,
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"normal_insert_count": "1",
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 29
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 11,
							"type": "text"
						},
						{
							"buffer": 12,
							"file": "dms/packages/dms-core/src/Validators/RolesValidator.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 313,
								"regions":
								{
								},
								"selection":
								[
									[
										147,
										147
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content"
									],
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 9
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 16,
							"type": "text"
						},
						{
							"buffer": 13,
							"file": "dms/packages/dms-core/src/Http/Controllers/RoleController.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 4652,
								"regions":
								{
								},
								"selection":
								[
									[
										403,
										403
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content"
									],
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 10
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 19,
							"type": "text"
						},
						{
							"buffer": 14,
							"file": "dms/packages/dms-core/src/Http/Controllers/OrganizationController.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 4892,
								"regions":
								{
								},
								"selection":
								[
									[
										439,
										439
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content"
									],
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 17
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 18,
							"type": "text"
						},
						{
							"buffer": 15,
							"file": "dms/packages/dms-core/src/Contracts/Repositories/RoleRepository.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 269,
								"regions":
								{
								},
								"selection":
								[
									[
										130,
										130
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content"
									],
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 16
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 17,
							"type": "text"
						},
						{
							"buffer": 16,
							"file": "dms/packages/dms-core/src/Providers/RepositoryServiceProvider.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 863,
								"regions":
								{
								},
								"selection":
								[
									[
										279,
										279
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												280,
												281
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/single_quote.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												275,
												276
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content"
									],
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"_vintageous_glue_until_normal_mode": false,
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"normal_insert_count": "1",
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 12
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 23,
							"type": "text"
						},
						{
							"buffer": 17,
							"file": "dms/packages/dms-core/src/Models/Organization.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 932,
								"regions":
								{
								},
								"selection":
								[
									[
										232,
										232
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												930,
												931
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												125,
												126
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"_vintageous_glue_until_normal_mode": false,
										"_vintageous_non_interactive": false,
										"_vintageous_processing_notation": false,
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"normal_insert_count": "1",
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 9
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 1,
							"type": "text"
						},
						{
							"buffer": 18,
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 618,
								"regions":
								{
									"match":
									{
										"flags": 112,
										"regions":
										[
											[
												173,
												182
											],
											[
												373,
												382
											],
											[
												464,
												473
											]
										],
										"scope": ""
									}
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content"
									],
									"detect_indentation": false,
									"line_numbers": false,
									"output_tag": 1,
									"result_base_dir": "",
									"result_file_regex": "^([^ \t].*):$",
									"result_line_regex": "^ +([0-9]+):",
									"scroll_past_end": true,
									"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
									"translate_tabs_to_spaces": false,
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 14,
							"type": "text"
						},
						{
							"buffer": 19,
							"file": "dms/packages/dms-core/src/Libraries/Database/Eloquent/Model.php",
							"semi_transient": true,
							"settings":
							{
								"buffer_size": 1077,
								"regions":
								{
								},
								"selection":
								[
									[
										208,
										208
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												1075,
												1076
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												182,
												183
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content"
									],
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 24
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 13,
							"type": "text"
						},
						{
							"buffer": 20,
							"file": "dms/packages/dms-core/src/Models/Role.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 370,
								"regions":
								{
								},
								"selection":
								[
									[
										153,
										153
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												154,
												155
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/round_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												153,
												154
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"_vintageous_glue_until_normal_mode": false,
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"normal_insert_count": "1",
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 37
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 7,
							"type": "text"
						},
						{
							"buffer": 21,
							"file": "dms/packages/dms-core/src/Repositories/Eloquent/RoleRepositoryEloquent.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 928,
								"regions":
								{
								},
								"selection":
								[
									[
										588,
										588
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												602,
												603
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												568,
												569
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content"
									],
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 19
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 21,
							"type": "text"
						},
						{
							"buffer": 22,
							"file": "dms/packages/dms-core/src/Presenters/RolePresenter.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 452,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content"
									],
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 20,
							"type": "text"
						},
						{
							"buffer": 23,
							"file": "dms/packages/dms-core/src/Transformers/RoleTransformer.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 641,
								"regions":
								{
								},
								"selection":
								[
									[
										6,
										6
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content"
									],
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 22,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 39.0
			},
			"input":
			{
				"height": 39.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					]
				],
				"cols":
				[
					0.0,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.exec":
			{
				"height": 168.0
			},
			"output.find_results":
			{
				"height": 0.0
			},
			"pinned_build_system": "Packages/User/builds/psr2.sublime-build",
			"position": "0,0,0,0,0,116,120,756,600,1366,768",
			"project": "dms.sublime-project",
			"replace":
			{
				"height": 72.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"",
						"packages/dms-core/src/Services/DocumentService.php"
					],
					[
						"org",
						"packages/dms-core/src/Models/Organization.php"
					],
					[
						"asset.php",
						"packages/dms-core/src/Models/Asset.php"
					],
					[
						"folderrepo",
						"packages/dms-core/src/Repositories/Eloquent/FolderRepositoryEloquent.php"
					],
					[
						"testcase",
						"packages/dms-core/tests/TestCase.php"
					],
					[
						"role.php",
						"packages/dms-core/src/Models/Role.php"
					],
					[
						"composer.json",
						"composer.json"
					],
					[
						"docser",
						"packages/dms-core/src/Services/DocumentService.php"
					],
					[
						"documse",
						"packages/dms-core/database/seeds/DocumentsSeeder.php"
					],
					[
						"rolesee",
						"packages/dms-core/database/seeds/RolesTableSeeder.php"
					],
					[
						"orgaseed",
						"packages/dms-core/database/seeds/OrganizationsTableSeeder.php"
					],
					[
						"or",
						"packages/dms-core/src/Models/Organization.php"
					],
					[
						"rolseed",
						"packages/dms-core/database/seeds/RolesTableSeeder.php"
					],
					[
						"dms.php",
						"packages/dms-core/config/dms.php"
					],
					[
						"role",
						"packages/dms-core/src/Models/Role.php"
					],
					[
						"doserunites",
						"packages/dms-core/tests/Unit/DocumentServiceUnitTest.php"
					],
					[
						"roleseeder",
						"packages/dms-core/database/seeds/RolesTableSeeder.php"
					],
					[
						"rol",
						"packages/dms-core/database/factories/RoleFactory.php"
					],
					[
						"rolefact",
						"packages/dms-core/database/factories/RoleFactory.php"
					],
					[
						"docserunitest",
						"packages/dms-core/tests/Unit/DocumentServiceUnitTest.php"
					],
					[
						"rolevali",
						"packages/dms-core/src/Validators/RolesValidator.php"
					],
					[
						"reposerp",
						"packages/dms-core/src/Providers/RepositoryServiceProvider.php"
					],
					[
						"docuseruntes",
						"packages/dms-core/tests/Unit/DocumentServiceUnitTest.php"
					],
					[
						"docservtest",
						"packages/dms-core/tests/Unit/DocumentServiceUnitTest.php"
					],
					[
						"docsertest",
						"vendor/symfony/var-dumper/Tests/Caster/PdoCasterTest.php"
					],
					[
						"or/laravel/framework/src/illuminate/database/eloquent/model.php",
						"vendor/laravel/framework/src/Illuminate/Database/Eloquent/Model.php"
					],
					[
						"asset",
						"packages/dms-core/src/Models/Asset.php"
					],
					[
						"docseed",
						"packages/dms-core/database/seeds/DocumentsSeeder.php"
					],
					[
						"docsee",
						"packages/dms-core/src/Services/DocumentService.php"
					],
					[
						"docu",
						"packages/dms-core/src/Services/DocumentService.php"
					],
					[
						"dms",
						"packages/dms-core/src/Providers/DmsServiceProvider.php"
					],
					[
						"versioncon",
						"app/Http/Controllers/VersionController.php"
					],
					[
						"filefac",
						"packages/dms-core/database/factories/FileFactory.php"
					],
					[
						"filefa",
						"packages/dms-core/database/factories/FileFactory.php"
					],
					[
						"filefactory",
						"packages/dms-core/database/factories/FileFactory.php"
					],
					[
						"document.php",
						"packages/dms-core/src/Models/Document.php"
					],
					[
						"dose",
						"vendor/symfony/http-foundation/Session/Storage/Handler/PdoSessionHandler.php"
					],
					[
						"dmsser",
						"packages/dms-core/src/Providers/DmsServiceProvider.php"
					],
					[
						"event",
						"app/Providers/EventServiceProvider.php"
					],
					[
						"bootstrap/app.php",
						"bootstrap/app.php"
					],
					[
						"documsee",
						"packages/dms-core/database/seeds/DocumentsSeeder.php"
					],
					[
						"dms-core",
						"packages/dms-core/tests/Feature/ExampleTest.php"
					],
					[
						"docserunites",
						"packages/dms-core/tests/Unit/DocumentServiceUnitTest.php"
					],
					[
						"version.php",
						"packages/dms-core/src/Models/Version.php"
					],
					[
						"reposversionelo",
						"packages/dms-core/src/Repositories/Eloquent/VersionRepositoryEloquent.php"
					],
					[
						"contrrepoversi",
						"packages/dms-core/src/Contracts/Repositories/VersionRepository.php"
					],
					[
						"versionva",
						"packages/dms-core/src/Validators/VersionValidator.php"
					],
					[
						"dms-coreversion",
						"packages/dms-core/src/Transformers/VersionTransformer.php"
					],
					[
						"reposserpro",
						"packages/dms-core/src/Providers/RepositoryServiceProvider.php"
					],
					[
						"repo",
						"config/repository.php"
					],
					[
						"see",
						"vendor/laravel/framework/src/Illuminate/Database/Seeder.php"
					],
					[
						"docseeder",
						"packages/dms-core/database/seeds/DocumentsSeeder.php"
					],
					[
						"docseruntes",
						"packages/dms-core/tests/Unit/DocumentServiceUnitTest.php"
					],
					[
						"folder.php",
						"packages/dms-core/src/Models/Folder.php"
					],
					[
						"docsertes",
						"packages/dms-core/tests/Unit/DocumentServiceUnitTest.php"
					],
					[
						"81",
						"vendor/swiftmailer/swiftmailer/tests/_samples/charsets/iso-8859-1/one.txt"
					],
					[
						"docserunt",
						"packages/dms-core/tests/Unit/DocumentServiceUnitTest.php"
					],
					[
						"docrepounit",
						"packages/dms-core/tests/Unit/DocumentRepositoryUnitTest.php"
					],
					[
						"docuservi",
						"packages/dms-core/src/Services/DocumentService.php"
					],
					[
						"documeser",
						"packages/dms-core/src/Contracts/Repositories/DocumentRepository.php"
					],
					[
						"folderrestest",
						"packages/dms-core/tests/Unit/FolderRepositoryUnitTest.php"
					],
					[
						"dorepoel",
						"packages/dms-core/src/Repositories/Eloquent/DocumentRepositoryEloquent.php"
					],
					[
						"docreposel",
						"packages/dms-core/src/Repositories/Eloquent/DocumentRepositoryEloquent.php"
					],
					[
						"foldrepunit",
						"packages/dms-core/tests/Unit/FolderRepositoryUnitTest.php"
					],
					[
						"documeseed",
						"packages/dms-core/database/seeds/DocumentsSeeder.php"
					],
					[
						"assetabler",
						"packages/dms-core/src/Repositories/Eloquent/AssetableRepositoryEloquent.php"
					],
					[
						"docuserunitest",
						"packages/dms-core/tests/Unit/DocumentServiceUnitTest.php"
					],
					[
						"folderrepoel",
						"packages/dms-core/src/Repositories/Eloquent/FolderRepositoryEloquent.php"
					],
					[
						"composer",
						"composer.json"
					],
					[
						"folrepoelo",
						"packages/dms-core/src/Repositories/Eloquent/FolderRepositoryEloquent.php"
					],
					[
						"fo",
						"packages/dms-core/src/Contracts/Repositories/FolderRepository.php"
					],
					[
						"documser",
						"packages/dms-core/src/Services/DocumentService.php"
					],
					[
						"docusee",
						"packages/dms-core/database/seeds/DocumentsSeeder.php"
					],
					[
						"folderfact",
						"packages/dms-core/database/factories/FolderFactory.php"
					],
					[
						"dmss",
						"packages/dms-core/src/Providers/DmsServiceProvider.php"
					],
					[
						"compo",
						"composer.json"
					],
					[
						"docuseed",
						"packages/dms-core/database/seeds/DocumentsSeeder.php"
					],
					[
						"nodetra",
						"vendor/kalnoy/nestedset/src/NodeTrait.php"
					],
					[
						"compser",
						"packages/dms-core/composer.json"
					],
					[
						"seed",
						"vendor/laravel/framework/src/Illuminate/Database/Seeder.php"
					],
					[
						"doc",
						"packages/dms-core/database/seeds/DocumentsSeeder.php"
					],
					[
						"configdms",
						"packages/dms-core/config/dms.php"
					],
					[
						"dms.",
						"packages/dms-core/config/dms.php"
					],
					[
						"composer.",
						"composer.json"
					],
					[
						"folderrepotest",
						"packages/dms-core/tests/Unit/FolderRepositoryUnitTest.php"
					],
					[
						"folderreposelo",
						"packages/dms-core/src/Repositories/Eloquent/FolderRepositoryEloquent.php"
					],
					[
						"folderre",
						"packages/dms-core/src/Contracts/Repositories/FolderRepository.php"
					],
					[
						"documentservi",
						"packages/dms-core/src/Services/DocumentService.php"
					],
					[
						"phpunit",
						"phpunit.xml"
					],
					[
						"dms-corefeature",
						"packages/dms-core/tests/Feature/ExampleTest.php"
					],
					[
						"exampl",
						"tests/Feature/ExampleTest.php"
					],
					[
						"folerunit",
						"packages/bluemoonforms/dms/tests/Unit/FolderRepositoryUnitTest.php"
					],
					[
						"documenre",
						"packages/bluemoonforms/dms/src/Contracts/Repositories/DocumentRepository.php"
					],
					[
						"documentservic",
						"packages/bluemoonforms/dms/tests/Unit/DocumentServiceUnitTest.php"
					],
					[
						"configapp",
						"config/app.php"
					],
					[
						"docuserunit",
						"tests/bluemoon/dms/Unit/DocumentServiceUnitTest.php"
					],
					[
						"dms/dms.php",
						"packages/bluemoonforms/dms/config/dms.php"
					],
					[
						"config/dms",
						"config/dms.php"
					],
					[
						"reposserv",
						"packages/bluemoonforms/dms/src/Providers/RepositoryServiceProvider.php"
					],
					[
						"repos",
						"config/repository.php"
					],
					[
						"userrepounittes",
						"packages/bluemoonforms/dms/tests/Unit/UserRepositoryUnitTest.php"
					],
					[
						"config/app",
						"config/app.php"
					],
					[
						"userrepo",
						"packages/dms/tests/Unit/UserRepositoryUnitTest.php"
					],
					[
						"userrespounitest",
						"packages/dms/tests/Unit/UserRepositoryUnitTest.php"
					],
					[
						"userrepotest",
						"packages/dms/tests/Unit/UserRepositoryUnitTest.php"
					],
					[
						"reposerpo",
						"packages/dms/src/Providers/RepositoryServiceProvider.php"
					],
					[
						"userrepelo",
						"packages/dms/src/Repositories/Eloquent/UserRepositoryEloquent.php"
					],
					[
						"userreposunitte",
						"packages/dms/tests/Unit/UserRepositoryUnitTest.php"
					],
					[
						"config/dms.php",
						"packages/dms/config/dms.php"
					],
					[
						"reposser",
						"packages/dms/src/Providers/RepositoryServiceProvider.php"
					],
					[
						"php",
						"phpunit.xml"
					],
					[
						"dms/compo",
						"packages/dms/composer.json"
					],
					[
						"modelfolder.php",
						"packages/bluemoonforms/dms/src/Models/Folder.php"
					],
					[
						"folder",
						"packages/bluemoonforms/dms/src/Transformers/FolderTransformer.php"
					],
					[
						"ordereduuidkey",
						"packages/bluemoonforms/dms/src/Models/Traits/OrderedUuidKey.php"
					],
					[
						"docueseed",
						"packages/bluemoonforms/dms/src/database/seeds/DocumentsSeeder.php"
					],
					[
						"reps",
						"packages/bluemoonforms/dms/src/Providers/RepositoryServiceProvider.php"
					],
					[
						"foldertr",
						"packages/bluemoonforms/dms/src/Transformers/FolderTransformer.php"
					],
					[
						"documentser",
						"packages/bluemoonforms/dms/src/Services/DocumentService.php"
					],
					[
						"phpun",
						"phpunit.xml"
					],
					[
						"userrepostes",
						"packages/bluemoonforms/dms/tests/Unit/UserRepositoryUnitTest.php"
					],
					[
						"packdmsuser",
						"packages/bluemoonforms/dms/src/Models/User.php"
					],
					[
						"userrepos",
						"packages/bluemoonforms/dms/src/Repositories/Eloquent/UserRepositoryEloquent.php"
					],
					[
						"userrespotes",
						"packages/bluemoonforms/dms/tests/Unit/UserRepositoryUnitTest.php"
					],
					[
						"userrepoel",
						"packages/bluemoonforms/dms/src/Repositories/Eloquent/UserRepositoryEloquent.php"
					],
					[
						"usersee",
						"packages/bluemoonforms/dms/src/database/seeds/UsersTableSeeder.php"
					],
					[
						"bluefeatue",
						"packages/bluemoonforms/dms/tests/Feature/ExampleTest.php"
					],
					[
						"reposserp",
						"packages/bluemoonforms/dms/src/Providers/RepositoryServiceProvider.php"
					]
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 500.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 380.0
			},
			"select_symbol":
			{
				"height": 392.0,
				"last_filter": "createor",
				"selected_items":
				[
					[
						"createor",
						"createOrganization"
					],
					[
						"testcrefol",
						"testCreateFolderWithParent"
					],
					[
						"testcreatefol",
						"testCreateFolder"
					],
					[
						"docrepunite",
						"DocumentRepositoryUnitTest"
					],
					[
						"testcreadoser",
						"testCreateDocumentService"
					],
					[
						"createpack",
						"CreatePackagesTable"
					],
					[
						"isowner",
						"isOwner"
					],
					[
						"checkready",
						"CheckReadyToExecute"
					],
					[
						"documentwassi",
						"DocumentWasSigned"
					],
					[
						"report",
						"report"
					],
					[
						"savesin",
						"saveSignatureInitials"
					],
					[
						"getNextSigner",
						"testGetNextSigner"
					],
					[
						"ajax",
						"ajax"
					],
					[
						"savesi",
						"saveSignatureInitials"
					],
					[
						"savesignat",
						"saveSignatureInitials"
					],
					[
						"getdocu",
						"getDocument"
					],
					[
						"getdo",
						"getDocument"
					],
					[
						"testgetnex",
						"testGetNextSigner"
					],
					[
						"testgetnextsigner",
						"testGetNextSigner"
					],
					[
						"testsaveedoc",
						"testSaveEdocument"
					],
					[
						"testBuildformlayou",
						"testBuildFormLayoutForResident"
					],
					[
						"testsaveesign",
						"testSaveEsigner"
					],
					[
						"testsaveedo",
						"testSaveEdocument"
					],
					[
						"testgetforml",
						"testGetFormLayout"
					],
					[
						"getsignermodel",
						"testGetSignerModelById"
					],
					[
						"isexecuat",
						"testIsExecutableDocument"
					],
					[
						"esignercreat",
						"testESignerCreation"
					],
					[
						"tested",
						"testEDocumentCreation"
					],
					[
						"testcustomercre",
						"testCustomerCreation"
					],
					[
						"setFormAtt",
						"setFormAttributes"
					],
					[
						"createTech",
						"createTechnote"
					],
					[
						"tomodel",
						"toModel"
					],
					[
						"getibasemodel",
						"getIbaseModelById"
					],
					[
						"transactions",
						"transactionSave"
					],
					[
						"newtechnote",
						"newTechnote"
					],
					[
						"tobu",
						"toBusinessObjects"
					],
					[
						"canresetpass",
						"CanResetPasswordContract"
					],
					[
						"testsave",
						"testSave"
					],
					[
						"getbypor",
						"getByPortfolio"
					],
					[
						"PerformIn",
						"performInsert"
					],
					[
						"syncmodel",
						"syncModelPks"
					],
					[
						"finishSave",
						"finishSave"
					],
					[
						"create",
						"create"
					],
					[
						"getAttr",
						"getAttributes"
					],
					[
						"setAttributes",
						"setAttributes"
					],
					[
						"newBaseQuery",
						"newBaseQueryBuilder"
					],
					[
						"performinsert",
						"performInsert"
					],
					[
						"increment",
						"incrementGeneratorId"
					],
					[
						"insertgetid",
						"insertGetId"
					],
					[
						"insertand",
						"insertAndSetId"
					],
					[
						"insertGetId",
						"insertGetId"
					],
					[
						"statement",
						"statement"
					],
					[
						"compileinsert",
						"compileInsert"
					],
					[
						"compileinsertgetid",
						"compileInsertGetId"
					],
					[
						"insertandsetid",
						"insertAndSetId"
					],
					[
						"createPortfolio",
						"createPortfolio"
					],
					[
						"getPermissions",
						"getPermissions"
					],
					[
						"getModelType",
						"getModelType"
					],
					[
						"getdatabydate",
						"getDataByDateRange"
					],
					[
						"getDataBy",
						"getDataByDateRange"
					],
					[
						"generateclick",
						"generateClickOrderReport"
					],
					[
						"testgetibase",
						"testGetIbaseById"
					],
					[
						"testUnitgetby",
						"testUnitGetById"
					],
					[
						"testGenerateClic",
						"testGenerateClickOrderReport"
					],
					[
						"testSearch",
						"testSearch"
					],
					[
						"search",
						"search"
					],
					[
						"testgetibasebyID",
						"testGetIbaseById"
					],
					[
						"testsearcoun",
						"testSearchCount"
					],
					[
						"translatesearcht",
						"translateSearchTags"
					],
					[
						"testgetibasebyid",
						"testGetIbaseById"
					],
					[
						"getibasebyid",
						"getIbaseById"
					],
					[
						"getById",
						"getById"
					],
					[
						"dbaccountrepotes",
						"DbAccountRepositoryTests"
					],
					[
						"testgetbymonth",
						"testGetByMonth"
					],
					[
						"dbunitrepos",
						"testDbUnitSurveyRepositoryCreation"
					],
					[
						"dbprop",
						"DbPropertyRepositoryTests"
					],
					[
						"getibase",
						"getIbaseById"
					],
					[
						"testgetassi",
						"testGetAssociations"
					],
					[
						"testgetass",
						"testGetAssociations"
					],
					[
						"configurehand",
						"configureHandlers"
					],
					[
						"welcom",
						"WelcomeController"
					],
					[
						"billingcon",
						"BillingController"
					],
					[
						"getaccount",
						"getAccount"
					],
					[
						"testPor",
						"testPortfolioCreation"
					],
					[
						"testGetProperty",
						"testGetProperty"
					],
					[
						"PortfolioServiceTest",
						"PortfolioServiceTest"
					],
					[
						"saveProperty",
						"saveProperty"
					],
					[
						"getmodelbyid",
						"getModelById"
					],
					[
						"ibaseaffiliate",
						"IbaseAffiliate"
					],
					[
						"Iaccount",
						"IAccountRepository"
					],
					[
						"IAccount",
						"IAccountRepository"
					],
					[
						"testaccoutnmem",
						"testAccountMember"
					],
					[
						"newBas",
						"newBaseQueryBuilder"
					],
					[
						"saves",
						"saveSignatureInitials"
					],
					[
						"save",
						"SaveOwnerSignature"
					],
					[
						"savesig",
						"saveSignatureInitials"
					],
					[
						"savesiini",
						"saveSignatureInitials"
					],
					[
						"createdocumentimages",
						"CreateDocumentImages"
					],
					[
						"gettenant",
						"getLeaseTenants"
					],
					[
						"emailexe",
						"EmailExecutedNotice"
					],
					[
						"testgetemail",
						"testGetEmailDictionaryResident"
					],
					[
						"mailsertest",
						"MailServiceTest"
					],
					[
						"testGetEmail",
						"testGetEmailDictionaryResident"
					],
					[
						"sendex",
						"sendExecutedEmail"
					],
					[
						"docwasex",
						"DocumentWasExecuted"
					],
					[
						"docuwase",
						"DocumentWasExecuted"
					],
					[
						"doecwasex",
						"DocumentWasExecuted"
					],
					[
						"configurel",
						"ConfigureLogging"
					],
					[
						"saveowne",
						"SaveOwnerSignature"
					],
					[
						"saveo",
						"SaveOwnerSignature"
					],
					[
						"emailsig",
						"EmailSignatureNotice"
					],
					[
						"sendsig",
						"sendSignatureEmail"
					],
					[
						"documentwasSi",
						"DocumentWasSigned"
					],
					[
						"useDailyFiles",
						"useDailyFiles"
					],
					[
						"sendSign",
						"sendSignatureEmail"
					],
					[
						"edocumentob",
						"EDocumentObserver"
					],
					[
						"testgetsignermod",
						"testGetSignerModelByObject"
					],
					[
						"getDocument",
						"getDocument"
					],
					[
						"isexecu",
						"isExecutable"
					],
					[
						"testisexe",
						"testIsExecutableDocument"
					],
					[
						"getemail",
						"getEmailDictionary"
					],
					[
						"createDocumentMock",
						"createDocumentMock"
					],
					[
						"testgetsigtoemai",
						"testGetSignersToEmail"
					],
					[
						"createdocmomock",
						"createDocumentModelMock"
					],
					[
						"getemaild",
						"getEmailDictionary"
					],
					[
						"getemdicre",
						"testGetEmailDictionaryResident"
					],
					[
						"testGetEamil",
						"testGetEmailDictionaryResident"
					],
					[
						"getEmail",
						"getEmailDictionary"
					]
				],
				"width": 806.0
			},
			"selected_group": 0,
			"settings":
			{
				"_vintageous_last_buffer_search": "createorg",
				"_vintageous_last_buffer_search_command": "vi_slash",
				"_vintageous_last_char_search_command": "vi_t",
				"_vintageous_last_character_search": "N",
				"_vintageous_reset_during_init": true,
				"last_automatic_layout":
				[
					[
						0,
						0,
						1,
						1
					]
				],
				"vintage":
				{
					"_cmdline_cd": "/home/jadavis/repos/dms/packages/dms-core/src/Models"
				}
			},
			"show_minimap": false,
			"show_open_files": false,
			"show_tabs": false,
			"side_bar_visible": true,
			"side_bar_width": 261.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 322,
			"workspace_name": "/home/jadavis/repos/dms.sublime-workspace"
		},
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"elasticache",
						"elasticache_dev"
					],
					[
						"elastic",
						"elasticache_dev\t(database.php)"
					],
					[
						"instanc",
						"instanceof"
					],
					[
						"eD",
						"eDocumentObj"
					],
					[
						"Do",
						"DocumentWasSigned"
					],
					[
						"OWN",
						"OWNER_ESIGN_USE_ID"
					],
					[
						"eS",
						"eSignService"
					],
					[
						"proper",
						"propertyName"
					],
					[
						"DATE",
						"DATEINITIATED"
					],
					[
						"ES",
						"ESignatureService"
					],
					[
						"ESi",
						"ESignatureService\t(WorkflowController.php)"
					],
					[
						"first",
						"firstSigner"
					],
					[
						"legacy",
						"legacyAppNodeUrl\t(bluemoon.php)"
					],
					[
						"sendSig",
						"sendSignatureRequests\t(MailService.php)"
					],
					[
						"Create",
						"CreateDocumentImages\t(CreateDocumentImages.php)"
					],
					[
						"R",
						"Report"
					],
					[
						"Offic",
						"OfficeService"
					],
					[
						"Offi",
						"OfficeSuite"
					],
					[
						"Techno",
						"TechnoteSource\t(AppServiceProvider.php)"
					],
					[
						"orig",
						"origAttributes"
					],
					[
						"num",
						"numberOfUnits"
					],
					[
						"prop",
						"property_exists"
					],
					[
						"syncProperty",
						"syncPropertyNumberOfUnits\t(PortfolioService.php)"
					],
					[
						"sy",
						"syncArray"
					],
					[
						"number",
						"numberOfUnits\t(DbPropertyRepository.php)"
					],
					[
						"privi",
						"privilegeLabels"
					],
					[
						"array_",
						"array_key_exists\t(CustomUserProvider.php)"
					],
					[
						"por",
						"portfolioDataForAssociation"
					],
					[
						"comp",
						"comparePropertyAttributes"
					],
					[
						"portfo",
						"portfolioService"
					],
					[
						"sync",
						"syncPropertyAttributes\t(DbPropertyRepository.php)"
					],
					[
						"getA",
						"getAttributeMap"
					],
					[
						"getUsers",
						"getUsersByAccount\t(UserSettingsController.php)"
					],
					[
						"Por",
						"PortfolioService"
					],
					[
						"formsOn",
						"formsOnlineUserRepos"
					],
					[
						"add",
						"addTechnoteAttachment\t(OfficeService.php)"
					],
					[
						"technote",
						"technoteRepos"
					],
					[
						"modelTyp",
						"modelTypeAttribute"
					],
					[
						"getMod",
						"getModelByRealId"
					],
					[
						"technoteAtta",
						"TechnoteAttachment"
					],
					[
						"Bu",
						"BusinessObject"
					],
					[
						"tech",
						"technoteCategory\t(DbTechnoteRepository.php)"
					],
					[
						"getAtt",
						"getAttributes\t(PropertyService.php)"
					],
					[
						"techno",
						"technoteSource"
					],
					[
						"cat",
						"categoryId"
					],
					[
						"getCate",
						"getCategoryByLabel"
					],
					[
						"to",
						"toBusinessObject"
					],
					[
						"getCat",
						"getCategoryModelByLabel"
					],
					[
						"note",
						"noteCategory"
					],
					[
						"Commu",
						"CommunicationsController"
					],
					[
						"place",
						"placeholder\tAttr"
					],
					[
						"getTe",
						"getTechnotesBySerialNumber\t(OfficeService.php)"
					],
					[
						"toB",
						"toBusinessObject($this"
					],
					[
						"array_key",
						"array_key_exists"
					],
					[
						"buiness",
						"businessObject"
					],
					[
						"bui",
						"businessObject"
					],
					[
						"business",
						"businessObject"
					],
					[
						"cre",
						"creationTime"
					],
					[
						"ibaseTech",
						"ibaseTechnoteClass"
					],
					[
						"clien",
						"clientTypeEmailId"
					],
					[
						"clientT",
						"clientTypeEmailId"
					],
					[
						"arra",
						"array_key_exists\t(DbAccountRepository.php)"
					],
					[
						"getModel",
						"getModelBySerialNumber"
					],
					[
						"getI",
						"getIbaseModelBySerialNumber($serialNumber"
					],
					[
						"fun",
						"fun\tfunction …"
					],
					[
						"client",
						"clientTypeId"
					],
					[
						"is",
						"is_array\t(DbPermissionRepositoryTest.php)"
					],
					[
						"Bluemoon",
						"Bluemoon\\User\\Models\\Token\t(TokenType.php)"
					],
					[
						"userMdoel",
						"userModelbyToken"
					],
					[
						"assne",
						"assertGreaterThan\t(DbAccountRepositoryTest.php)"
					],
					[
						"user",
						"user_id"
					],
					[
						"asser",
						"assertInstanceOf"
					],
					[
						"User",
						"UserController"
					],
					[
						"Con",
						"Controller\t(BaseUserController.php)"
					],
					[
						"Base",
						"BaseUserController\t(BaseUserController.php)"
					],
					[
						"access",
						"accessTokenOrModule"
					],
					[
						"fina",
						"finalAttributes2"
					],
					[
						"final",
						"finalAttributes1"
					],
					[
						"port",
						"portfolioService"
					],
					[
						"property",
						"property_exists"
					],
					[
						"mapped",
						"mappedAttribute"
					],
					[
						"ass",
						"assem\tassertEmpty"
					],
					[
						"ASS",
						"ASSOCIATION\t(Account.php)"
					],
					[
						"modeTyp",
						"modelTypeAttribute"
					],
					[
						"str",
						"strtolower"
					],
					[
						"bu",
						"businessObject"
					],
					[
						"prim",
						"primaryKey\t(Model.php)"
					],
					[
						"imo",
						"imodelArray"
					],
					[
						"ibaseMo",
						"ibaseModelCollection"
					],
					[
						"new",
						"newPortfolio"
					],
					[
						"getAttr",
						"getAttributeMap"
					],
					[
						"increment",
						"incrementGeneratorId($generator"
					],
					[
						"incre",
						"incrementGeneratorId"
					],
					[
						"permi",
						"permissionRespos"
					],
					[
						"getPerm",
						"getPermissions"
					],
					[
						"ae",
						"assertEquals"
					],
					[
						"du",
						"dummyPermission"
					],
					[
						"Perm",
						"PermissionObserver"
					],
					[
						"Bas",
						"BaseObserver"
					],
					[
						"Of",
						"OfficeService\t(BaseOfficeSuiteController.php)"
					],
					[
						"manage",
						"managePermissionModal"
					],
					[
						"debug_",
						"debug_print_backtrace"
					],
					[
						"Ser",
						"Service\t(ServiceReportServiceTest.php)"
					],
					[
						"CLICK",
						"CLICKS_PURCHASED"
					],
					[
						"COMPANY",
						"COMPANY_NUMBER"
					],
					[
						"COMP",
						"COMPANY_NAME\t(ReportService.php)"
					],
					[
						"SERIA",
						"SERIAL_NUMBER"
					],
					[
						"SER",
						"SERIAL_NUMBER"
					],
					[
						"Ob",
						"ObserverServiceProvider\t(ObserverServiceProvider.php)"
					],
					[
						"getAt",
						"getAttributes"
					],
					[
						"get",
						"getBOAttributeName"
					],
					[
						"association",
						"associationDescription"
					],
					[
						"PROPERTY",
						"PROPERTYNUMBER"
					],
					[
						"expected",
						"expectedProperties"
					],
					[
						"expe",
						"expectedProperties"
					],
					[
						"ibaseP",
						"ibasePropertyClass"
					],
					[
						"IbaseA",
						"IbaseAccount"
					],
					[
						"Port",
						"PortfolioService\t(ReportService.php)"
					],
					[
						"report",
						"reportService"
					],
					[
						"Click",
						"ClickReportService\t(ReportService.php)"
					],
					[
						"Clic",
						"ClickReportService\t(ClickReportServiceTest.php)"
					],
					[
						"clicko",
						"clickOrderRepos"
					],
					[
						"Mo",
						"Models"
					],
					[
						"LO",
						"LOOKUPNAME"
					],
					[
						"boole",
						"booleanField"
					],
					[
						"off",
						"officeService"
					],
					[
						"propertyN",
						"propertyNumberSearch"
					],
					[
						"Busin",
						"BusinessObject\t(DbRepository.php)"
					]
				]
			},
			"buffers":
			[
				{
					"file": "bms2-sandlot/composer.json",
					"settings":
					{
						"buffer_size": 2652,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms2-sandlot/app/Services/MailService.php",
					"settings":
					{
						"buffer_size": 4688,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms2-sandlot/phpunit.xml",
					"settings":
					{
						"buffer_size": 919,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "<?php\n\nnamespace Bluemoon\\User\\Providers;\n\nuse App\\Services\\PortfolioService;\nuse Bluemoon\\User\\Models\\ClientType;\nuse Bluemoon\\User\\Models\\ClientTypeEmail;\nuse Bluemoon\\User\\Models\\Email;\nuse Bluemoon\\User\\Models\\Token;\nuse Bluemoon\\User\\Models\\TokenType;\nuse Bluemoon\\User\\Models\\User;\nuse Bluemoon\\User\\Models\\UserLeaseFormsAccount;\nuse Bluemoon\\User\\Repositories\\DbUserRepository;\nuse Illuminate\\Support\\Facades\\Blade;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass UserServiceProvider extends ServiceProvider\n{\n\n    /**\n     * @var bool\n     */\n    protected $defer = false;\n\n    /**\n     *\n     */\n    public function boot()\n    {\n        $config = realpath(__DIR__ . '/../Config/user.php');\n        $this->publishes([$config => config_path('user.php')], 'config');\n        $this->publishes([\n            __DIR__ . '/../../public/' => public_path('bluemoon/user'),\n            ], 'user:public');\n        $this->publishes([\n            __DIR__ . '/../../tests/' => base_path('tests/bluemoon/user'),\n            ], 'user:tests');\n        $this->loadRoutes();\n        $this->loadViewsConfiguration();\n    }\n\n    /**\n     *\n     */\n    public function register()\n    {\n        $this->registerUser();\n        $this->registerRepos();\n        $this->registerFormStore();\n\n        config([\n            '/../Config/user.php'\n        ]);\n    }\n\n    /**\n     * @return $this\n     */\n    private function loadRoutes()\n    {\n        require_once __DIR__ . '/../Http/routes.php';\n        return $this;\n    }\n\n    /**\n     * @return $this\n     */\n    public function loadViewsConfiguration()\n    {\n        $this->loadViewsFrom(realpath(__DIR__ . '/../../resources/views/user'), 'user');\n        return $this;\n    }\n\n    /**\n     *\n     */\n    public function registerUser()\n    {\n\n        $this->app->bind('userService', function ($app) {\n            return new UserService($app);\n        });\n    }\n\n    /**\n     *\n     */\n    public function registerRepos()\n    {\n        $this->app->bind(\n            'Bluemoon\\User\\Repositories\\IUserRepository',\n            function ($app) {\n                $portfolioService = \\App::make('\\App\\Services\\PortfolioService');\n                $passwordBroker = \\App::make('Illuminate\\Contracts\\Auth\\PasswordBroker');\n                return new DbUserRepository(\n                    $portfolioService,$dbPath = config('dms.paths.database');\n                    $passwordBroker,\n                    new User,\n                    new Email,\n                    new ClientType,\n                    new ClientTypeEmail,\n                    new Token,\n                    new TokenType,\n                    new UserLeaseFormsAccount\n                );\n            }\n        );\n    }\n\n    /**\n     *\n     */\n    public function registerFormStore()\n    {\n\n    }\n}\n",
					"file": "bms2-sandlot/packages/bluemoon/user/src/Providers/UserServiceProvider.php",
					"file_size": 2779,
					"file_write_time": 131447775587719557,
					"settings":
					{
						"buffer_size": 2818,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms2-sandlot/app/Http/routes.php",
					"settings":
					{
						"buffer_size": 1242,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms2-sandlot/app/Http/Controllers/Auth/AuthController.php",
					"settings":
					{
						"buffer_size": 4890,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms2-sandlot/app/Auth/Guard.php",
					"settings":
					{
						"buffer_size": 2836,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms2-sandlot/app/Providers/UserProvider.php",
					"settings":
					{
						"buffer_size": 4298,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms2-sandlot/vendor/laravel/framework/src/Illuminate/Foundation/Auth/AuthenticatesAndRegistersUsers.php",
					"settings":
					{
						"buffer_size": 205,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms2-sandlot/vendor/laravel/framework/src/Illuminate/Foundation/Auth/AuthenticatesUsers.php",
					"settings":
					{
						"buffer_size": 4287,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms2-sandlot/vendor/laravel/framework/src/Illuminate/Auth/Guard.php",
					"settings":
					{
						"buffer_size": 19923,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms2-sandlot/vendor/laravel/framework/src/Illuminate/Validation/Validator.php",
					"settings":
					{
						"buffer_size": 72416,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms2-sandlot/vendor/laravel/framework/src/Illuminate/Foundation/Auth/RedirectsUsers.php",
					"settings":
					{
						"buffer_size": 403,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms2-sandlot/vendor/laravel/framework/src/Illuminate/Contracts/Auth/Guard.php",
					"settings":
					{
						"buffer_size": 2342,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "Searching 133 files for \"loginPath\" (case sensitive)\n\n/home/jadavis/repos/bms2-sandlot/app/Http/Controllers/Auth/AuthController.php:\n   79          }\n   80  \n   81:         return redirect($this->loginPath())\n   82                          ->withInput($request->only('email', 'remember'))\n   83                          ->withErrors([\n\n1 match in 1 file\n\n\nSearching 134 files for \"UserProvider\" (case sensitive)\n\n/home/jadavis/repos/bms2-sandlot/app/Auth/PasswordBroker.php:\n    3  namespace App\\Auth\\Passwords;\n    4  \n    5: use App\\Providers\\UserProvider;\n    6  use Closure;\n    7  use Illuminate\\Support\\Arr;\n\n/home/jadavis/repos/bms2-sandlot/app/Providers/AppServiceProvider.php:\n   18  use App\\Models\\TechnoteSource;\n   19  use App\\Models\\User;\n   20: use App\\Providers\\UserProvider;\n   21  use App\\Repositories\\DbAccountRepository;\n   22  use App\\Repositories\\DbAffiliateRepository;\n   ..\n   45          Auth::extend('custom', function () {\n   46              return new Guard(\n   47:                 new UserProvider(new BcryptHasher(), Config::get('auth.custommodels')),\n   48                  App::make('session.store')\n   49              );\n\n/home/jadavis/repos/bms2-sandlot/app/Providers/UserProvider.php:\n    3  namespace App\\Providers;\n    4  \n    5: use Illuminate\\Auth\\EloquentUserProvider;\n    6  use Illuminate\\Contracts\\Hashing\\Hasher as HasherContract;\n    7  use Illuminate\\Contracts\\Auth\\Authenticatable as UserContract;\n    8  use App\\Libraries\\Log;\n    9  \n   10: class UserProvider extends EloquentUserProvider\n   11  {\n   12  \n\n6 matches across 3 files\n\n\nSearching 33 files for \"parent.getData\" (case sensitive)\n\n0 matches\n\nSearching 57 files for \"parent.getData\" (case sensitive)\n\n/home/jadavis/repos/bms2-sandlot/packages/leaseprogram/esign/resources/views/launch/index.blade.php:\n   33          $hostnameParts = document.location.hostname.split(\".\");\n   34          document.domain = $hostnameParts[$hostnameParts.length - 2] + \".\" + $hostnameParts[$hostnameParts.length - 1];\n   35:         var sessionData = parent.getData();\n   36          var eSignApp = angular.module('LeaseProgram', ['datatables', 'ngMask', 'ngLoadingSpinner']);\n   37  \n\n1 match in 1 file\n\n\nSearching 13870 files for \"eSignerInfo.NAME\" (case sensitive)\n\n/home/jadavis/repos/bms2-sandlot/packages/leaseprogram/esign/resources/views/manage/index.blade.php:\n  127                      <tbody>\n  128                      <tr ng-repeat=\"(key, eSignerInfo) in filterOwner(eSignersInfo) \" ng-class=\"{complete: eSignerInfo.DATESIGNED!==null}\">\n  129:                         <td nowrap>@{{eSignerInfo.NAME}}</td>\n  130                          <td ng-if=\"eSignerInfo.DATESIGNED===null\"><a editable-text=\"eSignerInfo.EMAIL\" onaftersave=\"updateEmail(key, eSignerInfo.EMAIL)\" style=\"border: none;\">@{{eSignerInfo.EMAIL}} </a></td>\n  131                          <td ng-if=\"eSignerInfo.DATESIGNED!==null\">@{{eSignerInfo.EMAIL}}</td>\n\n/home/jadavis/repos/bms2-sandlot/storage/framework/views/2ca5031e7e42fa653f3b3b46079fe951:\n  125                      <tbody>\n  126                      <tr ng-repeat=\"(key, eSignerInfo) in filterOwner(eSignersInfo) \" ng-class=\"{complete: eSignerInfo.DATESIGNED!==null}\">\n  127:                         <td nowrap>{{eSignerInfo.NAME}}</td>\n  128                          <td ng-if=\"eSignerInfo.DATESIGNED===null\"><a editable-text=\"eSignerInfo.EMAIL\" onaftersave=\"updateEmail(key, eSignerInfo.EMAIL)\" style=\"border: none;\">{{eSignerInfo.EMAIL}} </a></td>\n  129                          <td ng-if=\"eSignerInfo.DATESIGNED!==null\">{{eSignerInfo.EMAIL}}</td>\n\n2 matches across 2 files\n\n\nSearching 13870 files for \"eSignerInfo\" (case sensitive)\n\n/home/jadavis/repos/bms2-sandlot/packages/leaseprogram/esign/resources/views/manage/index.blade.php:\n  126                      </thead>\n  127                      <tbody>\n  128:                     <tr ng-repeat=\"(key, eSignerInfo) in filterOwner(eSignersInfo) \" ng-class=\"{complete: eSignerInfo.DATESIGNED!==null}\">\n  129:                         <td nowrap>@{{eSignerInfo.NAME}}</td>\n  130:                         <td ng-if=\"eSignerInfo.DATESIGNED===null\"><a editable-text=\"eSignerInfo.EMAIL\" onaftersave=\"updateEmail(key, eSignerInfo.EMAIL)\" style=\"border: none;\">@{{eSignerInfo.EMAIL}} </a></td>\n  131:                         <td ng-if=\"eSignerInfo.DATESIGNED!==null\">@{{eSignerInfo.EMAIL}}</td>\n  132                          {{--If on-the-spot is enabled--}}\n  133                          @if($onSite)\n  134:                         <td ng-if=\"eSignerInfo.ONSITE==='T'\">On-the-Spot\n  135                              <!-- Switch signing methods -->\n  136:                             <span class=\"dropdown dropdown-align-right dropdown-sm\" ng-if=\"eSignerInfo.DATESIGNED===null\">\n  137                                  <a href=\"#\" id=\"dLabel\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n  138                                      <i class=\"fa fa-caret-down\"></i>\n  ...\n  144                          </td>\n  145  \n  146:                         <td ng-if=\"eSignerInfo.ONSITE==='F'\" id=\"@{{ key }}\">eSignature\n  147:                             <span class=\"dropdown dropdown-align-right dropdown-sm\" ng-if=\"eSignerInfo.DATESIGNED===null\">\n  148                                  <a href=\"#\" id=\"dLabel\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n  149                                      <i class=\"fa fa-caret-down\"></i>\n  ...\n  154                                  <small>\n  155                                  <!-- Show if user is eSignature -->\n  156:                                 <a ng-click=\"resendEmail(key, eSignerInfo.EMAIL)\"><i class=\"fa fa-envelope-o\"></i> resend email</a>\n  157                              </small>\n  158                              </span>\n  ...\n  160                          @else\n  161                              <td id=\"@{{ key }}\">eSignature\n  162:                                 <small ng-if=\"eSignerInfo.DATESIGNED===null\">\n  163                                      <!-- Show if user is eSignature -->\n  164:                                     <a ng-click=\"resendEmail(key, eSignerInfo.EMAIL)\"><i class=\"fa fa-envelope-o\"></i> resend email</a>\n  165                                  </small>\n  166                              </td>\n  167                          @endif\n  168  \n  169:                         <td ng-if=\"eSignerInfo.DATESIGNED!==null\">\n  170                              <span class=\"text-success\"><img src=\"{{ asset('images/icon-check-circle-green.png') }}\"/> Complete</span>\n  171:                             <span ng-if=\"eSignerInfo.CREDITCARDNUMBER!==null\" class=\"pull-right\">\n  172:                                 <a href=\"javascript:void(0);\" data-toggle=\"modal\" ng-click=\"sendSignerData(eSignerInfo, key)\" data-target=\"#paymentModal\">\n  173:                                     <i class=\"fa fa-@{{eSignerInfo.CARDTYPE | lowercase}}\" data-toggle=\"tooltip\" title=\"View payment info\"></i>\n  174                                  </a>\n  175                              </span>\n  176:                             <small>@{{eSignerInfo.DATESIGNED}}</small>\n  177                          </td>\n  178  \n  179:                         <td ng-if=\"eSignerInfo.DATESIGNED===null\">\n  180                              <em>Pending</em>\n  181                          </td>\n\n/home/jadavis/repos/bms2-sandlot/storage/framework/views/2ca5031e7e42fa653f3b3b46079fe951:\n  124                      </thead>\n  125                      <tbody>\n  126:                     <tr ng-repeat=\"(key, eSignerInfo) in filterOwner(eSignersInfo) \" ng-class=\"{complete: eSignerInfo.DATESIGNED!==null}\">\n  127:                         <td nowrap>{{eSignerInfo.NAME}}</td>\n  128:                         <td ng-if=\"eSignerInfo.DATESIGNED===null\"><a editable-text=\"eSignerInfo.EMAIL\" onaftersave=\"updateEmail(key, eSignerInfo.EMAIL)\" style=\"border: none;\">{{eSignerInfo.EMAIL}} </a></td>\n  129:                         <td ng-if=\"eSignerInfo.DATESIGNED!==null\">{{eSignerInfo.EMAIL}}</td>\n  130                          <?php /*If on-the-spot is enabled*/ ?>\n  131                          <?php if($onSite): ?>\n  132:                         <td ng-if=\"eSignerInfo.ONSITE==='T'\">On-the-Spot\n  133                              <!-- Switch signing methods -->\n  134:                             <span class=\"dropdown dropdown-align-right dropdown-sm\" ng-if=\"eSignerInfo.DATESIGNED===null\">\n  135                                  <a href=\"#\" id=\"dLabel\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n  136                                      <i class=\"fa fa-caret-down\"></i>\n  ...\n  142                          </td>\n  143  \n  144:                         <td ng-if=\"eSignerInfo.ONSITE==='F'\" id=\"{{ key }}\">eSignature\n  145:                             <span class=\"dropdown dropdown-align-right dropdown-sm\" ng-if=\"eSignerInfo.DATESIGNED===null\">\n  146                                  <a href=\"#\" id=\"dLabel\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n  147                                      <i class=\"fa fa-caret-down\"></i>\n  ...\n  152                                  <small>\n  153                                  <!-- Show if user is eSignature -->\n  154:                                 <a ng-click=\"resendEmail(key, eSignerInfo.EMAIL)\"><i class=\"fa fa-envelope-o\"></i> resend email</a>\n  155                              </small>\n  156                              </span>\n  ...\n  158                          <?php else: ?>\n  159                              <td id=\"{{ key }}\">eSignature\n  160:                                 <small ng-if=\"eSignerInfo.DATESIGNED===null\">\n  161                                      <!-- Show if user is eSignature -->\n  162:                                     <a ng-click=\"resendEmail(key, eSignerInfo.EMAIL)\"><i class=\"fa fa-envelope-o\"></i> resend email</a>\n  163                                  </small>\n  164                              </td>\n  165                          <?php endif; ?>\n  166  \n  167:                         <td ng-if=\"eSignerInfo.DATESIGNED!==null\">\n  168                              <span class=\"text-success\"><img src=\"<?php echo e(asset('images/icon-check-circle-green.png')); ?>\"/> Complete</span>\n  169:                             <span ng-if=\"eSignerInfo.CREDITCARDNUMBER!==null\" class=\"pull-right\">\n  170:                                 <a href=\"javascript:void(0);\" data-toggle=\"modal\" ng-click=\"sendSignerData(eSignerInfo, key)\" data-target=\"#paymentModal\">\n  171:                                     <i class=\"fa fa-{{eSignerInfo.CARDTYPE | lowercase}}\" data-toggle=\"tooltip\" title=\"View payment info\"></i>\n  172                                  </a>\n  173                              </span>\n  174:                             <small>{{eSignerInfo.DATESIGNED}}</small>\n  175                          </td>\n  176  \n  177:                         <td ng-if=\"eSignerInfo.DATESIGNED===null\">\n  178                              <em>Pending</em>\n  179                          </td>\n\n44 matches across 2 files\n\n\nSearching 37 files for \"SESSION_DB\" (case sensitive)\n\n/home/jadavis/repos/bms2-sandlot/config/session.php:\n   61        |\n   62       */\n   63:     'connection' => env('SESSION_DB', 'mysql_session_dev'),\n   64      /*\n   65        |--------------------------------------------------------------------------\n\n1 match in 1 file\n\n\nSearching 134 files for \"getAssociaiton\" (case sensitive)\n\n0 matches",
					"settings":
					{
						"buffer_size": 11495,
						"line_ending": "Unix",
						"name": "Find Results",
						"scratch": true
					}
				},
				{
					"file": "bms2-sandlot/app/Repositories/DbPropertyRepository.php",
					"settings":
					{
						"buffer_size": 15531,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms2-sandlot/config/database.php",
					"settings":
					{
						"buffer_size": 7832,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms2-sandlot/.env",
					"settings":
					{
						"buffer_size": 1863,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms2-sandlot/packages/lease-core/database/migrations/2017_08_04_000000_create_form_property_use_table.php",
					"settings":
					{
						"buffer_size": 1070,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms2-sandlot/packages/leaseprogram/on-the-spot/src/Services/OnTheSpotService.php",
					"settings":
					{
						"buffer_size": 7331,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms2-sandlot/app/Repositories/DbAccountRepository.php",
					"settings":
					{
						"buffer_size": 9833,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms2-sandlot/packages/bluemoon/formdesigner/composer.json",
					"settings":
					{
						"buffer_size": 389,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms2-sandlot/app/Services/PortfolioService.php",
					"settings":
					{
						"buffer_size": 5547,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms2-sandlot/packages/leaseprogram/settings/src/Services/RentalAppService.php",
					"settings":
					{
						"buffer_size": 3391,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms2-sandlot/app/Repositories/DbRepository.php",
					"settings":
					{
						"buffer_size": 34370,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms2-sandlot/config/session.php",
					"settings":
					{
						"buffer_size": 5524,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms2-sandlot/config/cache.php",
					"settings":
					{
						"buffer_size": 2365,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms2-sandlot/packages/leaseprogram/esign/resources/views/manage/index.blade.php",
					"settings":
					{
						"buffer_size": 7908,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms2-sandlot/packages/leaseprogram/rentalapp/src/Services/RentalApplicationService.php",
					"settings":
					{
						"buffer_size": 6468,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms2-sandlot/packages/leaseprogram/esign/resources/views/launch/index.blade.php",
					"settings":
					{
						"buffer_size": 7377,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms2-sandlot/app/Providers/AppServiceProvider.php",
					"settings":
					{
						"buffer_size": 5198,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms2-sandlot/vendor/laravel/framework/src/Illuminate/Hashing/BcryptHasher.php",
					"settings":
					{
						"buffer_size": 1877,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms2-sandlot/app/Services/ApiService.php",
					"settings":
					{
						"buffer_size": 2304,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms2-sandlot/config/bluemoon.php",
					"settings":
					{
						"buffer_size": 2600,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms2-sandlot/packages/leaseprogram/esign/src/Services/EsignService.php",
					"settings":
					{
						"buffer_size": 7956,
						"line_ending": "Unix"
					}
				},
				{
					"file": "bms2-sandlot/packages/bluemoon/officesuite/src/Http/Controllers/SettingsController.php",
					"settings":
					{
						"buffer_size": 706,
						"line_ending": "Unix"
					}
				}
			],
			"build_system": "Packages/User/builds/psr2.sublime-build",
			"build_system_choices":
			[
				[
					[
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							""
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (All)"
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (This File Only)"
						],
						[
							"Packages/User/builds/psr2.sublime-build",
							""
						]
					],
					[
						"Packages/User/builds/psr2.sublime-build",
						""
					]
				]
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 392.0,
				"last_filter": "pack",
				"selected_items":
				[
					[
						"pack",
						"Package Control: List Packages"
					],
					[
						"Package Control: ",
						"Package Control: List Packages"
					],
					[
						"Snippet: ",
						"Snippet: COOKIE['…']"
					],
					[
						"Package Control: install",
						"Package Control: Install Package"
					],
					[
						"Snippet: ld",
						"Snippet: LogDebug"
					],
					[
						"Paconrepa",
						"Package Control: Remove Package"
					],
					[
						"inp",
						"Package Control: Install Package"
					],
					[
						"instal",
						"Package Control: Install Package"
					],
					[
						"pa",
						"Package Control: Install Package"
					],
					[
						"paconad",
						"Package Control: Add Repository"
					],
					[
						"sniff",
						"PHP Code Sniffer: Sniff this file"
					],
					[
						"phpunit",
						"PHPUnit: Run"
					],
					[
						"phpun",
						"PHPUnit: Run"
					],
					[
						"tenant",
						"GitGutter: Show Comparing Against"
					],
					[
						"getset",
						"Generate Getter and Setter for ..."
					],
					[
						"togglet",
						"View: Toggle Tabs"
					],
					[
						"get set",
						"PHP: Generate Getters and Setters"
					],
					[
						"toggle tab",
						"View: Toggle Tabs"
					],
					[
						"View:toggl",
						"View: Toggle Tabs"
					],
					[
						"sublimelinter",
						"Preferences: SublimeLinter Key Bindings – Default"
					],
					[
						"packagecon",
						"Package Control: List Packages"
					],
					[
						"in",
						"Package Control: Install Package"
					],
					[
						"inst",
						"Package Control: Install Package"
					],
					[
						"sublim",
						"SublimeLinter: Show All Errors"
					],
					[
						"ins",
						"Package Control: Install Package"
					],
					[
						"generate",
						"Generate Getter and Setter for ..."
					],
					[
						"phprefa",
						"PHPSimpleRefactor: extract current lines to method"
					],
					[
						"pca",
						"Package Control: Install Package"
					],
					[
						"phpcompan",
						"PHPCompanion:Find Use"
					],
					[
						"toggle ta",
						"View: Toggle Tabs"
					],
					[
						"getter",
						"PHP: Generate Getters"
					],
					[
						"Snippet: asse",
						"Snippet: assertEquals"
					],
					[
						"install",
						"Package Control: Install Package"
					],
					[
						"phpcompanion",
						"PHPCompanion:Expand Fully Qualified Class Name"
					],
					[
						"impo",
						"PHPCompanion:Import Namespace"
					],
					[
						"phpcomp",
						"PHPCompanion:Import Namespace"
					],
					[
						"compan",
						"PHPCompanion:Insert Constructor Property"
					],
					[
						"php",
						"PHPCompanion:Insert Constructor Property"
					],
					[
						"phpcom",
						"PHPCompanion:Insert Constructor Property"
					],
					[
						"const",
						"PHPCompanion:Insert Constructor Property"
					],
					[
						"packi",
						"Package Control: Install Package"
					],
					[
						"php com",
						"PHPCompanion:Expand Fully Qualified Class Name"
					],
					[
						"insta",
						"Package Control: Install Package"
					],
					[
						"toggle ",
						"View: Toggle Status Bar"
					],
					[
						"anf",
						"ANF: Rename File"
					],
					[
						"status",
						"View: Toggle Status Bar"
					],
					[
						"package re",
						"PackageResourceViewer: Extract Package"
					],
					[
						"package in",
						"Package Control: Install Package"
					],
					[
						"install ",
						"Colorsublime: Install Theme"
					],
					[
						"pcak",
						"Package Control: Install Package"
					],
					[
						"esign",
						"Snippet: Designate that the column allows NULL values"
					],
					[
						"Snippet: doc",
						"Snippet: Start Docblock"
					],
					[
						"packains",
						"Package Control: Install Package"
					],
					[
						"packin",
						"Package Control: Install Package"
					],
					[
						"syntaxjson",
						"Set Syntax: JSON"
					],
					[
						"Pacin",
						"Package Control: Install Package"
					],
					[
						"Package Control: inst",
						"Package Control: Install Package"
					],
					[
						"Package Control: in",
						"Package Control: Install Package"
					],
					[
						"inden",
						"Indentation: Reindent Lines"
					],
					[
						":w",
						":w - Save"
					]
				],
				"width": 962.0
			},
			"console":
			{
				"height": 375.0,
				"history":
				[
					"+context_name+",
					"clear",
					"Toggle ScopeAlways",
					"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) :Q",
					"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"expanded_folders":
			[
				"/home/jadavis/repos/bms2-sandlot",
				"/home/jadavis/repos/bms2-sandlot/packages",
				"/home/jadavis/repos/bms2-sandlot/packages/lease-core",
				"/home/jadavis/repos/bms2-sandlot/packages/lease-core/database",
				"/home/jadavis/repos/bms2-sandlot/packages/lease-core/database/migrations",
				"/home/jadavis/repos/bms2-sandlot/packages/leaseprogram",
				"/home/jadavis/repos/bms2-sandlot/packages/leaseprogram/esign",
				"/home/jadavis/repos/bms2-sandlot/packages/leaseprogram/esign/resources",
				"/home/jadavis/repos/bms2-sandlot/packages/leaseprogram/esign/resources/views",
				"/home/jadavis/repos/bms2-sandlot/packages/leaseprogram/esign/resources/views/manage",
				"/home/jadavis/repos/bms2-sandlot/packages/leaseprogram/esign/resources/views/master",
				"/home/jadavis/repos/bms2-sandlot/packages/leaseprogram/esign/src",
				"/home/jadavis/repos/bms2-sandlot/packages/leaseprogram/esign/src/Providers",
				"/home/jadavis/repos/bms2-sandlot/packages/leaseprogram/esign/src/Services",
				"/home/jadavis/repos/bms2-sandlot/packages/leaseprogram/esign/tests",
				"/home/jadavis/repos/bms2-sandlot/packages/leaseprogram/settings"
			],
			"file_history":
			[
				"/home/jadavis/repos/bms2-sandlot/.env",
				"/home/jadavis/repos/bms2-sandlot/app/Auth/Guard.php",
				"/home/jadavis/repos/bms-esign/app/Libraries/Repositories/DbEDocumentRepository.php",
				"/home/jadavis/repos/bms-esign/app/Libraries/Constants.php",
				"/home/jadavis/repos/bms-esign/app/Models/ESigner.php",
				"/home/jadavis/repos/bms-esign/app/Services/ESignatureService.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/ownerComplete.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/resComplete.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/submitted.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/sign.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/otherRentalApp.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/notification.blade.php",
				"/home/jadavis/repos/bms-esign/app/Bms/Support/AddressBuilder.php",
				"/home/jadavis/repos/bms-esign/app/Models/Property.php",
				"/home/jadavis/repos/bms-esign-compare/app/Services/MailService.php",
				"/home/jadavis/repos/bms-esign/app/Services/MailService.php",
				"/home/jadavis/repos/bms-esign/tests/bluemoon/esignature/services/MailServiceTest.php",
				"/home/jadavis/repos/bms-esign/app/Models/ProductSettingsUse.php",
				"/home/jadavis/repos/bms-esign/app/Models/Product.php",
				"/home/jadavis/repos/bms-esign/app/Models/Customer.php",
				"/home/jadavis/repos/bms-esign/tests/bluemoon/esignature/services/ESignatureServiceTest.php",
				"/home/jadavis/repos/bms-esign/tests/bluemoon/esignature/models/ESignerTest.php",
				"/home/jadavis/repos/bms-esign/tests/bluemoon/esignature/models/EDocumentTest.php",
				"/home/jadavis/repos/bms-esign/tests/CustomerTest.php",
				"/home/jadavis/repos/bms-esign/public/js/app/setup.js",
				"/home/jadavis/repos/bms-esign/app/Models/Portolio.php",
				"/home/jadavis/repos/bms-esign/app/Models/Model.php",
				"/home/jadavis/repos/bms-esign/app/Models/ESignerHistory.php",
				"/home/jadavis/repos/bms-esign/app/Models/EDocument.php",
				"/home/jadavis/repos/bms-esign/app/Services/PDFConversionService.php",
				"/home/jadavis/repos/bms-esign/app/Providers/AppServiceProvider.php",
				"/home/jadavis/repos/bms-esign/config/app.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/executed.blade.php",
				"/home/jadavis/repos/bms-esign/app/Listeners/Events/EmailExecutedNotice.php",
				"/home/jadavis/repos/bms-esign/public/js/app/forms.js",
				"/home/jadavis/repos/bms-esign/resources/views/steps/forms.blade.php",
				"/home/jadavis/repos/bms-esign/public/js/ngMask.js",
				"/home/jadavis/repos/bms-esign/resources/views/steps/setup.blade.php",
				"/home/jadavis/repos/bms-esign/public/js/app/jSignature-inline/jSignature-core.js",
				"/home/jadavis/repos/bms-esign/config/session.php",
				"/home/jadavis/repos/bms-esign/resources/views/disclosure.blade.php",
				"/home/jadavis/repos/bms-esign/config/database.php",
				"/home/jadavis/repos/bms-esign/app/Listeners/Events/SaveOwnerSignature.php",
				"/home/jadavis/repos/bms-esign/config/esignature.php",
				"/home/jadavis/repos/bms-esign/app/Events/DocumentWasSigned.php",
				"/home/jadavis/repos/bms-esign/app/Observers/ESignerObserver.php",
				"/home/jadavis/repos/bms-esign/app/Providers/ObserverServiceProvider.php",
				"/home/jadavis/repos/bms-esign/app/Http/Kernel.php",
				"/home/jadavis/repos/bms-esign/app/Console/Kernel.php",
				"/home/jadavis/repos/bms-esign/public/js/app/complete.js",
				"/home/jadavis/repos/bms-esign/app/Listeners/Events/EmailSignatureNotice.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/readyToExecute.blade.php",
				"/home/jadavis/repos/bms-esign/app/Listeners/Events/CheckReadyToExecute.php",
				"/home/jadavis/repos/bms-esign/app/Listeners/Events/EmailInitialNotice.php",
				"/home/jadavis/repos/bms-esign-compare/app/Providers/EventServiceProvider.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/initiated.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/gaaSign.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/gaaReadyToExecute.blade.php",
				"/home/jadavis/repos/bms-esign/app/Providers/EventServiceProvider.php",
				"/home/jadavis/repos/bms-esign/resources/views/index.blade.php",
				"/home/jadavis/repos/bms-esign/public/js/app/disclosure.js",
				"/home/jadavis/repos/bms-esign/composer.json",
				"/home/jadavis/repos/bms-esign/config/cache.php",
				"/home/jadavis/repos/bms-esign/app/Events/DocumentWasExecuted.php",
				"/home/jadavis/repos/bms-esign/app/Commands/CreateDocumentImages.php",
				"/home/jadavis/repos/bms-esign/vendor/symfony/debug/Symfony/Component/Debug/ExceptionHandler.php",
				"/home/jadavis/repos/bms-esign/app/Exceptions/BmsException.php",
				"/home/jadavis/repos/bms-esign/app/Exceptions/HttpException.php",
				"/home/jadavis/repos/bms-esign/app/Exceptions/Handler.php",
				"/home/jadavis/repos/bms-esign/app/Events/DocumentWasCreated.php",
				"/home/jadavis/repos/bms-esign/app/Http/Controllers/EventController.php",
				"/home/jadavis/repos/bms-esign/app/Http/routes.php",
				"/home/jadavis/repos/bms-esign/app/Libraries/Repositories/DbESignerRepository.php",
				"/home/jadavis/repos/bms-esign/vendor/laravel/framework/src/Illuminate/Foundation/Support/Providers/EventServiceProvider.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/master.blade.php",
				"/home/jadavis/repos/bms-esign/vendor/laravel/framework/src/Illuminate/Foundation/Application.php",
				"/home/jadavis/repos/bms-esign/resources/views/master/mobile.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/portal/mobile-panel.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/portal/lease-summary-panel.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/master/portal.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/mobile/payment.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/mobile/complete.blade.php",
				"/home/jadavis/repos/bms-esign/app/Http/Controllers/EDocumentController.php",
				"/home/jadavis/repos/bms-esign/.env",
				"/home/jadavis/repos/bms-esign/vendor/symfony/debug/Symfony/Component/Debug/Exception/FatalErrorException.php",
				"/home/jadavis/repos/bms-esign/vendor/laravel/framework/src/Illuminate/Foundation/Exceptions/Handler.php",
				"/home/jadavis/repos/bms-esign/vendor/laravel/framework/src/Illuminate/Contracts/Debug/ExceptionHandler.php",
				"/home/jadavis/repos/bms-esign/app/Http/Controllers/WorkflowController.php",
				"/home/jadavis/repos/bms-esign/resources/views/email/signature.blade.php",
				"/home/jadavis/repos/bms-esign/app/Events/CheckReadyToExecute.php",
				"/home/jadavis/repos/bms-esign/app/Listeners/Events/EmailOwnerInitialNotice.php",
				"/home/jadavis/repos/bms-esign/resources/views/emails/master.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/emails/password.blade.php",
				"/home/jadavis/repos/bms-esign/app/Providers/ResponseMacroServiceProvider.php",
				"/home/jadavis/repos/bms-esign/resources/views/formthumbnail.blade.php",
				"/home/jadavis/repos/bms-esign/app/Http/Controllers/MobileController.php",
				"/home/jadavis/repos/bms-esign/public/index.php",
				"/home/jadavis/repos/bms-esign/public/.htaccess",
				"/home/jadavis/repos/bms-esign-compare/app/Http/Controllers/WorkflowController.php",
				"/home/jadavis/repos/bms-esign/config/bluemoon.php",
				"/home/jadavis/repos/bms-esign/app/Observers/EDocumentObserver.php",
				"/home/jadavis/repos/bms-esign/storage/framework/views/131fae90a7b1f53a6c227640c49ededd",
				"/home/jadavis/repos/bms-esign-compare/app/Services/ESignatureService.php",
				"/home/jadavis/repos/bms-esign/public/js/angular-pdfjs.js",
				"/home/jadavis/repos/bms-esign/public/js/pdf.js",
				"/home/jadavis/repos/bms-esign/resources/views/complete.blade.php",
				"/home/jadavis/repos/bms-esign/resources/views/themes/Default/head.blade.php",
				"/home/jadavis/repos/bms2-sandlot/mobile/esignApp/www/master.html",
				"/home/jadavis/repos/bms-esign/app/Bms/Support/EsigncacheStore.php",
				"/home/jadavis/repos/bms-esign/config/queue.php",
				"/home/jadavis/repos/bms-esign/vendor/laravel/framework/src/Illuminate/Queue/InteractsWithQueue.php",
				"/home/jadavis/repos/bms-esign/vendor/laravel/framework/src/Illuminate/Queue/Listener.php",
				"/home/jadavis/repos/bms-esign/vendor/laravel/framework/src/Illuminate/Events/EventServiceProvider.php",
				"/home/jadavis/repos/bms-esign/resources/views/esigner/index.blade.php",
				"/home/jadavis/repos/bms-esign/vendor/laravel/framework/src/Illuminate/Events/Dispatcher.php",
				"/home/jadavis/repos/bms-esign/vendor/laravel/framework/src/Illuminate/Support/ServiceProvider.php",
				"/home/jadavis/repos/bms-esign/vendor/laravel/framework/src/Illuminate/Contracts/Queue/ShouldBeQueued.php",
				"/home/jadavis/repos/bms-esign/app/Listeners/Events/CreateDocumentImages.php",
				"/home/jadavis/repos/github-prod-keys/bms_env_files/env.qual.txt",
				"/home/jadavis/repos/github-prod-keys/bms_env_files/env.prod.txt",
				"/home/jadavis/repos/github-prod-keys/remote_mgmt/bin/build_lite_db.py",
				"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite/src/Http/Controllers/PropertyController.php",
				"/home/jadavis/repos/bms2-sandlot/app/Events/VendorRequestedPdfPush.php",
				"/home/jadavis/repos/bms2-sandlot/app/Listeners/Events/QueuedListener.php",
				"/home/jadavis/repos/bms2-sandlot/app/Listeners/Events/PushPdfToVendor.php",
				"/home/jadavis/repos/bms2-sandlot/app/Http/Controllers/EventController.php",
				"/home/jadavis/repos/bms2-sandlot/app/Http/Middleware/VerifyCsrfToken.php",
				"/home/jadavis/repos/bms2-sandlot/app/Http/routes.php"
			],
			"find":
			{
				"height": 39.0
			},
			"find_in_files":
			{
				"height": 158.0,
				"where_history":
				[
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/config",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/packages/leaseprogram/esign",
					"/home/jadavis/repos/bms2-sandlot/packages/leaseprogram/on-the-spot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms-esign/public/js/app",
					"/home/jadavis/repos/bms-esign/public",
					"/home/jadavis/repos/bms-esign,-*.js,,-*.log",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/resources/views/portal",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/resources",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/resources",
					"/home/jadavis/repos/bms-esign/public/js",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/resources/views/email",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/resources/views/email",
					"/home/jadavis/repos/bms-esign/resources/views",
					"/home/jadavis/repos/bms-esign/vendor",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/app",
					"/home/jadavis/repos/bms-esign/app/Services",
					"/home/jadavis/repos/bms-esign/app",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/config",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign,-*.log",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign-compare",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign-compare",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/app/Http/Controllers",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/resources",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms-esign/app",
					"/home/jadavis/repos/bms-esign,-*.log",
					"/home/jadavis/repos/bms-esign",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite,-*.css",
					"/home/jadavis/repos/bms2-sandlot/packages,-*.css",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot,-*.log",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot,-*.json",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite",
					"/home/jadavis/repos/bms2-sandlot,-*.json",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/app/Services",
					"/home/jadavis/repos/bms2-sandlot/app/Repositories",
					"/home/jadavis/repos/bms2-sandlot/packages/leaseprogram",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot/app/Providers",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite/src/Http/Controllers",
					"/home/jadavis/repos/bms2-sandlot/packages/myibase",
					"/home/jadavis/repos/bms2-sandlot/packages/mydbdriver",
					"/home/jadavis/repos/bms2-sandlot,-*.json",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon",
					"/home/jadavis/repos/bms2-sandlot/packages,-*.js",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite",
					"/home/jadavis/repos/bms2-sandlot/config",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/vendor",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/app/Services",
					"/home/jadavis/repos/bms2-sandlot/app/Repositories",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon,-*.js",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot-compare/packages",
					"/home/jadavis/repos/bms2-sandlot-compare/app",
					"/home/jadavis/repos/bms2-sandlot/packages/myibase",
					"/home/jadavis/repos/bms2-sandlot/packages/mydbdriver",
					"/home/jadavis/repos/bms2-sandlot/packages,-*.js",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/,-*.js",
					"/home/jadavis/repos/bms2-sandlot/-*.js",
					"/home/jadavis/repos/bms2-sandlot/packages,-*.js",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot/packages/myibase",
					"/home/jadavis/repos/bms2-sandlot/",
					"/home/jadavis/repos/bms2-sandlot/packages/mydbdriver",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot/vendor/laravel/framework/src/Illuminate/Database",
					"/home/jadavis/repos/bms2-sandlot/packages,-*.js",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot/packages/mydbdriver",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/packages",
					"/home/jadavis/repos/bms2-sandlot/packages/myibase",
					"/home/jadavis/repos/bms2-sandlot/app",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite/resources",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite/resources/views/user",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite/resources",
					"/home/jadavis/repos/bms2-sandlot",
					"/home/jadavis/repos/bms2-sandlot/public/js",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite/resources",
					"/home/jadavis/repos/bms2-sandlot/packages/bluemoon/officesuite/resources/views/user"
				]
			},
			"find_state":
			{
				"case_sensitive": true,
				"find_history":
				[
					"getAssociaiton",
					"SESSION_DB",
					"eSignerInfo",
					"eSignerInfo.NAME",
					"parent.getData",
					"UserProvider",
					"loginPath",
					"signature",
					"signature-undo",
					"undo",
					"src",
					"usesESign2",
					"GAA",
					"indicatorLabel",
					"CHECK ONE",
					"\"CHECK ONE\"",
					"v=",
					"put/signature",
					"ng-click",
					"function sign",
					"DocumentWasExecuted",
					"DocumentWasSigned",
					"sendSignatureRequests",
					"GAA",
					"generateDocument",
					"generateDocume nt",
					"class=\"btn\"",
					"signature",
					"sendExecutedEmail",
					"Congratulations.  The {{ $productDocuments }} received final approval and have been executed.  The starting date of your lease @if ($renewal) renewal @endif is {{ $leaseStartDate }}.",
					"sales",
					"execute",
					"Execute",
					"img",
					"src",
					"style",
					"PHP-parser",
					"\\Log::debug(__METHOD__ . \":\"",
					"\\Log",
					"DB_PASSWORD_DEV",
					"DB_USERNAME_DEV",
					"DB_DATABASE_DEV",
					"DB_HOST_DEV",
					"memory_limit",
					"saveSignatureInitials",
					"throw",
					"No PDF Found for",
					"md5",
					"saveSignatureInitials",
					"cacheKeys",
					"mysql_dev_bm2",
					"DocumentImagesWereCreated",
					"may only be viewed",
					"The executed Lease Contract Documents",
					"saveSignatureInitials",
					"geteSign",
					"signField",
					"checkUnsignedFields",
					"saveFieldInHistory",
					"signField",
					"saveFieldInHistory",
					"formthumbnail",
					"drawPDF",
					"PDFbuffer",
					"SoapClient",
					"Fetching",
					"pdfViewer",
					"angular-pdfjs",
					"PDFJS",
					"PDF.js",
					"pdf.js",
					"dictionary",
					"esign/index.php",
					"EsigncacheStore",
					"forgetExpired",
					"CreateDocumentImages",
					"CreateDocumentImagesListener",
					"EmailInitialNotice",
					"Event::fire",
					"ESignerHistoryObserver",
					"s3",
					"technote",
					"app->bind",
					"combineAttributes",
					"blumoonformsdev",
					"spinner",
					"privilegeStatus",
					"aptUnits",
					"Product",
					"You have reached an area",
					"PWDRESET",
					"here we is",
					"\\App\\Models\\User",
					"leaseprogram",
					"bcrypt",
					"getValidationFactory",
					"function validate",
					"officedev",
					"PWDRESET",
					"NoteCategory",
					"START Zend",
					"PWDRESET",
					"HEAD",
					"PortfolioService",
					"Porfolio",
					"technotes.ibase",
					"tech",
					"strtolower",
					"ibasetechnote",
					"env",
					"getTechnotes",
					"technote",
					"getIbaseModelBySerialNumber",
					"portfolioField",
					"PortfolioField",
					"updatedAt",
					"tech",
					"dateMade",
					"propertyCount",
					"legacy",
					"Config::get",
					"config::get",
					"\"PWDRESET\"",
					"CRYPT_METHOD",
					"User",
					"token",
					"Token",
					"user"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
					"complete",
					"Complete",
					"DB_MYSQL_APP_PASSWORD",
					"DB_MYSQL_APP_USERNAME",
					"DB_MYSQL_DEV_DATABASE",
					"DB_MYSQL_DEV_HOST",
					"TechnoteCategory",
					"lcfirst",
					"technote",
					"Technote",
					"$this->defaultTokenType",
					"tokenType",
					"TokenType",
					"token",
					"Token",
					");",
					"cache.duration",
					"$cacheKeyName",
					"private $",
					"private ",
					"$connection",
					"permissionsTable",
					"Permission",
					"permission",
					"Permission",
					"savePermissionForm",
					"save-permission-form",
					"Service",
					"service",
					"Service",
					"service",
					"App\\Http\\Controllers",
					"App\\Controller",
					"clickReportService",
					"ClickReport",
					"clickOrder",
					"ClickOrder",
					"Billing",
					"report",
					"Report",
					"user",
					"User",
					"user",
					"Jad <jad@bluemoonforms.com>",
					"public function",
					"bluemoon_lite",
					"Billing",
					"Settings",
					"dummy",
					"",
					"dboffice3",
					"Reports",
					"reports",
					"Reports",
					"reports",
					"Reports",
					"billing",
					"save",
					"get",
					"unitSurveyRepos",
					"DbUnitSurveyRepository",
					"unitSurveyProperty",
					"UnitSurveyProperty",
					"officeService",
					"OfficeService",
					"lookupId",
					"ffiliate",
					"Affiliate",
					"affiliate",
					"Affiliate",
					"Portfolio",
					"El Paso",
					"lookupName",
					"affiliate",
					"Affiliate",
					"portfolio",
					"Portfolio",
					"portfolio",
					"Portfolio",
					"ortfolio",
					"ortfolioForm",
					"PortfolioField",
					"portfolioField",
					"portfolioId",
					"portfolio",
					"Portfolio",
					"PortfolioForm",
					"portfolioForm",
					"portfolioField",
					"PortfolioField",
					"formName",
					"PortfolioForm",
					"PortfolioField",
					"portfolio",
					"Portfolio",
					"PortfolioForm",
					"remember",
					"portfolio",
					"Portfolio",
					"portfolio",
					"Portfolio",
					"member",
					"Member",
					"Account",
					"account",
					"Account",
					"propertyNumber",
					"App",
					"tenant",
					"Tenant",
					"jobKey",
					"",
					",",
					"eSignServiceMock",
					",\\n",
					"\\n",
					"Pending",
					"status",
					"__METHOD__ .",
					"{{ $productDocuments }}",
					"DocumentImagesWereCreated",
					"DocumentWasExecuted",
					"DocumentWasCreated",
					"DocumentWasSigned",
					"Log::debug",
					"MailService",
					", $1",
					"IEDocumentRepository"
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"groups":
			[
				{
					"selected": 18,
					"sheets":
					[
						{
							"buffer": 0,
							"file": "bms2-sandlot/composer.json",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 2652,
								"regions":
								{
								},
								"selection":
								[
									[
										242,
										242
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												1117,
												1118
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												168,
												169
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/JavaScript/JSON.sublime-syntax",
									"vintage":
									{
										"_vintageous_glue_until_normal_mode": false,
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"normal_insert_count": "1",
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 3
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 5,
							"type": "text"
						},
						{
							"buffer": 1,
							"file": "bms2-sandlot/app/Services/MailService.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 4688,
								"regions":
								{
								},
								"selection":
								[
									[
										3721,
										3721
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												4031,
												4032
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												3677,
												3678
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"_vintageous_glue_until_normal_mode": false,
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"normal_insert_count": "1",
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 43
									}
								},
								"translation.x": 0.0,
								"translation.y": 1846.0,
								"zoom_level": 1.0
							},
							"stack_index": 4,
							"type": "text"
						},
						{
							"buffer": 2,
							"file": "bms2-sandlot/phpunit.xml",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 919,
								"regions":
								{
								},
								"selection":
								[
									[
										216,
										216
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												217,
												218
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/double_quote.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												212,
												213
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/XML/XML.sublime-syntax",
									"vintage":
									{
										"_vintageous_glue_until_normal_mode": false,
										"_vintageous_non_interactive": false,
										"_vintageous_processing_notation": false,
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 39
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 15,
							"type": "text"
						},
						{
							"buffer": 3,
							"file": "bms2-sandlot/packages/bluemoon/user/src/Providers/UserServiceProvider.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 2818,
								"regions":
								{
								},
								"selection":
								[
									[
										1947,
										1947
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												2816,
												2817
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												551,
												552
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 5
									}
								},
								"translation.x": 0.0,
								"translation.y": 1506.0,
								"zoom_level": 1.0
							},
							"stack_index": 16,
							"type": "text"
						},
						{
							"buffer": 4,
							"file": "bms2-sandlot/app/Http/routes.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1242,
								"regions":
								{
								},
								"selection":
								[
									[
										794,
										794
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 34
									}
								},
								"translation.x": 0.0,
								"translation.y": 92.0,
								"zoom_level": 1.0
							},
							"stack_index": 35,
							"type": "text"
						},
						{
							"buffer": 5,
							"file": "bms2-sandlot/app/Http/Controllers/Auth/AuthController.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 4890,
								"regions":
								{
								},
								"selection":
								[
									[
										1039,
										1039
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												4888,
												4889
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												317,
												318
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 4
									}
								},
								"translation.x": 0.0,
								"translation.y": 266.0,
								"zoom_level": 1.0
							},
							"stack_index": 22,
							"type": "text"
						},
						{
							"buffer": 6,
							"file": "bms2-sandlot/app/Auth/Guard.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 2836,
								"regions":
								{
								},
								"selection":
								[
									[
										1373,
										1373
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												1798,
												1799
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												1361,
												1362
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 12
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 21,
							"type": "text"
						},
						{
							"buffer": 7,
							"file": "bms2-sandlot/app/Providers/UserProvider.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 4298,
								"regions":
								{
								},
								"selection":
								[
									[
										2433,
										2433
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												4296,
												4297
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												269,
												270
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"_vintageous_glue_until_normal_mode": false,
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"normal_insert_count": "1",
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 20
									}
								},
								"translation.x": 0.0,
								"translation.y": 483.0,
								"zoom_level": 1.0
							},
							"stack_index": 25,
							"type": "text"
						},
						{
							"buffer": 8,
							"file": "bms2-sandlot/vendor/laravel/framework/src/Illuminate/Foundation/Auth/AuthenticatesAndRegistersUsers.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 205,
								"regions":
								{
								},
								"selection":
								[
									[
										97,
										97
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												203,
												204
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												83,
												84
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 32,
							"type": "text"
						},
						{
							"buffer": 9,
							"file": "bms2-sandlot/vendor/laravel/framework/src/Illuminate/Foundation/Auth/AuthenticatesUsers.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 4287,
								"regions":
								{
								},
								"selection":
								[
									[
										730,
										730
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												2103,
												2104
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												709,
												710
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 18
									}
								},
								"translation.x": 0.0,
								"translation.y": 276.0,
								"zoom_level": 1.0
							},
							"stack_index": 30,
							"type": "text"
						},
						{
							"buffer": 10,
							"file": "bms2-sandlot/vendor/laravel/framework/src/Illuminate/Auth/Guard.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 19923,
								"regions":
								{
								},
								"selection":
								[
									[
										2701,
										2701
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
											"1":
											[
												546,
												547
											]
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 20
									}
								},
								"translation.x": 0.0,
								"translation.y": 2014.0,
								"zoom_level": 1.0
							},
							"stack_index": 28,
							"type": "text"
						},
						{
							"buffer": 11,
							"file": "bms2-sandlot/vendor/laravel/framework/src/Illuminate/Validation/Validator.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 72416,
								"regions":
								{
								},
								"selection":
								[
									[
										8624,
										8624
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax"
								},
								"translation.x": 0.0,
								"translation.y": 7442.0,
								"zoom_level": 1.0
							},
							"stack_index": 29,
							"type": "text"
						},
						{
							"buffer": 12,
							"file": "bms2-sandlot/vendor/laravel/framework/src/Illuminate/Foundation/Auth/RedirectsUsers.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 403,
								"regions":
								{
								},
								"selection":
								[
									[
										50,
										50
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 31,
							"type": "text"
						},
						{
							"buffer": 13,
							"file": "bms2-sandlot/vendor/laravel/framework/src/Illuminate/Contracts/Auth/Guard.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 2342,
								"regions":
								{
								},
								"selection":
								[
									[
										1535,
										1535
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												2340,
												2341
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												61,
												62
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax"
								},
								"translation.x": 0.0,
								"translation.y": 1048.0,
								"zoom_level": 1.0
							},
							"stack_index": 33,
							"type": "text"
						},
						{
							"buffer": 14,
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 11495,
								"regions":
								{
									"match":
									{
										"flags": 112,
										"regions":
										[
											[
												196,
												205
											],
											[
												545,
												557
											],
											[
												777,
												789
											],
											[
												1013,
												1025
											],
											[
												1294,
												1306
											],
											[
												1495,
												1507
											],
											[
												1524,
												1536
											],
											[
												2040,
												2054
											],
											[
												2585,
												2601
											],
											[
												3242,
												3258
											],
											[
												3886,
												3897
											],
											[
												3951,
												3962
											],
											[
												4029,
												4040
											],
											[
												4095,
												4106
											],
											[
												4144,
												4155
											],
											[
												4193,
												4204
											],
											[
												4238,
												4249
											],
											[
												4310,
												4321
											],
											[
												4344,
												4355
											],
											[
												4520,
												4531
											],
											[
												4723,
												4734
											],
											[
												5054,
												5065
											],
											[
												5205,
												5216
											],
											[
												5640,
												5651
											],
											[
												5959,
												5970
											],
											[
												6143,
												6154
											],
											[
												6390,
												6401
											],
											[
												6611,
												6622
											],
											[
												6782,
												6793
											],
											[
												6892,
												6903
											],
											[
												7113,
												7124
											],
											[
												7233,
												7244
											],
											[
												7565,
												7576
											],
											[
												7630,
												7641
											],
											[
												7707,
												7718
											],
											[
												7773,
												7784
											],
											[
												7822,
												7833
											],
											[
												7871,
												7882
											],
											[
												7915,
												7926
											],
											[
												7987,
												7998
											],
											[
												8020,
												8031
											],
											[
												8210,
												8221
											],
											[
												8413,
												8424
											],
											[
												8744,
												8755
											],
											[
												8894,
												8905
											],
											[
												9329,
												9340
											],
											[
												9656,
												9667
											],
											[
												9840,
												9851
											],
											[
												10096,
												10107
											],
											[
												10329,
												10340
											],
											[
												10500,
												10511
											],
											[
												10609,
												10620
											],
											[
												10829,
												10840
											],
											[
												10949,
												10960
											],
											[
												11268,
												11278
											]
										],
										"scope": ""
									}
								},
								"selection":
								[
									[
										11427,
										11427
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"detect_indentation": false,
									"line_numbers": false,
									"output_tag": 8,
									"result_base_dir": "",
									"result_file_regex": "^([^ \t].*):$",
									"result_line_regex": "^ +([0-9]+):",
									"scroll_past_end": true,
									"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
									"translate_tabs_to_spaces": false,
									"vintage":
									{
										"_vintageous_glue_until_normal_mode": false,
										"_vintageous_non_interactive": false,
										"_vintageous_processing_notation": false,
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 4738.0,
								"zoom_level": 1.0
							},
							"stack_index": 8,
							"type": "text"
						},
						{
							"buffer": 15,
							"file": "bms2-sandlot/app/Repositories/DbPropertyRepository.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 15531,
								"regions":
								{
								},
								"selection":
								[
									[
										5065,
										5065
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												5404,
												5405
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												4953,
												4954
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 20
									}
								},
								"translation.x": 0.0,
								"translation.y": 2173.0,
								"zoom_level": 1.0
							},
							"stack_index": 6,
							"type": "text"
						},
						{
							"buffer": 16,
							"file": "bms2-sandlot/config/database.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 7832,
								"regions":
								{
								},
								"selection":
								[
									[
										2247,
										2247
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												2270,
												2271
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/single_quote.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												2246,
												2247
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"highlight_line": false,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"_vintageous_glue_until_normal_mode": false,
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"normal_insert_count": "1",
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 31
									}
								},
								"translation.x": 0.0,
								"translation.y": 696.0,
								"zoom_level": 1.0
							},
							"stack_index": 2,
							"type": "text"
						},
						{
							"buffer": 17,
							"file": "bms2-sandlot/.env",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1863,
								"regions":
								{
								},
								"selection":
								[
									[
										612,
										612
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content"
									],
									"git_gutter_is_enabled": true,
									"syntax": "Packages/Text/Plain text.tmLanguage",
									"vintage":
									{
										"_vintageous_glue_until_normal_mode": false,
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"normal_insert_count": "1",
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 35
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 1,
							"type": "text"
						},
						{
							"buffer": 18,
							"file": "bms2-sandlot/packages/lease-core/database/migrations/2017_08_04_000000_create_form_property_use_table.php",
							"semi_transient": true,
							"settings":
							{
								"buffer_size": 1070,
								"regions":
								{
								},
								"selection":
								[
									[
										242,
										868
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												877,
												878
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/double_quote.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												232,
												233
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content"
									],
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_visual",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						},
						{
							"buffer": 19,
							"file": "bms2-sandlot/packages/leaseprogram/on-the-spot/src/Services/OnTheSpotService.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 7331,
								"regions":
								{
								},
								"selection":
								[
									[
										2467,
										2467
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
											"1":
											[
												346,
												347
											]
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 8
									}
								},
								"translation.x": 0.0,
								"translation.y": 854.0,
								"zoom_level": 1.0
							},
							"stack_index": 18,
							"type": "text"
						},
						{
							"buffer": 20,
							"file": "bms2-sandlot/app/Repositories/DbAccountRepository.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 9833,
								"regions":
								{
								},
								"selection":
								[
									[
										1278,
										1278
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
											"1":
											[
												447,
												448
											]
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 20
									}
								},
								"translation.x": 0.0,
								"translation.y": 402.0,
								"zoom_level": 1.0
							},
							"stack_index": 7,
							"type": "text"
						},
						{
							"buffer": 21,
							"file": "bms2-sandlot/packages/bluemoon/formdesigner/composer.json",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 389,
								"regions":
								{
								},
								"selection":
								[
									[
										2,
										2
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												388,
												389
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												0,
												1
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/JavaScript/JSON.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 17,
							"type": "text"
						},
						{
							"buffer": 22,
							"file": "bms2-sandlot/app/Services/PortfolioService.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 5547,
								"regions":
								{
								},
								"selection":
								[
									[
										3993,
										3993
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												4721,
												4722
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												3993,
												3994
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"highlight_line": false,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"_vintageous_glue_until_normal_mode": false,
										"_vintageous_non_interactive": false,
										"_vintageous_processing_notation": false,
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"normal_insert_count": "1",
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 4
									}
								},
								"translation.x": 0.0,
								"translation.y": 2243.0,
								"zoom_level": 1.0
							},
							"stack_index": 3,
							"type": "text"
						},
						{
							"buffer": 23,
							"file": "bms2-sandlot/packages/leaseprogram/settings/src/Services/RentalAppService.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 3391,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 9,
							"type": "text"
						},
						{
							"buffer": 24,
							"file": "bms2-sandlot/app/Repositories/DbRepository.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 34370,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion":
										{
											"data":
											{
												"_inp": ""
											},
											"name": "ViSearchForward"
										},
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "/",
										"register": "\"",
										"sequence": "/",
										"xpos": 34
									}
								},
								"translation.x": 0.0,
								"translation.y": 439.0,
								"zoom_level": 1.0
							},
							"stack_index": 19,
							"type": "text"
						},
						{
							"buffer": 25,
							"file": "bms2-sandlot/config/session.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 5524,
								"regions":
								{
								},
								"selection":
								[
									[
										2590,
										2590
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"highlight_line": false,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"_vintageous_glue_until_normal_mode": false,
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"normal_insert_count": "1",
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 6
									}
								},
								"translation.x": 0.0,
								"translation.y": 908.0,
								"zoom_level": 1.0
							},
							"stack_index": 14,
							"type": "text"
						},
						{
							"buffer": 26,
							"file": "bms2-sandlot/config/cache.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 2365,
								"regions":
								{
								},
								"selection":
								[
									[
										1866,
										1866
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												1868,
												1869
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/single_quote.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												1852,
												1853
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"highlight_line": false,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"_vintageous_glue_until_normal_mode": false,
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"normal_insert_count": "1",
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 59
									}
								},
								"translation.x": 0.0,
								"translation.y": 528.0,
								"zoom_level": 1.0
							},
							"stack_index": 13,
							"type": "text"
						},
						{
							"buffer": 27,
							"file": "bms2-sandlot/packages/leaseprogram/esign/resources/views/manage/index.blade.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 7908,
								"regions":
								{
								},
								"selection":
								[
									[
										4891,
										4891
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												4907,
												4908
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												4884,
												4885
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/Laravel Blade Highlighter/blade.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 34
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 12,
							"type": "text"
						},
						{
							"buffer": 28,
							"file": "bms2-sandlot/packages/leaseprogram/rentalapp/src/Services/RentalApplicationService.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 6468,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 11,
							"type": "text"
						},
						{
							"buffer": 29,
							"file": "bms2-sandlot/packages/leaseprogram/esign/resources/views/launch/index.blade.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 7377,
								"regions":
								{
								},
								"selection":
								[
									[
										1310,
										1310
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												4136,
												4137
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												1119,
												1120
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/Laravel Blade Highlighter/blade.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 8
									}
								},
								"translation.x": 0.0,
								"translation.y": 518.0,
								"zoom_level": 1.0
							},
							"stack_index": 20,
							"type": "text"
						},
						{
							"buffer": 30,
							"file": "bms2-sandlot/app/Providers/AppServiceProvider.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 5198,
								"regions":
								{
								},
								"selection":
								[
									[
										953,
										953
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 27,
							"type": "text"
						},
						{
							"buffer": 31,
							"file": "bms2-sandlot/vendor/laravel/framework/src/Illuminate/Hashing/BcryptHasher.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1877,
								"regions":
								{
								},
								"selection":
								[
									[
										1174,
										1174
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												1210,
												1211
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												1071,
												1072
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 897.0,
								"zoom_level": 1.0
							},
							"stack_index": 26,
							"type": "text"
						},
						{
							"buffer": 32,
							"file": "bms2-sandlot/app/Services/ApiService.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 2304,
								"regions":
								{
								},
								"selection":
								[
									[
										609,
										609
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												612,
												613
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/single_quote.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												589,
												590
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"_vintageous_glue_until_normal_mode": true,
										"action": null,
										"action_count": "",
										"mode": "mode_insert",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"normal_insert_count": "1",
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 53
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 23,
							"type": "text"
						},
						{
							"buffer": 33,
							"file": "bms2-sandlot/config/bluemoon.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 2600,
								"regions":
								{
								},
								"selection":
								[
									[
										2081,
										2081
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												2083,
												2084
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/single_quote.png",
												"brackethighlighter.default"
											]
										},
										"open":
										{
											"1":
											[
												2069,
												2070
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_visual",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 17
									}
								},
								"translation.x": 0.0,
								"translation.y": 440.0,
								"zoom_level": 1.0
							},
							"stack_index": 24,
							"type": "text"
						},
						{
							"buffer": 34,
							"file": "bms2-sandlot/packages/leaseprogram/esign/src/Services/EsignService.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 7956,
								"regions":
								{
								},
								"selection":
								[
									[
										6,
										6
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"highlight_line": false,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"_vintageous_glue_until_normal_mode": false,
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"normal_insert_count": "1",
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 10,
							"type": "text"
						},
						{
							"buffer": 35,
							"file": "bms2-sandlot/packages/bluemoon/officesuite/src/Http/Controllers/SettingsController.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 706,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
									"git_gutter_is_enabled": true,
									"syntax": "Packages/PHP/PHP.sublime-syntax",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 34,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 39.0
			},
			"input":
			{
				"height": 39.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					]
				],
				"cols":
				[
					0.0,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.exec":
			{
				"height": 168.0
			},
			"output.find_results":
			{
				"height": 0.0
			},
			"pinned_build_system": "Packages/User/builds/psr2.sublime-build",
			"position": "0,1,0,0,0,93,96,733,576,1366,768",
			"project": "bm2.sublime-project",
			"replace":
			{
				"height": 72.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"",
						".env"
					],
					[
						"configdata",
						"config/database.php"
					],
					[
						".env",
						".env"
					],
					[
						"mailser",
						"app/Services/MailService.php"
					],
					[
						"composer.",
						"composer.json"
					],
					[
						"portservi",
						"app/Services/PortfolioService.php"
					],
					[
						"propertyrepos",
						"app/Repositories/DbPropertyRepository.php"
					],
					[
						"rentalappservice",
						"packages/leaseprogram/settings/src/Services/RentalAppService.php"
					],
					[
						"cache",
						"config/cache.php"
					],
					[
						"confisessio",
						"config/session.php"
					],
					[
						"php",
						"phpunit.xml"
					],
					[
						"userserv",
						"packages/bluemoon/user/src/Providers/UserServiceProvider.php"
					],
					[
						"userserp",
						"packages/bluemoon/user/src/Providers/UserServiceProvider.php"
					],
					[
						"phpuni",
						"phpunit.xml"
					],
					[
						"composer",
						"composer.json"
					],
					[
						"userservpr",
						"packages/bluemoon/user/src/Providers/UserServiceProvider.php"
					],
					[
						"userservprovi",
						"packages/bluemoon/user/src/Providers/UserServiceProvider.php"
					],
					[
						"c",
						"composer.json"
					],
					[
						"packdmscompose",
						"packages/bluemoon/formdesigner/composer.json"
					],
					[
						"portservice",
						"app/Services/PortfolioService.php"
					],
					[
						"dbaccoun",
						"app/Repositories/DbAccountRepository.php"
					],
					[
						"onth",
						"packages/leaseprogram/on-the-spot/src/Services/OnTheSpotService.php"
					],
					[
						"cache.php",
						"config/cache.php"
					],
					[
						"configsession",
						"config/session.php"
					],
					[
						"config/ca",
						"config/cache.php"
					],
					[
						"database",
						"config/database.php"
					],
					[
						"gaur",
						"app/Auth/Guard.php"
					],
					[
						"api",
						"app/Services/ApiService.php"
					],
					[
						"authcont",
						"app/Http/Controllers/Auth/AuthController.php"
					],
					[
						"apiservice",
						"app/Services/ApiService.php"
					],
					[
						"settingcon",
						"packages/bluemoon/officesuite/src/Http/Controllers/SettingsController.php"
					],
					[
						"routes",
						"app/Http/routes.php"
					],
					[
						"composer.json",
						"composer.json"
					],
					[
						"venmessacompoer",
						"vendor/bluemoonforms/messagingservice/composer.json"
					],
					[
						"emailini",
						"app/Listeners/Events/EmailInitialNotice.php"
					],
					[
						"dbedo",
						"app/Libraries/Repositories/DbEDocumentRepository.php"
					],
					[
						"product",
						"app/Models/Product.php"
					],
					[
						"/",
						"app/Listeners/Events/EmailInitialNotice.php"
					],
					[
						"esign",
						"app/Services/ESignatureService.php"
					],
					[
						"esignser",
						"app/Services/ESignatureService.php"
					],
					[
						"eventserpor",
						"app/Providers/EventServiceProvider.php"
					],
					[
						"dbesign",
						"app/Libraries/Repositories/DbESignerRepository.php"
					],
					[
						"e",
						"app/Services/ESignatureService.php"
					],
					[
						"customer",
						"app/Models/Customer.php"
					],
					[
						"edocrepo",
						"app/Libraries/Repositories/DbEDocumentRepository.php"
					],
					[
						"mailservic",
						"app/Services/MailService.php"
					],
					[
						"edocumentre",
						"app/Libraries/Repositories/DbEDocumentRepository.php"
					],
					[
						"work",
						"app/Http/Controllers/WorkflowController.php"
					],
					[
						"rout",
						"app/Http/routes.php"
					],
					[
						"disclosure.js",
						"public/js/app/disclosure.js"
					],
					[
						"documentrepo",
						"app/Libraries/Repositories/DbEDocumentRepository.php"
					],
					[
						"esigner.php",
						"app/Models/ESigner.php"
					],
					[
						"esi",
						"app/Services/ESignatureService.php"
					],
					[
						"eventserpro",
						"app/Providers/EventServiceProvider.php"
					],
					[
						"edocu",
						"app/Models/EDocument.php"
					],
					[
						"approutes",
						"app/Http/routes.php"
					],
					[
						"mail",
						"app/Services/MailService.php"
					],
					[
						"checkre",
						"app/Listeners/Events/CheckReadyToExecute.php"
					],
					[
						"emailexe",
						"bms-esign/app/Listeners/Events/EmailExecutedNotice.php"
					],
					[
						"check",
						"bms-esign/app/Listeners/Events/CheckReadyToExecute.php"
					],
					[
						"mai",
						"bms-esign/app/Services/MailService.php"
					],
					[
						"config/database",
						"bms-esign/config/database.php"
					],
					[
						"obserserprovi",
						"bms-esign/app/Providers/ObserverServiceProvider.php"
					],
					[
						"eventcon",
						"bms-esign/app/Http/Controllers/EventController.php"
					],
					[
						"property",
						"bms-esign/app/Models/Property.php"
					],
					[
						"emailsignot",
						"bms-esign/app/Listeners/Events/EmailSignatureNotice.php"
					],
					[
						"eveserpr",
						"bms-esign/app/Providers/EventServiceProvider.php"
					],
					[
						"eventser",
						"bms-esign-compare/app/Providers/EventServiceProvider.php"
					],
					[
						"eventserverpro",
						"vendor/laravel/framework/src/Illuminate/Foundation/Support/Providers/EventServiceProvider.php"
					],
					[
						"mas",
						"resources/views/email/master.blade.php"
					],
					[
						"configdatab",
						"config/database.php"
					],
					[
						"illumifoundatapplication",
						"vendor/laravel/framework/src/Illuminate/Foundation/Application.php"
					],
					[
						"sign",
						"resources/views/email/sign.blade.php"
					],
					[
						"eventcontr",
						"app/Http/Controllers/EventController.php"
					],
					[
						"emailsign",
						"app/Listeners/Events/EmailSignatureNotice.php"
					],
					[
						"mailtest",
						"tests/bluemoon/esignature/services/MailServiceTest.php"
					],
					[
						"mailservi",
						"app/Services/MailService.php"
					],
					[
						"master",
						"resources/views/email/master.blade.php"
					],
					[
						"mailsertest",
						"tests/bluemoon/esignature/services/MailServiceTest.php"
					],
					[
						"mailserv",
						"app/Services/MailService.php"
					],
					[
						"owner",
						"resources/views/email/ownerComplete.blade.php"
					],
					[
						"execu",
						"resources/views/email/executed.blade.php"
					],
					[
						"mails",
						"app/Services/MailService.php"
					],
					[
						"mailsertes",
						"tests/bluemoon/esignature/services/MailServiceTest.php"
					],
					[
						"emasignblad",
						"resources/views/email/signature.blade.php"
					],
					[
						"even",
						"app/Providers/EventServiceProvider.php"
					],
					[
						"readto",
						"resources/views/email/readyToExecute.blade.php"
					],
					[
						"esigser",
						"app/Services/ESignatureService.php"
					],
					[
						"observer",
						"app/Providers/ObserverServiceProvider.php"
					],
					[
						"workflo",
						"app/Http/Controllers/WorkflowController.php"
					],
					[
						"eventserporvi",
						"app/Providers/EventServiceProvider.php"
					],
					[
						"d",
						"config/database.php"
					],
					[
						"debugexceptiohand",
						"vendor/symfony/debug/Symfony/Component/Debug/ExceptionHandler.php"
					],
					[
						"handler",
						"app/Exceptions/Handler.php"
					],
					[
						"response",
						"app/Providers/ResponseMacroServiceProvider.php"
					],
					[
						"config/app",
						"config/app.php"
					],
					[
						"servieprove",
						"app/Providers/AppServiceProvider.php"
					],
					[
						"configapp",
						"config/app.php"
					],
					[
						"event",
						"app/Providers/EventServiceProvider.php"
					],
					[
						"emailsino",
						"app/Listeners/Events/EmailSignatureNotice.php"
					],
					[
						"dbes",
						"app/Libraries/Repositories/DbESignerRepository.php"
					],
					[
						"eventcontroller",
						"app/Http/Controllers/EventController.php"
					],
					[
						"configdatabase",
						"config/database.php"
					],
					[
						"symfony/component/debug/exception/fatalerrorexception",
						"vendor/symfony/debug/Symfony/Component/Debug/Exception/FatalErrorException.php"
					],
					[
						"workf",
						"app/Http/Controllers/WorkflowController.php"
					],
					[
						"createdo",
						"bms-esign/app/Commands/CreateDocumentImages.php"
					],
					[
						"emailsi",
						"bms-esign-compare/app/Listeners/Events/EmailSignatureNotice.php"
					],
					[
						"emailsignno",
						"bms-esign/app/Listeners/Events/EmailSignatureNotice.php"
					],
					[
						"eventserv",
						"bms-esign-compare/app/Providers/EventServiceProvider.php"
					],
					[
						"configdatabas",
						"config/database.php"
					],
					[
						"disclosure.blad.php",
						"resources/views/disclosure.blade.php"
					],
					[
						"apphttkern",
						"app/Http/Kernel.php"
					],
					[
						"kernel",
						"app/Console/Kernel.php"
					],
					[
						"complete.js",
						"public/js/app/complete.js"
					],
					[
						"wor",
						"app/Http/Controllers/WorkflowController.php"
					],
					[
						"route",
						"app/Http/routes.php"
					],
					[
						"eventcr",
						"app/Http/Controllers/EventController.php"
					],
					[
						"esignservice",
						"app/Services/ESignatureService.php"
					],
					[
						"db",
						"app/Libraries/Repositories/DbEDocumentRepository.php"
					],
					[
						"esignservi",
						"app/Services/ESignatureService.php"
					],
					[
						"mobilecontr",
						"app/Http/Controllers/MobileController.php"
					],
					[
						"workflowcontroller.ph",
						"app/Http/Controllers/WorkflowController.php"
					],
					[
						"esigner",
						"app/Observers/ESignerObserver.php"
					],
					[
						"email",
						"app/Listeners/Events/EmailInitialNotice.php"
					],
					[
						"configesigature",
						"config/esignature.php"
					],
					[
						"dbesinerreposi",
						"app/Libraries/Repositories/DbESignerRepository.php"
					],
					[
						"confiesign",
						"config/esignature.php"
					],
					[
						"obserserprov",
						"app/Providers/ObserverServiceProvider.php"
					]
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 500.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 380.0
			},
			"select_symbol":
			{
				"height": 39.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"testgetsignerstoem",
						"testGetSignersToEmail"
					],
					[
						"testsethistory",
						"testSetHistory"
					],
					[
						"testgetdocument",
						"testGetDocument"
					],
					[
						"testisexe",
						"testIsExecutableDocument"
					],
					[
						"tested",
						"testEDocumentCreation"
					],
					[
						"isowner",
						"isOwner"
					],
					[
						"checkready",
						"CheckReadyToExecute"
					],
					[
						"documentwassi",
						"DocumentWasSigned"
					],
					[
						"report",
						"report"
					],
					[
						"savesin",
						"saveSignatureInitials"
					],
					[
						"getNextSigner",
						"testGetNextSigner"
					],
					[
						"ajax",
						"ajax"
					],
					[
						"savesi",
						"saveSignatureInitials"
					],
					[
						"savesignat",
						"saveSignatureInitials"
					],
					[
						"getdocu",
						"getDocument"
					],
					[
						"getdo",
						"getDocument"
					],
					[
						"testgetnex",
						"testGetNextSigner"
					],
					[
						"testgetnextsigner",
						"testGetNextSigner"
					],
					[
						"testsaveedoc",
						"testSaveEdocument"
					],
					[
						"testBuildformlayou",
						"testBuildFormLayoutForResident"
					],
					[
						"testsaveesign",
						"testSaveEsigner"
					],
					[
						"testsaveedo",
						"testSaveEdocument"
					],
					[
						"testgetforml",
						"testGetFormLayout"
					],
					[
						"getsignermodel",
						"testGetSignerModelById"
					],
					[
						"isexecuat",
						"testIsExecutableDocument"
					],
					[
						"esignercreat",
						"testESignerCreation"
					],
					[
						"testcustomercre",
						"testCustomerCreation"
					],
					[
						"setFormAtt",
						"setFormAttributes"
					],
					[
						"createTech",
						"createTechnote"
					],
					[
						"tomodel",
						"toModel"
					],
					[
						"getibasemodel",
						"getIbaseModelById"
					],
					[
						"transactions",
						"transactionSave"
					],
					[
						"newtechnote",
						"newTechnote"
					],
					[
						"tobu",
						"toBusinessObjects"
					],
					[
						"canresetpass",
						"CanResetPasswordContract"
					],
					[
						"testsave",
						"testSave"
					],
					[
						"getbypor",
						"getByPortfolio"
					],
					[
						"PerformIn",
						"performInsert"
					],
					[
						"syncmodel",
						"syncModelPks"
					],
					[
						"finishSave",
						"finishSave"
					],
					[
						"create",
						"create"
					],
					[
						"getAttr",
						"getAttributes"
					],
					[
						"setAttributes",
						"setAttributes"
					],
					[
						"newBaseQuery",
						"newBaseQueryBuilder"
					],
					[
						"performinsert",
						"performInsert"
					],
					[
						"increment",
						"incrementGeneratorId"
					],
					[
						"insertgetid",
						"insertGetId"
					],
					[
						"insertand",
						"insertAndSetId"
					],
					[
						"insertGetId",
						"insertGetId"
					],
					[
						"statement",
						"statement"
					],
					[
						"compileinsert",
						"compileInsert"
					],
					[
						"compileinsertgetid",
						"compileInsertGetId"
					],
					[
						"insertandsetid",
						"insertAndSetId"
					],
					[
						"createPortfolio",
						"createPortfolio"
					],
					[
						"getPermissions",
						"getPermissions"
					],
					[
						"getModelType",
						"getModelType"
					],
					[
						"getdatabydate",
						"getDataByDateRange"
					],
					[
						"getDataBy",
						"getDataByDateRange"
					],
					[
						"generateclick",
						"generateClickOrderReport"
					],
					[
						"testgetibase",
						"testGetIbaseById"
					],
					[
						"testUnitgetby",
						"testUnitGetById"
					],
					[
						"testGenerateClic",
						"testGenerateClickOrderReport"
					],
					[
						"testSearch",
						"testSearch"
					],
					[
						"search",
						"search"
					],
					[
						"testgetibasebyID",
						"testGetIbaseById"
					],
					[
						"testsearcoun",
						"testSearchCount"
					],
					[
						"translatesearcht",
						"translateSearchTags"
					],
					[
						"testgetibasebyid",
						"testGetIbaseById"
					],
					[
						"getibasebyid",
						"getIbaseById"
					],
					[
						"getById",
						"getById"
					],
					[
						"dbaccountrepotes",
						"DbAccountRepositoryTests"
					],
					[
						"testgetbymonth",
						"testGetByMonth"
					],
					[
						"dbunitrepos",
						"testDbUnitSurveyRepositoryCreation"
					],
					[
						"dbprop",
						"DbPropertyRepositoryTests"
					],
					[
						"getibase",
						"getIbaseById"
					],
					[
						"testgetassi",
						"testGetAssociations"
					],
					[
						"testgetass",
						"testGetAssociations"
					],
					[
						"configurehand",
						"configureHandlers"
					],
					[
						"welcom",
						"WelcomeController"
					],
					[
						"billingcon",
						"BillingController"
					],
					[
						"getaccount",
						"getAccount"
					],
					[
						"testPor",
						"testPortfolioCreation"
					],
					[
						"testGetProperty",
						"testGetProperty"
					],
					[
						"PortfolioServiceTest",
						"PortfolioServiceTest"
					],
					[
						"saveProperty",
						"saveProperty"
					],
					[
						"getmodelbyid",
						"getModelById"
					],
					[
						"ibaseaffiliate",
						"IbaseAffiliate"
					],
					[
						"Iaccount",
						"IAccountRepository"
					],
					[
						"IAccount",
						"IAccountRepository"
					],
					[
						"testaccoutnmem",
						"testAccountMember"
					],
					[
						"newBas",
						"newBaseQueryBuilder"
					],
					[
						"saves",
						"saveSignatureInitials"
					],
					[
						"save",
						"SaveOwnerSignature"
					],
					[
						"savesig",
						"saveSignatureInitials"
					],
					[
						"savesiini",
						"saveSignatureInitials"
					],
					[
						"createdocumentimages",
						"CreateDocumentImages"
					],
					[
						"gettenant",
						"getLeaseTenants"
					],
					[
						"emailexe",
						"EmailExecutedNotice"
					],
					[
						"testgetemail",
						"testGetEmailDictionaryResident"
					],
					[
						"mailsertest",
						"MailServiceTest"
					],
					[
						"testGetEmail",
						"testGetEmailDictionaryResident"
					],
					[
						"sendex",
						"sendExecutedEmail"
					],
					[
						"docwasex",
						"DocumentWasExecuted"
					],
					[
						"docuwase",
						"DocumentWasExecuted"
					],
					[
						"doecwasex",
						"DocumentWasExecuted"
					],
					[
						"configurel",
						"ConfigureLogging"
					],
					[
						"saveowne",
						"SaveOwnerSignature"
					],
					[
						"saveo",
						"SaveOwnerSignature"
					],
					[
						"emailsig",
						"EmailSignatureNotice"
					],
					[
						"sendsig",
						"sendSignatureEmail"
					],
					[
						"documentwasSi",
						"DocumentWasSigned"
					],
					[
						"useDailyFiles",
						"useDailyFiles"
					],
					[
						"sendSign",
						"sendSignatureEmail"
					],
					[
						"edocumentob",
						"EDocumentObserver"
					],
					[
						"testgetsignermod",
						"testGetSignerModelByObject"
					],
					[
						"getDocument",
						"getDocument"
					],
					[
						"isexecu",
						"isExecutable"
					],
					[
						"getemail",
						"getEmailDictionary"
					],
					[
						"createDocumentMock",
						"createDocumentMock"
					],
					[
						"testgetsigtoemai",
						"testGetSignersToEmail"
					],
					[
						"createdocmomock",
						"createDocumentModelMock"
					],
					[
						"getemaild",
						"getEmailDictionary"
					],
					[
						"getemdicre",
						"testGetEmailDictionaryResident"
					],
					[
						"testGetEamil",
						"testGetEmailDictionaryResident"
					],
					[
						"getEmail",
						"getEmailDictionary"
					],
					[
						"sendsu",
						"sendSubmittedEmail"
					],
					[
						"testsendsigemail",
						"testSendSignatureEmail"
					],
					[
						"testsensig",
						"testSendSignatureEmail"
					]
				],
				"width": 795.0
			},
			"selected_group": 0,
			"settings":
			{
				"_vintageous_last_buffer_search": "repos",
				"_vintageous_last_buffer_search_command": "vi_slash",
				"_vintageous_last_char_search_command": "vi_t",
				"_vintageous_last_character_search": "_",
				"_vintageous_reset_during_init": true,
				"last_automatic_layout":
				[
					[
						0,
						0,
						1,
						1
					]
				],
				"vintage":
				{
					"_cmdline_cd": "/home/jadavis/repos/bms2-sandlot/app/Services"
				}
			},
			"show_minimap": false,
			"show_open_files": false,
			"show_tabs": false,
			"side_bar_visible": true,
			"side_bar_width": 275.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 331,
			"workspace_name": "/home/jadavis/repos/bm2.sublime-workspace"
		}
	],
	"workspaces":
	{
		"recent_workspaces":
		[
			"/home/jadavis/repos/bm2.sublime-workspace",
			"/home/jadavis/repos/esign.sublime-workspace",
			"/home/jadavis/repos/bm1.sublime-workspace",
			"/home/jadavis/repos/mobile.sublime-workspace",
			"/home/jadavis/repos/dms.sublime-workspace",
			"/home/jadavis/repos/bms-esign/app/Libraries/Repositories/dms.sublime-workspace",
			"/home/jadavis/repos/github-prod-keys.sublime-workspace",
			"/home/jadavis/repos/dev_database.sublime-workspace",
			"/home/jadavis/repos/kappa.sublime-workspace",
			"/home/jadavis/repos/configuration.sublime-workspace",
			"/home/jadavis/repos/bluemoon-production/lib/Forms/mobile.sublime-workspace",
			"/home/jadavis/repos/bms2-sandlot/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/mobile.sublime-workspace",
			"/home/jadavis/repos/jadinvt.github.io.sublime-workspace",
			"/home/jadavis/repos/deployment-mgr.sublime-workspace",
			"/home/jadavis/repos/*.sublime-workspace",
			"/home/jadavis/repos/blog.sublime-workspace",
			"/home/jadavis/repos/canvas.sublime-workspace",
			"/home/jadavis/repos/bluemoon-production/cgi-bin/classes/taa_license_renewal.class.sublime-workspace",
			"/home/jadavis/repos/bms2-sandlot/app/Repositories/jadinvt.github.io.sublime-workspace",
			"/home/jadavis/repos/opsworks.sublime-workspace",
			"/home/jadavis/repos/bluemoon-production/sql/dev/grants.sublime-workspace",
			"/home/jadavis/repos/bms-esign/app/Models/jaddavis.sublime-workspace",
			"/home/jadavis/repos/structure.sublime-workspace",
			"/home/jadavis/repos/laravel.sublime-workspace",
			"/home/jadavis/repos/bluemoon-production/html/products/forms_online/assoc_forms/modules/Association/index.sublime-workspace",
			"/home/jadavis/repos/bms2-sandlot/config/bluemoon.sublime-workspace",
			"/home/jadavis/repos/bluemoon-production/html/products/forms_online/assoc_forms/modules/Association/history.sublime-workspace",
			"/home/jadavis/repos/eloquent-series.sublime-workspace"
		]
	}
}
